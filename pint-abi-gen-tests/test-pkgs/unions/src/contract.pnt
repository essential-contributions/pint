union UU = A(int) | B | C(b256);
union WW = D | E(UU);
union RR = A(lib::PP) | B;

storage {
    u1: UU,
    u2: UU,
    u3: UU,
    w1: WW,
    pp1: lib::PP,
    pp2: lib::PP,
    aa: lib2::A,
    dd: lib2::D,
    tt: lib3::foo::TT,
    rr: RR, 
    oo: lib3::foo::OO,
    array: RR[2],
    tuple: { lib2::A, lib3::foo::TT },
    map: ( b256 => WW ),
}

predicate Foo(
    v_u1: UU,
    v_u2: UU,
    v_u3: UU,
    v_w1: WW,
    v_pp1: lib::PP,
    v_pp2: lib::PP,
    v_aa: lib2::A,
    v_dd: lib2::D,
    v_tt: lib3::foo::TT,
    v_rr: RR,
    v_oo: lib3::foo::OO,
    v_array: RR[2],
    v_tuple: { lib2::A, lib3::foo::TT },
) {
    constraint v_u1 == UU::A(69);
    constraint v_u2 == UU::B;
    constraint v_u3 == UU::C(0x6969696969696969696969696969696969696969696969696969696969696969);
    constraint v_w1 == WW::E(UU::A(69));
    constraint v_pp1 == lib::PP::T(lib::QQ::M);
    constraint v_pp2 == lib::PP::JJ(0x1111111111111111111111111111111111111111111111111111111111111111);
    constraint v_aa == lib2::A::C;
    constraint v_dd == lib2::D::E(lib3::foo::TT::B); 
    constraint v_tt == lib3::foo::TT::B;
    constraint v_rr == RR::A(lib::PP::T(lib::QQ::N(42)));
    constraint v_oo == lib3::foo::OO::B({lib3::foo::TT::A, lib3::foo::TT::B});
    constraint v_array == [ RR::B, RR::A(lib::PP::T(lib::QQ::M))];
    constraint v_tuple == { lib2::A::B, lib3::foo::TT::A };

    // Declare some local variables.
    let u1 = mut storage::u1;
    let u2 = mut storage::u2;
    let u3 = mut storage::u3;
    let w1 = mut storage::w1;
    let pp1 = mut storage::pp1;
    let pp2 = mut storage::pp2;
    let aa = mut storage::aa;
    let dd = mut storage::dd;
    let tt = mut storage::tt;
    let rr = mut storage::rr;
    let oo = mut storage::oo;
    let array = mut storage::array;
    let tuple = mut storage::tuple;
    let map_1 = mut
    storage::map[0x2222222222222222222222222222222222222222222222222222222222222222];
    let map_2 = mut
    storage::map[0x3333333333333333333333333333333333333333333333333333333333333333];

    constraint u1' == UU::A(69);
    constraint u2' == UU::B;
    constraint u3' == UU::C(0x6969696969696969696969696969696969696969696969696969696969696969);
    constraint w1' == WW::E(UU::A(69));
    constraint pp1' == lib::PP::T(lib::QQ::M);
    constraint pp2' == lib::PP::JJ(0x1111111111111111111111111111111111111111111111111111111111111111);
    constraint aa' == lib2::A::C;
    constraint dd' == lib2::D::E(lib3::foo::TT::B); 
    constraint tt' == lib3::foo::TT::B;
    constraint rr' == RR::A(lib::PP::T(lib::QQ::N(42)));
    constraint oo' == lib3::foo::OO::B({lib3::foo::TT::A, lib3::foo::TT::B});
    constraint array' == [ RR::B, RR::A(lib::PP::T(lib::QQ::M))];
    constraint tuple' == { lib2::A::B, lib3::foo::TT::A };
    constraint map_1' == WW::D;
    constraint map_2' == WW::E(UU::A(55));
}
