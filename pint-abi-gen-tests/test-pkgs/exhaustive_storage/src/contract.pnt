union UU = A(int) | B | C(b256) | D({ int, b256 }) | E({ b256, bool });

storage {
    my_map0: (bool => int),
    my_map1: (b256 => bool),
    my_map2: ({ bool, int } => b256),
    my_map3: ({ int, b256 } => bool),
    my_map4: (int[5] => int),
    my_map5: ({ bool, int}[2][3] => int),
    my_map6: (UU => int),
    my_tuple_map0: { (int => int), int },
    my_tuple_map1: (int => { int, (int => { int, int }) }),
}

predicate Foo(
    v0: bool,
    v1: int,
    v2: b256,
    v3: { int, int },
    v4: { int, int, { int, int } },
    v5: { int, int[3], b256[2] },
) {
    // Here we write a bunch of arbitrary constraints to check encoding/decoding
    // of the different types etc.
    constraint v0;
    constraint v1 == 42;
    constraint v2 == 0x1111111100000000111111110000000011111111000000001111111100000000;
    constraint v3 == { 30, 31 };
    constraint v4 == { 40, 41, { 420, 421 } };
    constraint v5 == {
        69, 
        [70, 71, 72], 
        [
            0x3333333333333333333333333333333333333333333333333333333333333333,
            0x4444444444444444444444444444444444444444444444444444444444444444,
        ]
    };

    // Declare some local variables.
    let my_map0_key0: int? = storage::my_map0[true]';
    let my_map1_key4: bool? = storage::my_map1[0x4444444444444444444444444444444444444444444444444444444444444444]';
    let my_map2_key1_30: b256? = storage::my_map2[{ true, 30 }]';
    let my_map3_key490_1: bool? = storage::my_map3[{ 490, 0x1111111111111111111111111111111111111111111111111111111111111111}]';
    let my_map4_key01234: int? = storage::my_map4[[0, 1, 2, 3, 4]]';
    let my_map5: int? = storage::my_map5[[[{ false, 2 }, { true, 40 }, { false, 24 }], [{ true, 42 }, { false, 21 }, { false, 25 }]]]';
    let my_map6: int? = storage::my_map6[UU::A(81)]';
    let my_tuple_map0: int? = storage::my_tuple_map0.0[25]';
    let my_tuple_map1_key6_2: int? = storage::my_tuple_map1[6].1[2].1';

    // Check the let.
    constraint my_map0_key0! == 111;
    constraint my_map1_key4! == false;
    constraint my_map2_key1_30! == 0x0000000000000001000000000000000100000000000000010000000000000001;
    constraint my_map3_key490_1! == true;
    constraint my_map4_key01234! == 720;
    constraint my_map5! == 49;
    constraint my_map6! == 82;
    constraint my_tuple_map0! == 26;
    constraint my_tuple_map1_key6_2! == 13;
}
