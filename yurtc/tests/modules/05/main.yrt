use ::a_mod::a;

constraint a > b_mod::c_mod::c;

solve satisfy;

// intermediate <<<
// var ::b_mod::c_mod::c;
// var ::b_mod::e_mod::f_mod::f;
// var ::a_mod::a;
// var ::b_mod::k;
// constraint (::a_mod::a > ::b_mod::c_mod::c);
// constraint (::b_mod::c_mod::c == ::b_mod::e_mod::f_mod::f);
// constraint (::b_mod::e_mod::f_mod::f == 5);
// constraint (::a_mod::a == (::b_mod::c_mod::c + ::b_mod::k));
// constraint (::b_mod::k == ::b_mod::c_mod::c);
// solve satisfy;
// >>>

// compiled_intent <<<
// var ::b_mod::c_mod::c: int;
// var ::b_mod::e_mod::f_mod::f: int;
// var ::a_mod::a: int;
// var ::b_mod::k: int;
// constraint (::a_mod::a > ::b_mod::c_mod::c);
// constraint (::b_mod::c_mod::c == ::b_mod::e_mod::f_mod::f);
// constraint (::b_mod::e_mod::f_mod::f == 5);
// constraint (::a_mod::a == (::b_mod::c_mod::c + ::b_mod::k));
// constraint (::b_mod::k == ::b_mod::c_mod::c);
// solve satisfy;
// >>>
