// <validate>

// intermediate <<<
// var ::q: int[8];
// constraint forall i in 0..7, { ((::q[::i] >= 0) && (::q[::i] <= 7)) };
// constraint forall i in 0..7, j in 0..7, where (::i < ::j) { ((!(::q[::i] == ::q[::j]) && ((::q[::i] + ::i) != (::q[::j] + ::j))) && ((::q[::i] + ::j) != (::q[::j] + ::i))) };
// solve satisfy;
// >>>

// flattened <<<
// var ::q[0]: int;
// var ::q[1]: int;
// var ::q[2]: int;
// var ::q[3]: int;
// var ::q[4]: int;
// var ::q[5]: int;
// var ::q[6]: int;
// var ::q[7]: int;
// constraint ((((((((1 && ((::q[0] >= 0) && (::q[0] <= 7))) && ((::q[1] >= 0) && (::q[1] <= 7))) && ((::q[2] >= 0) && (::q[2] <= 7))) && ((::q[3] >= 0) && (::q[3] <= 7))) && ((::q[4] >= 0) && (::q[4] <= 7))) && ((::q[5] >= 0) && (::q[5] <= 7))) && ((::q[6] >= 0) && (::q[6] <= 7))) && ((::q[7] >= 0) && (::q[7] <= 7)));
// constraint ((((((((((((((((((((((((((((1 && ((!(::q[0] == ::q[1]) && ((::q[0] + 0) != (::q[1] + 1))) && ((::q[0] + 1) != (::q[1] + 0)))) && ((!(::q[0] == ::q[2]) && ((::q[0] + 0) != (::q[2] + 2))) && ((::q[0] + 2) != (::q[2] + 0)))) && ((!(::q[0] == ::q[3]) && ((::q[0] + 0) != (::q[3] + 3))) && ((::q[0] + 3) != (::q[3] + 0)))) && ((!(::q[0] == ::q[4]) && ((::q[0] + 0) != (::q[4] + 4))) && ((::q[0] + 4) != (::q[4] + 0)))) && ((!(::q[0] == ::q[5]) && ((::q[0] + 0) != (::q[5] + 5))) && ((::q[0] + 5) != (::q[5] + 0)))) && ((!(::q[0] == ::q[6]) && ((::q[0] + 0) != (::q[6] + 6))) && ((::q[0] + 6) != (::q[6] + 0)))) && ((!(::q[0] == ::q[7]) && ((::q[0] + 0) != (::q[7] + 7))) && ((::q[0] + 7) != (::q[7] + 0)))) && ((!(::q[1] == ::q[2]) && ((::q[1] + 1) != (::q[2] + 2))) && ((::q[1] + 2) != (::q[2] + 1)))) && ((!(::q[1] == ::q[3]) && ((::q[1] + 1) != (::q[3] + 3))) && ((::q[1] + 3) != (::q[3] + 1)))) && ((!(::q[1] == ::q[4]) && ((::q[1] + 1) != (::q[4] + 4))) && ((::q[1] + 4) != (::q[4] + 1)))) && ((!(::q[1] == ::q[5]) && ((::q[1] + 1) != (::q[5] + 5))) && ((::q[1] + 5) != (::q[5] + 1)))) && ((!(::q[1] == ::q[6]) && ((::q[1] + 1) != (::q[6] + 6))) && ((::q[1] + 6) != (::q[6] + 1)))) && ((!(::q[1] == ::q[7]) && ((::q[1] + 1) != (::q[7] + 7))) && ((::q[1] + 7) != (::q[7] + 1)))) && ((!(::q[2] == ::q[3]) && ((::q[2] + 2) != (::q[3] + 3))) && ((::q[2] + 3) != (::q[3] + 2)))) && ((!(::q[2] == ::q[4]) && ((::q[2] + 2) != (::q[4] + 4))) && ((::q[2] + 4) != (::q[4] + 2)))) && ((!(::q[2] == ::q[5]) && ((::q[2] + 2) != (::q[5] + 5))) && ((::q[2] + 5) != (::q[5] + 2)))) && ((!(::q[2] == ::q[6]) && ((::q[2] + 2) != (::q[6] + 6))) && ((::q[2] + 6) != (::q[6] + 2)))) && ((!(::q[2] == ::q[7]) && ((::q[2] + 2) != (::q[7] + 7))) && ((::q[2] + 7) != (::q[7] + 2)))) && ((!(::q[3] == ::q[4]) && ((::q[3] + 3) != (::q[4] + 4))) && ((::q[3] + 4) != (::q[4] + 3)))) && ((!(::q[3] == ::q[5]) && ((::q[3] + 3) != (::q[5] + 5))) && ((::q[3] + 5) != (::q[5] + 3)))) && ((!(::q[3] == ::q[6]) && ((::q[3] + 3) != (::q[6] + 6))) && ((::q[3] + 6) != (::q[6] + 3)))) && ((!(::q[3] == ::q[7]) && ((::q[3] + 3) != (::q[7] + 7))) && ((::q[3] + 7) != (::q[7] + 3)))) && ((!(::q[4] == ::q[5]) && ((::q[4] + 4) != (::q[5] + 5))) && ((::q[4] + 5) != (::q[5] + 4)))) && ((!(::q[4] == ::q[6]) && ((::q[4] + 4) != (::q[6] + 6))) && ((::q[4] + 6) != (::q[6] + 4)))) && ((!(::q[4] == ::q[7]) && ((::q[4] + 4) != (::q[7] + 7))) && ((::q[4] + 7) != (::q[7] + 4)))) && ((!(::q[5] == ::q[6]) && ((::q[5] + 5) != (::q[6] + 6))) && ((::q[5] + 6) != (::q[6] + 5)))) && ((!(::q[5] == ::q[7]) && ((::q[5] + 5) != (::q[7] + 7))) && ((::q[5] + 7) != (::q[7] + 5)))) && ((!(::q[6] == ::q[7]) && ((::q[6] + 6) != (::q[7] + 7))) && ((::q[6] + 7) != (::q[7] + 6))));
// solve satisfy;
// >>>

// solution <<<
// ::q[0] 4
// ::q[1] 6
// ::q[2] 1
// ::q[3] 5
// ::q[4] 2
// ::q[5] 0
// ::q[6] 3
// ::q[7] 7
// >>>

// n-Queens problem:: Place n queens on an nxn chessboard so that none can attack another.

// Queen in column i is in row q[i]
let q: int[8];

// Rows must be in 1..n
constraint forall i in 0..7 {
    q[i] >= 0 && q[i] <= 7
};

constraint forall i in 0..7, j in 0..7 where i < j {
    // Distinct rows
    !(q[i] == q[j]) &&

    // Distinct diagonals
    q[i] + i != q[j] + j &&
    q[i] + j != q[j] + i // Avoiding subtraction here because the VM complains.
};

solve satisfy;
