// <validate>

// db <<<
// 0x000000000000000E000000000000000E000000000000000E000000000000000E 42
// 0x000000000000000E000000000000000E000000000000000E000000000000000F 43
// 0x000000000000000E000000000000000E000000000000000E000000000000000A 44
// >>>

// solution <<<
// ::w 141
// ::u 129
// ::v 1936
// ::e_old 69
// ::e_new 70
// ::a[0] 0
// ::a[1] 1
// ::a[2] 4
// ::a[3] 9
// ::a[4] 16
// 0x000000000000000E000000000000000E000000000000000E000000000000000E 43
// 0x000000000000000E000000000000000E000000000000000E000000000000000F 47
// 0x000000000000000E000000000000000E000000000000000E000000000000000A 44
// 0x44e1aa05940f0a9c02572fcffc641fa7b3a8f036f07c5b87f17d276e0957cf89 0x0000000000000000000000000000000000000000000000000000000000000001 70 
// >>>

state x: int = storage::get(0x000000000000000E000000000000000E000000000000000E000000000000000E); // 42
state y: int = storage::get(0x000000000000000E000000000000000E000000000000000E000000000000000F); // 43
state z: int = storage::get(0x000000000000000E000000000000000E000000000000000E000000000000000A); // 44
state external: int = storage::get_extern(
    0x44e1aa05940f0a9c02572fcffc641fa7b3a8f036f07c5b87f17d276e0957cf89,
    0x0000000000000000000000000000000000000000000000000000000000000001,
); // 69
let e_old = external;
let e_new = external';

let w: int = x + 99; // 141
let u: int = y * 3;  // 129
let v: int = z * z;  // 1936
let a: int[5];

constraint forall i in 0..4 {
    a[i] == i*i
};
constraint x' - x == 1; // x' == 43
constraint y' == y + 4; // y' == 47
constraint x' + y' > 89 && x' * y' > 1932; 
constraint x < y;
constraint w + u + v == 2206;
constraint external' - external == 1;

solve satisfy;
