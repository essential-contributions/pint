let a_ary: int[5];
let b_ary = [11, 22, 33, 44];

macro @sum($x, &rest) {
    @sum($x + &rest)
}

macro @sum($x) {
    $x
}

// Sum both arrays.
let s_a = @sum(~a_ary);
let s_b = @sum(~b_ary);

// Sum both arrays together with some immediates.
let s_ab = @sum(~a_ary + 55; 66 + ~b_ary);

macro @less_than($min, $next, &others) {
    constraint $min < $next;
    @less_than($min; &others);
}

macro @less_than($min, $other) {
    constraint $min < $other;
}

// Call less_than() with an explicit min or by using the first element as the min.
let lt_a: int;
@less_than(lt_a; ~a_ary);
@less_than(~b_ary);

solve satisfy;

// intermediate <<<
// var ::a_ary: int[5];
// var ::b_ary;
// var ::s_a;
// var ::s_b;
// var ::s_ab;
// var ::lt_a: int;
// constraint (::b_ary == [11, 22, 33, 44]);
// constraint (::s_a == ((((::a_ary[0] + ::a_ary[1]) + ::a_ary[2]) + ::a_ary[3]) + ::a_ary[4]));
// constraint (::s_b == (((::b_ary[0] + ::b_ary[1]) + ::b_ary[2]) + ::b_ary[3]));
// constraint (::s_ab == ((((((((((::a_ary[0] + ::a_ary[1]) + ::a_ary[2]) + ::a_ary[3]) + ::a_ary[4]) + 55) + 66) + ::b_ary[0]) + ::b_ary[1]) + ::b_ary[2]) + ::b_ary[3]));
// constraint (::lt_a < ::a_ary[0]);
// constraint (::b_ary[0] < ::b_ary[1]);
// constraint (::lt_a < ::a_ary[1]);
// constraint (::b_ary[0] < ::b_ary[2]);
// constraint (::lt_a < ::a_ary[2]);
// constraint (::b_ary[0] < ::b_ary[3]);
// constraint (::lt_a < ::a_ary[3]);
// constraint (::lt_a < ::a_ary[4]);
// solve satisfy;
// >>>

// flattened <<<
// var ::b_ary[0]: int;
// var ::s_a: int;
// var ::s_b: int;
// var ::s_ab: int;
// var ::lt_a: int;
// var ::a_ary[0]: int;
// var ::a_ary[1]: int;
// var ::a_ary[2]: int;
// var ::a_ary[3]: int;
// var ::a_ary[4]: int;
// var ::b_ary[1]: int;
// var ::b_ary[2]: int;
// var ::b_ary[3]: int;
// constraint ((((::b_ary[0] == 11) && (::b_ary[1] == 22)) && (::b_ary[2] == 33)) && (::b_ary[3] == 44));
// constraint (::s_a == ((((::a_ary[0] + ::a_ary[1]) + ::a_ary[2]) + ::a_ary[3]) + ::a_ary[4]));
// constraint (::s_b == (((::b_ary[0] + ::b_ary[1]) + ::b_ary[2]) + ::b_ary[3]));
// constraint (::s_ab == ((((((((((::a_ary[0] + ::a_ary[1]) + ::a_ary[2]) + ::a_ary[3]) + ::a_ary[4]) + 55) + 66) + ::b_ary[0]) + ::b_ary[1]) + ::b_ary[2]) + ::b_ary[3]));
// constraint (::lt_a < ::a_ary[0]);
// constraint (::b_ary[0] < ::b_ary[1]);
// constraint (::lt_a < ::a_ary[1]);
// constraint (::b_ary[0] < ::b_ary[2]);
// constraint (::lt_a < ::a_ary[2]);
// constraint (::b_ary[0] < ::b_ary[3]);
// constraint (::lt_a < ::a_ary[3]);
// constraint (::lt_a < ::a_ary[4]);
// solve satisfy;
// >>>
