// <no-solve>

macro @chain($a, &rest) {
    let $a: int;
    @chain_next($a; &rest)
}

macro @chain_next($prev, $next, &rest) {
    let $next: int;
    constraint $next > $prev + 10;
    @chain_next($next; &rest)
}

macro @chain_next($prev, $last) {
    let $last: int;
    constraint $last > $prev + 10;
    $last
}

@chain(x; y; z);

solve satisfy;

// intermediate <<<
// var ::x: int;
// var ::y: int;
// var ::z: int;
// constraint (::y > (::x + 10));
// constraint (::z > (::y + 10));
// solve satisfy;
// >>>

// flattened <<<
// var ::x: int;
// var ::y: int;
// var ::z: int;
// constraint (::y > (::x + 10));
// constraint (::z > (::y + 10));
// solve satisfy;
// >>>
