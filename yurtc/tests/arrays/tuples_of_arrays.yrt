let a = {11, [22, 33, 44], 55};
let b = {true, {false, [true, true], false}, [false, false]};

solve satisfy;

// intermediate <<<
// var ::a;
// var ::b;
// constraint (::a == {11, [22, 33, 44], 55});
// constraint (::b == {true, {false, [true, true], false}, [false, false]});
// solve satisfy;
// >>>

// flattened <<<
// var ::a.1[2]: int;
// var ::a.1[1]: int;
// var ::a.0: int;
// var ::b.2[0]: int;
// var ::a.2: int;
// var ::b.0: int;
// var ::a.1[0]: int;
// var ::b.1.1[0]: int;
// var ::b.1.0: int;
// var ::b.1.2: int;
// var ::b.2[1]: int;
// var ::b.1.1[1]: int;
// constraint (((::a.0 == {11, [22, 33, 44], 55}.0) && (((::a.1[0] == {11, [22, 33, 44], 55}.1[0]) && (::a.1[1] == {11, [22, 33, 44], 55}.1[1])) && (::a.1[2] == {11, [22, 33, 44], 55}.1[2]))) && (::a.2 == {11, [22, 33, 44], 55}.2));
// constraint (((::b.0 == {1, {0, [1, 1], 0}, [0, 0]}.0) && (((::b.1.0 == {1, {0, [1, 1], 0}, [0, 0]}.1.0) && ((::b.1.1[0] == {1, {0, [1, 1], 0}, [0, 0]}.1.1[0]) && (::b.1.1[1] == {1, {0, [1, 1], 0}, [0, 0]}.1.1[1]))) && (::b.1.2 == {1, {0, [1, 1], 0}, [0, 0]}.1.2))) && ((::b.2[0] == {1, {0, [1, 1], 0}, [0, 0]}.2[0]) && (::b.2[1] == {1, {0, [1, 1], 0}, [0, 0]}.2[1])));
// solve satisfy;
// >>>
