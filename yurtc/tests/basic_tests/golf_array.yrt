// Generate a random 18-hole golf course.

let h: int[18];

constraint h[0] in 3..5;
constraint h[1] in 3..5;
constraint h[2] in 3..5;
constraint h[3] in 3..5;
constraint h[4] in 3..5;
constraint h[5] in 3..5;
constraint h[6] in 3..5;
constraint h[7] in 3..5;
constraint h[8] in 3..5;
constraint h[9] in 3..5;
constraint h[10] in 3..5;
constraint h[11] in 3..5;
constraint h[12] in 3..5;
constraint h[13] in 3..5;
constraint h[14] in 3..5;
constraint h[15] in 3..5;
constraint h[16] in 3..5;
constraint h[17] in 3..5;

let sum: int = h[0] + h[1] + h[2] + h[3] + h[4] + h[5] + h[6]
             + h[7] + h[8] + h[9] + h[10] + h[11] + h[12] + h[13]
             + h[14] + h[15] + h[16] + h[17];

constraint sum == 72;

solve satisfy;


// intermediate <<<<
// var ::h: int[18];
// var ::sum: int;
// constraint ::h[0] in 3..5;
// constraint ::h[1] in 3..5;
// constraint ::h[2] in 3..5;
// constraint ::h[3] in 3..5;
// constraint ::h[4] in 3..5;
// constraint ::h[5] in 3..5;
// constraint ::h[6] in 3..5;
// constraint ::h[7] in 3..5;
// constraint ::h[8] in 3..5;
// constraint ::h[9] in 3..5;
// constraint ::h[10] in 3..5;
// constraint ::h[11] in 3..5;
// constraint ::h[12] in 3..5;
// constraint ::h[13] in 3..5;
// constraint ::h[14] in 3..5;
// constraint ::h[15] in 3..5;
// constraint ::h[16] in 3..5;
// constraint ::h[17] in 3..5;
// constraint (::sum == (((((((((((((((((::h[0] + ::h[1]) + ::h[2]) + ::h[3]) + ::h[4]) + ::h[5]) + ::h[6]) + ::h[7]) + ::h[8]) + ::h[9]) + ::h[10]) + ::h[11]) + ::h[12]) + ::h[13]) + ::h[14]) + ::h[15]) + ::h[16]) + ::h[17]));
// constraint (::sum == 72);
// solve satisfy;
// >>>

// We'll get this error until we implement array destructuring.
// compile_failure <<<
// compiler internal error: Found unsupported types in final Intent.
// >>>
