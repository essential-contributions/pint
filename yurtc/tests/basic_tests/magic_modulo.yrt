// Magic Modulo Number.
// 
// A number with an interesting property:
// 
// When I divide it by  2, the remainder is 1.
// When I divide it by  3, the remainder is 2.
// When I divide it by  4, the remainder is 3.
// When I divide it by  5, the remainder is 4.
// When I divide it by  6, the remainder is 5.
// When I divide it by  7, the remainder is 6.
// When I divide it by  8, the remainder is 7.
// When I divide it by  9, the remainder is 8.
// When I divide it by 10, the remainder is 9.
 
let x: int;

constraint x % 2 == 1;
constraint x % 3 == 2;
constraint x % 4 == 3;
constraint x % 5 == 4;
constraint x % 6 == 5;
constraint x % 7 == 6;
constraint x % 8 == 7;
constraint x % 9 == 8;
constraint x % 10 == 9;

solve satisfy;

// intermediate <<<<
// var ::x: int;
// constraint ((::x % 2) == 1);
// constraint ((::x % 3) == 2);
// constraint ((::x % 4) == 3);
// constraint ((::x % 5) == 4);
// constraint ((::x % 6) == 5);
// constraint ((::x % 7) == 6);
// constraint ((::x % 8) == 7);
// constraint ((::x % 9) == 8);
// constraint ((::x % 10) == 9);
// solve satisfy;
// >>>

// solution <<<
// ::x: 2519
// >>>
