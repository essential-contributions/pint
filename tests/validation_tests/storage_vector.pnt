// <enabled>
// db <<<
// 2, 3
// 2 0, 13
// 2 1, 14
// 2 2, 15
// 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE, 2, 3
// 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE, 2 0, 13
// 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE, 2 1, 14
// 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE, 2 2, 15
// >>>

storage {
    x: int,
    v0: int[],
}

predicate Bar() {
    let v = storage::v0!;
    constraint v[0] == 1;

    // v0 starts empty
//    let v0_0 = mut storage::v0[0];
//    let v0_1 = mut storage::v0[1];
//    let v0_2 = mut storage::v0[2];

//    let length = __len(mut storage::v0!);

    // let foo: int[] = storage::v0!;

//    constraint length' == 3;

//    constraint v0_len == 0;
//    constraint v0_len' == 3;
//    constraint v0_0'! == 42;
//    constraint v0_1'! == 43;
//    constraint v0_2'! == 44;

}
