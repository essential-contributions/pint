// db <<<
// 0, 42
// 1, 43
// 3, 1 1 1 1
// 6 0, 9
// >>>

storage {
    x: int,
    y: int,
    z: int,
    w: b256,
    t: { b256, int },
    a: int[2][3],
    t2: { int, int, { int, int } },
}

// Constraint set with address `0x0000000000000000000000000000000000000000000000000000000000000000`
predicate Foo() {
    let x = mut storage::x;
    let y = mut storage::y;
    let z = mut storage::z;
    let w = mut storage::w;
    let t = mut storage::t;
    let a = mut storage::a;
    let t2 = mut storage::t2;

    // `x` is set in the pre let db and in the solution
    constraint x != nil;
    constraint nil != x';
    constraint storage::x != nil;
    constraint nil != storage::x';

    // `y` is set in the pre let db and in the solution
    constraint nil != y;
    constraint y' != nil;
    constraint nil != storage::y;
    constraint storage::y' != nil;

    // `z` is not set in the pre let db but is set in the solution
    constraint z == nil;
    constraint z' != val(1);
    constraint storage::z == nil;
    constraint storage::z' != val(1);

    // `w` is set in the pre let db but unset in the solution
    constraint w != nil;
    constraint nil == w';
    constraint storage::w != nil;
    constraint nil == storage::w';

    // `t` is not set in the pre let db but is set in the solution
    constraint t == nil;
    constraint t' != nil;
    constraint storage::t == nil;
    constraint storage::t' != nil;

    // `a` is not set in the pre let db and is partially set in the solution.
    constraint a == nil;
    constraint a' != nil;
    constraint storage::a == nil;
    constraint storage::a' != nil;

    // `t2` is partially set in the pre let db and is set to nil in the solution.
    constraint t2 != nil;
    constraint t2' == nil;
    constraint storage::t2 != nil;
    constraint storage::t2' == nil;
}
