storage {
    u: { b256, int },
    t: { b256, { int, int } },
    w: { addr: b256, inner: { x: int, int } },
    map_to_tuples: ( int => { b256, { int, int } } ),
}

interface Foo {
    storage {
        u: { b256, int },
        t: { b256, { int, int } },
        w: { addr: b256, inner: { x: int, int } },
        map_to_tuples: ( int => { b256, { int, int } } ),
    }
}

predicate Bar() {
    let addr = 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE;

    let w = storage::w;
    let w0 = mut storage::w.addr;
    let w10 = mut storage::w.inner.x;
    let w11 = mut storage::w.inner.1;

    let foo_w = Foo@[addr]::storage::w;
    let foo_w0 = Foo@[addr]::storage::w.addr;
    let foo_w10 = Foo@[addr]::storage::w.inner.x;
    let foo_w11 = Foo@[addr]::storage::w.inner.1;

    let map_to_tuples_69 = storage::map_to_tuples[69];
    let map_to_tuples_69_0 =  mut storage::map_to_tuples[69].0;
    let map_to_tuples_69_1_0 = mut storage::map_to_tuples[69].1.0;
    let map_to_tuples_69_1_1 = mut storage::map_to_tuples[69].1.1;

    let foo_map_to_tuples_69 = Foo@[addr]::storage::map_to_tuples[69];
    let foo_map_to_tuples_69_0 = Foo@[addr]::storage::map_to_tuples[69].0;
    let foo_map_to_tuples_69_1_0 = Foo@[addr]::storage::map_to_tuples[69].1.0;
    let foo_map_to_tuples_69_1_1 = Foo@[addr]::storage::map_to_tuples[69].1.1;

    constraint w' == {0x0000000000000009000000000000000900000000000000090000000000000009, {2, 3}};
    constraint (w').0 == 0x0000000000000009000000000000000900000000000000090000000000000009;
    constraint (w').1.0 == 2;
    constraint (w').1.1 == 3;
    constraint w0' == 0x0000000000000009000000000000000900000000000000090000000000000009;
    constraint w10' == 2;
    constraint w11' == 3;

    constraint foo_w' == {0x0000000000000008000000000000000800000000000000080000000000000008, {4, 5}};
    constraint (foo_w').0 == 0x0000000000000008000000000000000800000000000000080000000000000008;
    constraint (foo_w').1.0 == 4;
    constraint (foo_w').1.1 == 5;
    constraint foo_w0' == 0x0000000000000008000000000000000800000000000000080000000000000008;
    constraint foo_w10' == 4;
    constraint foo_w11' == 5;

    constraint map_to_tuples_69' == {0x0000000000000005000000000000000500000000000000050000000000000005, {12345, 54321}};
    constraint (map_to_tuples_69').0 == 0x0000000000000005000000000000000500000000000000050000000000000005;
    constraint (map_to_tuples_69').1.0 == 12345;
    constraint (map_to_tuples_69').1.1 == 54321;
    constraint map_to_tuples_69_0' == 0x0000000000000005000000000000000500000000000000050000000000000005;
    constraint map_to_tuples_69_1_0' == 12345;
    constraint map_to_tuples_69_1_1' == 54321;

    constraint foo_map_to_tuples_69' == {0x0000000000000004000000000000000400000000000000040000000000000004, {2345, 5432}};
    constraint (foo_map_to_tuples_69').0 == 0x0000000000000004000000000000000400000000000000040000000000000004;
    constraint (foo_map_to_tuples_69').1.0 == 2345;
    constraint (foo_map_to_tuples_69').1.1 == 5432;
    constraint foo_map_to_tuples_69_0' == 0x0000000000000004000000000000000400000000000000040000000000000004;
    constraint foo_map_to_tuples_69_1_0' == 2345;
    constraint foo_map_to_tuples_69_1_1' == 5432;
}
