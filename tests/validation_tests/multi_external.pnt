// db <<<
// 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE, 0, 42
// 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE, 1, 69
// 0xDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD, 0, 99
// 0xDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD, 1, 166
// >>>

// from external1.pnt
interface Bar {
    storage {
        x: int,
        y: int
    }
}

// from external0.pnt
interface Baz {
    storage {
        w: int,
        z: int
    }
}

predicate Foo {
    interface BarInstance = Bar(0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE);
    interface BazInstance = Baz(0xDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD);

    state x = BarInstance::storage::x;
    state y = BarInstance::storage::y;
    state w = BazInstance::storage::w;
    state z = BazInstance::storage::z;

    constraint x' - x == 1;
    constraint y' - y == 2;
    constraint w' - w == 3;
    constraint z' - z == 4;
}
