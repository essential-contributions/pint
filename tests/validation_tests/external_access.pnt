// db <<<
// 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE, 0, 1 1 1 1
// 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE, 1, 2 3 4 5
// 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE, 2 69, 9 9 9 9
// 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE, 3 9 1 2 3 4, 42
// 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE, 4 88 8 7 6 5 999, 15 15 15 15
// >>>

interface Bar {
    storage {
        address: b256,
        address2: b256,
        map: (int => b256),
        map_in_map: (int => (b256 => int)),
        map_in_map_in_map: (int => (b256 => (int => b256))),
    }
}

predicate Foo() {
    state addr = 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE;

    state address = Bar[[addr]]::storage::address;
    state address2 = Bar[[addr]]::storage::address2;
    state map_entry = Bar[[addr]]::storage::map[69];
    state map_in_map_entry = Bar[[addr]]::storage::map_in_map[9][0x0000000000000001000000000000000200000000000000030000000000000004];
    state map_in_map_in_map_entry = Bar[[addr]]::storage::map_in_map_in_map[88][0x0000000000000008000000000000000700000000000000060000000000000005][999];

    constraint address == 0x0000000000000001000000000000000100000000000000010000000000000001;
    constraint address2 == 0x0000000000000002000000000000000300000000000000040000000000000005;
    constraint map_entry == 0x0000000000000009000000000000000900000000000000090000000000000009;
    constraint map_in_map_entry == 42;
    constraint map_in_map_in_map_entry == 0x000000000000000F000000000000000F000000000000000F000000000000000F;

    constraint address' == 0x0000000000000011000000000000001100000000000000110000000000000011;
    constraint address2' == 0x0000000000000022000000000000003300000000000000440000000000000055;
    constraint map_entry' == 0x0000000000000099000000000000009900000000000000990000000000000099;
    constraint map_in_map_entry' - map_in_map_entry == 1;
    constraint map_in_map_in_map_entry' == 0x00000000000000FF00000000000000FF00000000000000FF00000000000000FF;
}
