// db <<<
// 0, 1
// 3 69, 98
// 4 0, 5
// 4 1, 6
// 4 2, 7
// >>>
storage {
    counter: int,
    addr: b256,
    t: { int, { int, int } },
    m: ( int => int ),
    arr: int[3],
}

predicate foo(x: { int, { int, int } }) {
    constraint storage::counter := storage::counter! + 1;
    constraint storage::addr := 0x0000000000000001000000000000000200000000000000030000000000000004;
    constraint storage::t := { 42, { 69, 99 } };
    constraint storage::t.0 := 42;
    constraint storage::t.1.0 := 69;
    constraint storage::t.1.1 := 99;
    constraint storage::t.1.1 := 99;

    constraint x.0 == 1;
    constraint x.1.0 == 2;
    constraint x.1.1 == 3;
    constraint x == { 1, { 2, 3 } };

    constraint storage::counter! == 1;
    constraint storage::counter := 2;

    // constraint mut storage::m[42]'! == storage::m[42]! + 1;
    constraint storage::m[69] := storage::m[69]! + 1;

    constraint storage::arr! == [5, 6, 7];
    constraint storage::arr[0]! == 5;
    constraint storage::arr[1]! == 6;
    constraint storage::arr[2]! == 7;
    constraint storage::arr[0] := storage::arr[0]! * 11;
}
