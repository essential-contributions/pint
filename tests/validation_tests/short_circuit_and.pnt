storage {
    x: int,
}

predicate Test(
    a1: bool, 
    b1: bool,
    a2: bool, 
    b2: bool,
    a3: bool, 
    b3: bool,
    a4: bool, 
    b4: bool,
){
    constraint (false && false) == false;
    constraint (false && true) == false;
    constraint (true && false) == false;
    constraint (true && true) == true;

    constraint a1 == false;
    constraint b1 == false;
    constraint (a1 && b1) == false;

    constraint a2 == false;
    constraint b2 == true;
    constraint (a2 && b2) == false;

    constraint a3 == true;
    constraint b3 == false;
    constraint (a3 && b3) == false;

    constraint a4 == true;
    constraint b4 == true;
    constraint (a4 && b4) == true;

    constraint (a1 && b1 && a2 && b3) == false;
    constraint (a1 && b1 && a2 && b4) == false;
    constraint (b2 && a3 && a4 && b4) == true;

    constraint ((1 + 2 != 3) && (3 + 4 != 7)) == false;
    constraint ((1 + 2 != 3) && (3 + 4 == 7)) == false;
    constraint ((1 + 2 == 3) && (3 + 4 != 7)) == false;
    constraint ((1 + 2 == 3) && (3 + 4 == 7)) == true;

    state x = storage::x;

    // `x` here is `nil` because it's not set in the pre state db, so comparing it to 42 should panic.
    // However, the constraint should still pass due to the short-circuit
    constraint (false && (x == 42)) == false;
}
