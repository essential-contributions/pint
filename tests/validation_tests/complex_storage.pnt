storage {
    address: b256,
    address2: b256,
    imap: (int => b256),
    map_in_map: (int => (b256 => int)),
    map_in_map_in_map: (int => (b256 => (int => b256))),
}

const A = 0x0000000000000001000000000000000200000000000000030000000000000004;
const B = 0x0000000000000008000000000000000700000000000000060000000000000005;
const C = 0x0000000000000001000000000000000100000000000000010000000000000001;
const D = 0x0000000000000002000000000000000300000000000000040000000000000005;
const E = 0x0000000000000009000000000000000900000000000000090000000000000009;
const F = 0x000000000000000F000000000000000F000000000000000F000000000000000F;

predicate Foo() {
    let kv1 = storage::address := C;                      
    let kv2 = storage::address2 := D;                     
    let kv3 = storage::imap[69] := E;                     
    let kv4 = storage::map_in_map[9][A] := 42;            
    let kv5 = storage::map_in_map_in_map[88][B][999] := F;

    constraint kv1;
    constraint kv2;
    constraint kv3;
    constraint kv4;
    constraint kv5;

    constraint storage::address := C; 
    constraint storage::address2 := D;
    constraint storage::imap[69] := E;
    constraint storage::map_in_map[9][A] := 42;
    constraint storage::map_in_map_in_map[88][B][999] := F;

    let address = storage::address!;
    let address2 = storage::address2!;
    let map_entry = storage::imap[69]!;
    let map_in_map_entry = storage::map_in_map[9][A]!;
    let map_in_map_in_map_entry = storage::map_in_map_in_map[88][B][999]!;

    constraint address' == C;
    constraint address2' == D;
    constraint map_entry' == E;
    constraint map_in_map_entry' == 42;
    constraint map_in_map_in_map_entry' == F;

    constraint storage::address'! == C; 
    constraint storage::address2'! == D;
    constraint storage::imap'[69]! == E;
    constraint storage::imap[69]'! == E;
    constraint storage::map_in_map'[9][A]! == 42;
    constraint storage::map_in_map[9][A]'! == 42;
    constraint storage::map_in_map_in_map'[88][B][999]! == F;
    constraint storage::map_in_map_in_map[88][B][999]'! == F;
}
