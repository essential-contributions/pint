storage {
    t: { (int => int), int },
    u: { (int => int), { (bool => int), int } },
    v: (int => { int, (int => { int, int }) }),
}

predicate Test() {
    let t = mut storage::t.0[0];
    constraint t' == 1;
    
    let u = mut storage::u.1.0[false];
    constraint u' == 3;

    let v_0_0 = mut storage::v[6].1[2].0;
    constraint v_0_0' == 12;
    let v_0_1 = mut storage::v[6].1[2].1;
    constraint v_0_1' == 13;
}