union U = A(int) | B(b256);

union V = C({ int, int }) | D(int[2][3]);

storage {
    u0: U,
    u1: U,
    m: (int => { U, int }),
    v0: V, 
    v1: V, 
}

predicate Foo() {
    let kv0 = storage::u0 := U::A(5);
    let kv1 =  storage::u1 := U::B(0x0000000000000002000000000000000200000000000000020000000000000002);
    let kv2 = storage::m[5] := { U::A(3), 69 };
    let kv3 = storage::v0 := V::C({10, 12});
    let kv4 = storage::v1 := V::D([[1, 2], [3, 4], [5, 6]]);

    constraint kv0;
    constraint kv1;
    constraint kv2;
    constraint kv3;
    constraint kv4;

    constraint storage::u0 := U::A(5);
    constraint storage::u1 := U::B(0x0000000000000002000000000000000200000000000000020000000000000002);
    constraint storage::m[5] := { U::A(3), 69 };
    constraint storage::v0 := V::C({10, 12});
    constraint storage::v1 := V::D([[1, 2], [3, 4], [5, 6]]);

    let u0 = storage::u0';
    let u1 = storage::u1';
    let m = storage::m[5]';
    let v0 = storage::v0';
    let v1 = storage::v1';

    constraint u0! == U::A(5);
    constraint u1! == U::B(0x0000000000000002000000000000000200000000000000020000000000000002);
    constraint m! == { U::A(3), 69 };
    constraint v0! == V::C({10, 12});
    constraint v1! == V::D([[1, 2], [3, 4], [5, 6]]);

    constraint storage::u0'! == U::A(5);
    constraint storage::u1'! == U::B(0x0000000000000002000000000000000200000000000000020000000000000002);
    constraint storage::m[5]'! == { U::A(3), 69 };
    constraint storage::v0'! == V::C({10, 12});
    constraint storage::v1'! == V::D([[1, 2], [3, 4], [5, 6]]);
}
