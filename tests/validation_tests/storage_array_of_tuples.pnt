storage {
    x: int,
    y: b256,
    a: { int, { int, b256 } }[2][3],
}

interface Foo {
    storage {
        x: int,
        y: b256,
        z: b256,
        a: { int, { int, b256 } }[2][3],
    }
}


predicate Bar() {
    let a = mut storage::a;

    let addr = 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE;

    constraint (a')[0][0].0 == 1;
    constraint (a')[0][0].1.0 == 1;
    constraint (a')[0][0].1.1 == 0x0000000000000001000000000000000100000000000000010000000000000001;
    constraint (a')[0][1].0 == 2;
    constraint (a')[0][1].1.0 == 2;
    constraint (a')[0][1].1.1 == 0x0000000000000002000000000000000200000000000000020000000000000002;
    constraint (a')[0][2].0 == 3;
    constraint (a')[0][2].1.0 == 3;
    constraint (a')[0][2].1.1 == 0x0000000000000003000000000000000300000000000000030000000000000003;
    constraint (a')[1][0].0 == 4;
    constraint (a')[1][0].1.0 == 4;
    constraint (a')[1][0].1.1 == 0x0000000000000004000000000000000400000000000000040000000000000004;
    constraint (a')[1][1].0 == 5;
    constraint (a')[1][1].1.0 == 5;
    constraint (a')[1][1].1.1 == 0x0000000000000005000000000000000500000000000000050000000000000005;
    constraint (a')[1][2].0 == 6;
    constraint (a')[1][2].1.0 == 6;
    constraint (a')[1][2].1.1 == 0x0000000000000006000000000000000600000000000000060000000000000006;

    constraint a' == [
        [
            { 1, { 1, 0x0000000000000001000000000000000100000000000000010000000000000001 } },
            { 2, { 2, 0x0000000000000002000000000000000200000000000000020000000000000002 } },
            { 3, { 3, 0x0000000000000003000000000000000300000000000000030000000000000003 } },
        ],           
        [            
            { 4, { 4, 0x0000000000000004000000000000000400000000000000040000000000000004 } },
            { 5, { 5, 0x0000000000000005000000000000000500000000000000050000000000000005 } },
            { 6, { 6, 0x0000000000000006000000000000000600000000000000060000000000000006 } },
        ],
    ];

    let a_1_2_0 = mut storage::a[1][2].0;
    let a_1_2_1_0 = mut storage::a[1][2].1.0;
    let a_1_2_1_1 = mut storage::a[1][2].1.1;
    constraint a_1_2_0' == 6;
    constraint a_1_2_1_0' == 6;
    constraint a_1_2_1_1' == 0x0000000000000006000000000000000600000000000000060000000000000006;

    let a_1_2 = mut storage::a[1][2];
    constraint a_1_2' == { 6, { 6, 0x0000000000000006000000000000000600000000000000060000000000000006
    }};

    constraint storage::a[0][0].0' == 1;
    constraint storage::a[0][0].1.0' == 1;
    constraint storage::a[0][0].1.1' == 0x0000000000000001000000000000000100000000000000010000000000000001;
    constraint storage::a[0][1].0' == 2;
    constraint storage::a[0][1].1.0' == 2;
    constraint storage::a[0][1].1.1' == 0x0000000000000002000000000000000200000000000000020000000000000002;
    constraint storage::a[0][2].0' == 3;
    constraint storage::a[0][2].1.0' == 3;
    constraint storage::a[0][2].1.1' == 0x0000000000000003000000000000000300000000000000030000000000000003;
    constraint storage::a[1][0].0' == 4;
    constraint storage::a[1][0].1.0' == 4;
    constraint storage::a[1][0].1.1' == 0x0000000000000004000000000000000400000000000000040000000000000004;
    constraint storage::a[1][1].0' == 5;
    constraint storage::a[1][1].1.0' == 5;
    constraint storage::a[1][1].1.1' == 0x0000000000000005000000000000000500000000000000050000000000000005;
    constraint storage::a[1][2].0' == 6;
    constraint storage::a[1][2].1.0' == 6;
    constraint storage::a[1][2].1.1' == 0x0000000000000006000000000000000600000000000000060000000000000006;

    constraint storage::a' == [
        [
            { 1, { 1, 0x0000000000000001000000000000000100000000000000010000000000000001 } },
            { 2, { 2, 0x0000000000000002000000000000000200000000000000020000000000000002 } },
            { 3, { 3, 0x0000000000000003000000000000000300000000000000030000000000000003 } },
        ],           
        [            
            { 4, { 4, 0x0000000000000004000000000000000400000000000000040000000000000004 } },
            { 5, { 5, 0x0000000000000005000000000000000500000000000000050000000000000005 } },
            { 6, { 6, 0x0000000000000006000000000000000600000000000000060000000000000006 } },
        ],
    ];

    let foo_a = Foo@[addr]::storage::a;

    constraint (foo_a')[0][0].0 == 1;
    constraint (foo_a')[0][0].1.0 == 1;
    constraint (foo_a')[0][0].1.1 == 0x0000000000000001000000000000000100000000000000010000000000000001;
    constraint (foo_a')[0][1].0 == 2;
    constraint (foo_a')[0][1].1.0 == 2;
    constraint (foo_a')[0][1].1.1 == 0x0000000000000002000000000000000200000000000000020000000000000002;
    constraint (foo_a')[0][2].0 == 3;
    constraint (foo_a')[0][2].1.0 == 3;
    constraint (foo_a')[0][2].1.1 == 0x0000000000000003000000000000000300000000000000030000000000000003;
    constraint (foo_a')[1][0].0 == 4;
    constraint (foo_a')[1][0].1.0 == 4;
    constraint (foo_a')[1][0].1.1 == 0x0000000000000004000000000000000400000000000000040000000000000004;
    constraint (foo_a')[1][1].0 == 5;
    constraint (foo_a')[1][1].1.0 == 5;
    constraint (foo_a')[1][1].1.1 == 0x0000000000000005000000000000000500000000000000050000000000000005;
    constraint (foo_a')[1][2].0 == 6;
    constraint (foo_a')[1][2].1.0 == 6;
    constraint (foo_a')[1][2].1.1 == 0x0000000000000006000000000000000600000000000000060000000000000006;

    constraint foo_a' == [
        [
            { 1, { 1, 0x0000000000000001000000000000000100000000000000010000000000000001 } },
            { 2, { 2, 0x0000000000000002000000000000000200000000000000020000000000000002 } },
            { 3, { 3, 0x0000000000000003000000000000000300000000000000030000000000000003 } },
        ],           
        [            
            { 4, { 4, 0x0000000000000004000000000000000400000000000000040000000000000004 } },
            { 5, { 5, 0x0000000000000005000000000000000500000000000000050000000000000005 } },
            { 6, { 6, 0x0000000000000006000000000000000600000000000000060000000000000006 } },
        ],
    ];

    let foo_a_1_2_0 = Foo@[addr]::storage::a[1][2].0;
    let foo_a_1_2_1_0 = Foo@[addr]::storage::a[1][2].1.0;
    let foo_a_1_2_1_1 = Foo@[addr]::storage::a[1][2].1.1;
    constraint foo_a_1_2_0' == 6;
    constraint foo_a_1_2_1_0' == 6;
    constraint foo_a_1_2_1_1' == 0x0000000000000006000000000000000600000000000000060000000000000006;

    let foo_a_1_2 = Foo@[addr]::storage::a[1][2];
    constraint foo_a_1_2' == { 6, { 6, 0x0000000000000006000000000000000600000000000000060000000000000006
    }};

    constraint Foo@[addr]::storage::a[0][0].0' == 1;
    constraint Foo@[addr]::storage::a[0][0].1.0' == 1;
    constraint Foo@[addr]::storage::a[0][0].1.1' == 0x0000000000000001000000000000000100000000000000010000000000000001;
    constraint Foo@[addr]::storage::a[0][1].0' == 2;
    constraint Foo@[addr]::storage::a[0][1].1.0' == 2;
    constraint Foo@[addr]::storage::a[0][1].1.1' == 0x0000000000000002000000000000000200000000000000020000000000000002;
    constraint Foo@[addr]::storage::a[0][2].0' == 3;
    constraint Foo@[addr]::storage::a[0][2].1.0' == 3;
    constraint Foo@[addr]::storage::a[0][2].1.1' == 0x0000000000000003000000000000000300000000000000030000000000000003;
    constraint Foo@[addr]::storage::a[1][0].0' == 4;
    constraint Foo@[addr]::storage::a[1][0].1.0' == 4;
    constraint Foo@[addr]::storage::a[1][0].1.1' == 0x0000000000000004000000000000000400000000000000040000000000000004;
    constraint Foo@[addr]::storage::a[1][1].0' == 5;
    constraint Foo@[addr]::storage::a[1][1].1.0' == 5;
    constraint Foo@[addr]::storage::a[1][1].1.1' == 0x0000000000000005000000000000000500000000000000050000000000000005;
    constraint Foo@[addr]::storage::a[1][2].0' == 6;
    constraint Foo@[addr]::storage::a[1][2].1.0' == 6;
    constraint Foo@[addr]::storage::a[1][2].1.1' == 0x0000000000000006000000000000000600000000000000060000000000000006;

    constraint Foo@[addr]::storage::a' == [
        [
            { 1, { 1, 0x0000000000000001000000000000000100000000000000010000000000000001 } },
            { 2, { 2, 0x0000000000000002000000000000000200000000000000020000000000000002 } },
            { 3, { 3, 0x0000000000000003000000000000000300000000000000030000000000000003 } },
        ],           
        [            
            { 4, { 4, 0x0000000000000004000000000000000400000000000000040000000000000004 } },
            { 5, { 5, 0x0000000000000005000000000000000500000000000000050000000000000005 } },
            { 6, { 6, 0x0000000000000006000000000000000600000000000000060000000000000006 } },
        ],
    ];
}
