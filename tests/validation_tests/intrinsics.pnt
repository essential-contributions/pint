// db <<<
// 0, 42
// 1, 43
// 3, 1 1 1 1
// >>>

storage {
    x: int,
    y: int,
    z: int,
    w: b256,
}

predicate First { 
    var x = 1;
}

predicate Bar { 
    var x = 2;
}

predicate Foo {
    // These addresses can be verified by compiling this contract using the `pint` CLI tool which
    // produces the address of every predicate.
    constraint __address_of("::First") ==
        0x9C765AEC92FC1F9D6F712ED04AFBC00AB67FD549EBA12878610D05C86F549350;
    constraint __address_of("::Bar") ==
        0xCF9B52686DD22EFF2217FD8739AFC47ABFFCC55AC1F0A5745F9EFFF8443CF5CC;

    constraint __predicate_at(1) == {
        0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE,
        0x1111111111111111111111111111111111111111111111111111111111111111,
    };

    constraint __predicate_at(2) == {
        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF,
        0x2222222222222222222222222222222222222222222222222222222222222222,
    };

    var this_pathway: int = __this_pathway();
    constraint this_pathway == 0;

    var sha256_0: b256 = __sha256(0);
    constraint sha256_0 == 0xAF5570F5A1810B7AF78CAF4BC70A660F0DF51E42BAF91D4DE5B2328DE0E83DFC;

    var tuple = { 1, 2, { 0x0000000000000001000000000000000200000000000000030000000000000004, true } };
    var sha256_1: b256 = __sha256(tuple);
    constraint sha256_1 == 0x18D301B2F25338A9008E8EADB74406D01C6BE8F0C51BF782AD926E9F82D28EC3;

    // sign the data usign private key corresponding to the public key below. Plug in the data, the
    // signature, and the public key and make sure that `verify_ed25519` is `true`.
    // These values are tested in Rust in the `essential-base` repo
    var verify_ed25519 = __verify_ed25519
        (
            // data
            [7, 3, 5, 7], 
            // Signature
            {
                0xf83fdf913db5d1a1797c995d0c6fab555216ff8d5ef0c4d4084b32a0017682f3,
                0xb8e68aaeef9c37c02740749d91a791af69f50d75471208bbcb52e1a0e7926f09
            },
            // public key
            0x6d9b7578933cb6bddeb714f69f44af4b38b44d813ce574841f5afef78888043e
        );


    // Provide a zero hash and a signature. Must recover back a public key
    // These values are tested in Rust in the `essential-base` repo
    var recover_secp256k1 = __recover_secp256k1
        (
            0x0000000000000000000000000000000000000000000000000000000000000000,
            // Signature
            {
                0xa3aa87b6fb725c774f7136b8ab244ff64e5c4c3623fe14c130432754bb985d56,
                0x3db2fa0dc433275d67756a15cadeb73bf703dd8458c2c0874684f6334dc177f5,
                1,                
            },
        );

    constraint recover_secp256k1 == { 0x0308f06a2a35c484909a2480ce681b24967cfd55fca22fcd705769ac55db6279, 13 };

    state x = mut storage::x;
    state y = mut storage::y;
    state z = mut storage::z;
    state w = mut storage::w;

    // `x` is set in the pre state db and in the solution
    constraint __size_of(x) == 1;
    constraint __size_of(x) == 1;

    // `y` is set in the pre state db and in the solution
    constraint __size_of(y) == 1;
    constraint __size_of(y') == 1;

    // `z` is not set in the pre state db but is set in the solution
    constraint __size_of(z) == 0;
    constraint __size_of(z') == 1;

    // `w` is set in the pre state db but unset in the solution
    constraint __size_of(w) == 4;
    constraint __size_of(w') == 0;

    // `__size_of` called on non-state vars.
    constraint __size_of(1) == 1;
    constraint __size_of(this_pathway) == 1;
    constraint __size_of(__size_of(w')) == 1;
}
