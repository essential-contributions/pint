// db <<<
// 0, 42
// 1, 43
// 2, 44
// 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE, 1, 69
// >>>

storage {
    x: int,
    y: int,
    z: int,
}

interface Foo {
    storage {
        x: int,
        y: int,
    }
}

predicate Simple {
    state x: int = mut storage::x;
    state y: int = mut storage::y;
    state z: int = mut storage::z;

    interface FooInstance = Foo(0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE);
    state external_1 = FooInstance::storage::y; // 69

    var w: int = x + 99; // 141
    var u: int = y * 3;  // 129
    var v: int = z * z;  // 1936
    var e_old = external_1;
    var e_new = external_1';

    var a: int[5];

    constraint forall i in 0..4 {
        a[i] == i*i
    };
    constraint x' - x == 1; // x' == 43
    constraint y' == y + 4; // y' == 47
    constraint x' + y' > 89 && x' * y' > 1932;
    constraint x < y;
    constraint w + u + v == 2206;
    constraint external_1' - external_1 == 1;
}
