// db <<<
// 0, 42
// 1, 43
// 2, 44
// 0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE, 1, 69
// >>>

storage {
    x: int,
    y: int,
    z: int,
}

interface Foo {
    storage {
        x: int,
        y: int,
    }
}

predicate Simple(
    w: int,
    u: int,
    v: int,
    e_old: int,
    e_new: int,
    a: int[5],
) {
    let x: int = mut storage::x;
    let y: int = mut storage::y;
    let z: int = mut storage::z;

    let external_1 
        = Foo@[0xEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE]::storage::y; // 69

    constraint w == x + 99; // 141
    constraint u == y * 3;  // 129
    constraint v == z * z;  // 1936
    constraint e_old == external_1;
    constraint e_new == external_1';

    constraint forall i in 0..4 {
        a[i] == i*i
    };
    constraint x' - x == 1; // x' == 43
    constraint y' == y + 4; // y' == 47
    constraint x' + y' > 89 && x' * y' > 1932;
    constraint x < y;
    constraint w + u + v == 2206;
    constraint external_1' - external_1 == 1;
}
