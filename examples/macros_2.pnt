// TODO: transform vars to arguments

predicate test1() {
// ANCHOR: expanded 
let x = 42;
constraint x >= 10;
constraint x < (10 * 10);
// ANCHOR_END: expanded

// ANCHOR: ops_call_expanded
let x1: int = 42;
let x2: int = 69;
constraint x2 > x1;
// ANCHOR_END: ops_call_expanded

// ANCHOR: expr_call_expanded 
let e: int = 4;
let f: int = 2;
constraint f > 0;
let q: int = e / f;
// ANCHOR_END: expr_call_expanded 

// ANCHOR: chain_expanded 
// var m: int;
// var n: int;
// constraint n > m + 10;
// var p: int;
// constraint p > n + 10;
// var r = p;
// ANCHOR_END: chain_expanded 
}

macro @sum($x, $y, &rest) {
    @sum($x + $y; &rest)
}

// Terminating Macro
macro @sum($x, $y) {
    $x + $y
}

predicate test2(array: int[4]) {
// ANCHOR: sum_splicing_expanded 
let sum_of_array_v2 = @sum(array[0]; array[1]; array[2]; array[3]);
// ANCHOR_END: sum_splicing_expanded
}
