// <disabled>
// ANCHOR: alias
type Balance = int;
// ANCHOR_END: alias

predicate test0 {
// ANCHOR: alias_same
var x: int = 5;
var y: Balance = 5;
constraint x == y;
// ANCHOR_END: alias_same
}

// ANCHOR: simple_struct
type User = {
    status: bool,
    address: b256,
    balance: int,
};
// ANCHOR_END: simple_struct

predicate test1 {
// ANCHOR: simple_struct_instance
var user1: User = {
    status: true,
    address: 0x1111111111111111111111111111111111111111111111111111111111111111,
    balance: 42,
};
// ANCHOR_END: simple_struct_instance
}

// ANCHOR: simple_enum
union Token = DAI | USDC | USDT;
// ANCHOR_END: simple_enum

predicate test2 {
// ANCHOR: simple_enum_instances
var dai: Token = Token::DAI;
var usdc: Token = Token::USDC;
var usdt: Token = Token::USDT;
// ANCHOR_END: simple_enum_instances

// ANCHOR: enum_selection
var amount: int;
var token_type: Token = cond {
    amount in 0..1000 => Token::DAI,
    amount in 1001..2000  => Token::USDC,
    else  => Token::USDT,
};
// ANCHOR_END: enum_selection
}

// ANCHOR: enum_in_struct
type Bal = {
    token: Token,
    bal: int,
};

predicate balances {
    var user1_bal = {
        token: Token::DAI,
        bal: 42,
    };

    var user2_bal = {
        token: Token::USDC,
        bal: 96,
    };

    var user3_bal = {
        token: Token::USDT,
        bal: 100,
    };
}
// ANCHOR_END: enum_in_struct
