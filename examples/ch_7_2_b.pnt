// <disabled>
// TODO: transform vars to arguments

predicate test1 {
// ANCHOR: expanded 
var x: int;
constraint x >= 10;
constraint x < (10 * 10);
// ANCHOR_END: expanded

// ANCHOR: ops_call_expanded
var x1: int;
var x2: int;
constraint x2 > x1;
// ANCHOR_END: ops_call_expanded

// ANCHOR: expr_call_expanded 
var e: int;
var f: int;
constraint f > 0;
var q: int = e / f;
// ANCHOR_END: expr_call_expanded 

// ANCHOR: chain_expanded 
var m: int;
var n: int;
constraint n > m + 10;
var p: int;
constraint p > n + 10;
var r = p;
// ANCHOR_END: chain_expanded 
}

macro @sum($x, $y, &rest) {
    @sum($x + $y; &rest)
}

// Terminating Macro
macro @sum($x, $y) {
    $x + $y
}

predicate test2 {
var array: int[4];
// ANCHOR: sum_splicing_expanded 
var sum_of_array_v2 = @sum(array[0]; array[1]; array[2]; array[3]);
// ANCHOR_END: sum_splicing_expanded
}
