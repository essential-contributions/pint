// TODO: transform vars to arguments

// ANCHOR: in_range
macro @in_range($v, $num) {
    constraint $v >= $num;
    constraint $v < ($num * $num);
}
// ANCHOR_END: in_range

// ANCHOR: ops
macro @do_decls($a, $a_expr, $b, $b_expr, $ty, $op) {
    let $a: $ty = $a_expr;
    let $b: $ty = $b_expr;
    constraint $b $op $a;
}
// ANCHOR_END: ops

// ANCHOR: expr
macro @quotion($a, $b) {
    constraint $b > 0;  // Declaration.
    $a / $b             // Final expression.
}
// ANCHOR_END: expr 

// ANCHOR: is_even 
macro @is_even($a) {
    let half: int = $a / 2;
    constraint $a == half * 2 || $a == half * 2 + 1;
}
// ANCHOR_END: is_even 

// ANCHOR: var_decls
// macro @var_decls($a) {
//     let foo: int = 42;     // Hygienic anonymous binding for `foo`.
//     let $a: bool = true;   // Lexical binding for `$a`.
// }
// ANCHOR_END: var_decls

// ANCHOR: sum
// Recursive Macro
macro @sum($x, $y, &rest) {
    // Called only when `&rest` is not empty.  
    // We recurse by adding `$x` and `$y` and using `&rest` as the second argument.
    @sum($x + $y; &rest)
}

// Terminating Macro
macro @sum($x, $y) {
    // Called only when the number of arguments is exactly 2.
    $x + $y
}
// ANCHOR_END: sum

// ANCHOR: sum_simple
// Recursive Macro
macro @sum_v2($x, &rest) {
    @sum_v2($x + &rest)
}

// Terminating Macro
macro @sum_v2($x) {
    $x
}
// ANCHOR_END: sum_simple

// ANCHOR: chain 
// macro @chain($a, &rest) {
//     // Add the first link in the chain, then move to the rest.
//     var $a: int;
//     @chain_next($a; &rest)
// }
// 
// macro @chain_next($prev, $next, &rest) {
//     // Add the next link:
//     // constrain based on the previous link and continue.
//     var $next: int;
//     constraint $next > $prev + 10;
//     @chain_next($next; &rest)
// }
// 
// macro @chain_next($prev, $last) {
//     // Just expand to the final link.
//     var $last: int;
//     constraint $last > $prev + 10;
//     $last
// }
// ANCHOR_END: chain 

macro @foo($a, $b, $c, $d) {}

predicate test1() {
// ANCHOR: macro_use
let x = 42;
@in_range(x; 10);
// ANCHOR_END: macro_use

// ANCHOR: ops_call
@do_decls(x1; 42; x2; 69; int; >);
// ANCHOR_END: ops_call

// ANCHOR: expr_call
let e: int = 4;
let f: int = 2;
let q: int = @quotion(e; f);
// ANCHOR_END: expr_call

// ANCHOR: var_decls_call
// @var_decls(foo);
// @var_decls(bar);
// ANCHOR_END: var_decls_call

let a: int = 0;
let b: int = 1;
let c: int = 2;
let d: int = 3;
let s1 = @sum(a; b);
let s2 = @sum(a; b; c; d);

let s3 = @sum_v2(a; b; c; d);

// let r = @chain(m; n; p);
}

predicate test2(array: int[4], two: int[2], nums: int[3]) {
// ANCHOR: sum_array
let sum_of_array = @sum(array[0]; array[1]; array[2]; array[3]);
// ANCHOR_END: sum_array

// ANCHOR: sum_splicing
let sum_of_array_v2 = @sum(~array);
// ANCHOR_END: sum_splicing

// ANCHOR: splicing_2
@foo(~two + ~two + ~two);
// ANCHOR_END: splicing_2

// ANCHOR: splicing_2_expanded
@foo(two[0]; two[1] + two[0]; two[1] + two[0]; two[1]);
// ANCHOR_END: splicing_2_expanded

// ANCHOR: splicing_3
constraint @sum(100 + ~nums * 200) < 1000;
// ANCHOR_END: splicing_3

// ANCHOR: splicing_3_expanded
constraint @sum(100 + nums[0]; nums[1]; nums[2] * 200) < 1000;
// ANCHOR_END: splicing_3_expanded
}
