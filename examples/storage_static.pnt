// ANCHOR: storage_block
union TokenBalance = DAI(int) | USDC(int) | USDT(int);
storage {
    x: int,
    bal: int,
    a: b256,
    t: { int, bool },
    y: bool,
    w: int,
    arr: { int, int }[3],
    v: { int, { bool, b256 } },
    u: TokenBalance,
}
// ANCHOR_END: storage_block

predicate test(price: int) {
// ANCHOR: storage_access_1
let a = storage::a;
let t = storage::t;
let t_1 = storage::t.1;
let arr_2_1: int? = storage::arr[2].1;

let x = storage::x;
let incremented = storage::x! + 1;

constraint incremented == x! + 1; // always true!
// ANCHOR_END: storage_access_1

// ANCHOR: next_state
let bal = mut storage::bal;
constraint bal'! >= bal! + 42;
// ANCHOR_END: next_state

// ANCHOR: next_state_arbitrary_expr
let bal_in_dollars: int = price * mut storage::bal!;
constraint bal_in_dollars' == price * bal'!; // always true!
// ANCHOR_END: next_state_arbitrary_expr

// ANCHOR: next_state_no_op
let z = 42;
constraint z' == z; // always true
// ANCHOR_END: next_state_no_op


// ANCHOR: mut 
let inner: { bool, b256 }? = mut storage::v.1;
// ANCHOR_END: mut 

// ANCHOR: nil 
let w = mut storage::w;
let value_1 = (w == nil ? 0 : w!);
// ANCHOR_END: nil 

// ANCHOR: nil_in_storage_expr
let value_2 = (mut storage::w == nil) ? 0 : storage::w!;
constraint value_2 == value_1; // always true!
// ANCHOR_END: nil_in_storage_expr

// ANCHOR: update_to_nil 
if w != nil {
    constraint w' == nil;
}
// ANCHOR_END: update_to_nil 
}
