storage {
    total_supply: int,
    balances: (b256 => int),
}

// Sends an amount of newly created coins to an address
predicate Mint(receiver: b256, amount: int) {

    constraint storage::total_supply := storage::total_supply! + amount;
    constraint storage::balances[receiver] := storage::balances[receiver]! + amount;
}

// Sends an amount of existing coins from address `from` to address `receiver`
predicate Send(from: b256, receiver: b256, amount: int) {
    let from_balance = storage::balances[from]!;
    let receiver_balance = storage::balances[receiver]!;

    constraint amount < from_balance;
    constraint storage::balances[from] := from_balance - amount;
    constraint storage::balances[receiver] := receiver_balance + amount;
}
