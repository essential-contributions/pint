// ANCHOR: in_range
macro @in_range($v, $num) {
    constraint $v >= $num;
    constraint $v < ($num * $num);
}
// ANCHOR_END: in_range

// ANCHOR: macro_use
var x: int;
@in_range(x; 10);
// ANCHOR_END: macro_use

// ANCHOR: ops
macro @do_decls($a, $b, $ty, $op) {
    var $a: $ty;
    var $b: $ty;
    constraint $b $op $a;
}
// ANCHOR_END: ops

// ANCHOR: ops_call
@do_decls(x1; x2; int; >);
// ANCHOR_END: ops_call

// ANCHOR: expr
macro @quotion($a, $b) {
    constraint $b > 0;  // Declaration.
    $a / $b             // Final expression.
}
// ANCHOR_END: expr 

// ANCHOR: expr_call
var e: int;
var f: int;
var q: int = @quotion(e; f);
// ANCHOR_END: expr_call

// ANCHOR: is_even 
macro @is_even($a) {
    var half: int;
    constraint $a == half * 2;
}
// ANCHOR_END: is_even 

// ANCHOR: var_decls
macro @var_decls($a) {
    var foo: int;       // Hygienic anonymous binding for `foo`.
    var $a: bool;       // Lexical binding for `$a`.
}
// ANCHOR_END: var_decls

// ANCHOR: var_decls_call
@var_decls(foo);
@var_decls(bar);
// ANCHOR_END: var_decls_call


// ANCHOR: sum
// Recursive Macro
macro @sum($x, $y, &rest) {
    // Called only when `&rest` is not empty.  
    // We recurse by adding `$x` and `$y` and using `&rest` as the second argument.
    @sum($x + $y; &rest)
}

// Terminating Macro
macro @sum($x, $y) {
    // Called only when the number of arguments is exactly 2.
    $x + $y
}
// ANCHOR_END: sum

var a: int;
var b: int;
var c: int;
var d: int;
var s1 = @sum(a; b);
var s2 = @sum(a; b; c; d);

// ANCHOR: sum_simple
// Recursive Macro
macro @sum_v2($x, &rest) {
    @sum_v2($x + &rest)
}

// Terminating Macro
macro @sum_v2($x) {
    $x
}
// ANCHOR_END: sum_simple

var s3 = @sum_v2(a; b; c; d);

// ANCHOR: chain 
macro @chain($a, &rest) {
    // Add the first link in the chain, then move to the rest.
    var $a: int;
    @chain_next($a; &rest)
}

macro @chain_next($prev, $next, &rest) {
    // Add the next link, constrain based on the previous link and continue.
    var $next: int;
    constraint $next > $prev + 10;
    @chain_next($next; &rest)
}

macro @chain_next($prev, $last) {
    // Just expand to the final link.
    var $last: int;
    constraint $last > $prev + 10;
    $last
}
// ANCHOR_END: chain 

var r = @chain(m; n; p);

// ANCHOR: sum_array
var array: int[4];
var sum_of_array = @sum(array[0]; array[1]; array[2]; array[3]);
// ANCHOR_END: sum_array

// ANCHOR: sum_splicing
var sum_of_array_v2 = @sum(~array);
// ANCHOR_END: sum_splicing


macro @foo($a, $b, $c, $d) {}

// ANCHOR: splicing_2
var two: int[2];
@foo(~two + ~two + ~two);
// ANCHOR_END: splicing_2

// ANCHOR: splicing_2_expanded
@foo(two[0]; two[1] + two[0]; two[1] + two[0]; two[1]);
// ANCHOR_END: splicing_2_expanded

// ANCHOR: splicing_3
var nums = [1, 2, 3];
constraint @sum(100 + ~nums * 200) < 1000;
// ANCHOR_END: splicing_3

// ANCHOR: splicing_3_expanded
constraint @sum(100 + nums[0]; nums[1]; nums[2] * 200) < 1000;
// ANCHOR_END: splicing_3_expanded

solve satisfy;
