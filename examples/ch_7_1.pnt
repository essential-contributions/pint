// ANCHOR: predicate_foo 
predicate Foo {
    pub var x: int;
    pub var y: b256;
    pub var t: { int, bool, b256 };

    var a: int;
    var b: bool;
    var c: int[4];

    constraint a + x > 3;
    constraint y == 0x1111111111111111111111111111111111111111111111111111111111111111;
    constraint !t.1 && b;
}
// ANCHOR_END: predicate_foo

// ANCHOR: interface 
interface MyInterface {
    // storage block, if present

    predicate Foo {
        pub var x: int;
        pub var y: b256;
        pub var t: { int, bool, b256 };
    }

    // other predicates, if present
}
// ANCHOR_END: interface 

const ContractID: b256 = 0x0000000000000000000000000000000000000000000000000000000000000000;
const PredicateID: b256 = 0x1111111111111111111111111111111111111111111111111111111111111111;

predicate Bar {
    // ANCHOR: interface_instance 
    interface MyInterfaceInstance = MyInterface(ContractID);
    // ANCHOR_END: interface_instance

    // ANCHOR: predicate_instance 
    predicate FooInstance = MyInterfaceInstance::Foo(PredicateID);
    // ANCHOR_END: predicate_instance

    // ANCHOR: access
    var m: int;
    var n: bool;

    constraint m * FooInstance::x > 8;
    constraint FooInstance::y == 0x2222222222222222222222222222222222222222222222222222222222222222;
    constraint FooInstance::t.1 && n;
    // ANCHOR_END: access
}

predicate Baz {
    // ANCHOR: multiple_instances
    interface MyInterfaceInstance = MyInterface(ContractID);
    predicate FooInstance1 = MyInterfaceInstance::Foo(PredicateID);
    predicate FooInstance2 = MyInterfaceInstance::Foo(PredicateID);
    
    var x1 = FooInstance1::x;
    var x2 = FooInstance2::x;
    // ANCHOR_END: multiple_instances
}

// ANCHOR: siblings 
predicate A {
    pub var x: int;    
}

predicate B {
    predicate AI1 = A();
    predicate AI2 = A();
    constraint AI1::x == AI2::x * 2;
}
// ANCHOR_END: siblings 
