// ANCHOR: storage_block
storage {
    // ...
    balances: (b256 => int),
    // ...
}
// ANCHOR_END: storage_block

predicate test(
    from_address: b256,
    receiver_address: b256,
    my_address: b256,
) {
// ANCHOR: storage_access_1
let from_balance = storage::balances[from_address];
let receiver_balance = storage::balances[receiver_address];
// ANCHOR_END: storage_access_1

// ANCHOR: next_state
let my_bal = storage::balances[my_address];
constraint storage::balances[my_address] := my_bal! + 1_000_000;
// ANCHOR_END: next_state

// ANCHOR: next_state_with_check
if my_bal != nil {
    constraint storage::balances[my_address] := my_bal! + 1_000_000;
} else {
    constraint storage::balances[my_address] := 1_000_000;
}
// ANCHOR_END: next_state_with_check
}
