// ANCHOR: storage_block
storage {
    x: int,
    a: b256,
    t: { int, bool },
    y: bool,
    w: int,
    arr: { int, int }[3],
    v: { int, { bool, b256 } },
}
// ANCHOR_END: storage_block

predicate test {
// ANCHOR: storage_access_1
state x = storage::x;
state a = storage::a;
state t = storage::t;
state t_1 = storage::t.1;
state arr_2_1 = storage::arr[2].1;
// ANCHOR_END: storage_access_1

// ANCHOR: state 
state not_annotated = storage::x;
state annotated: b256 = storage::a;
// ANCHOR_END: state 

// ANCHOR: constraint
state t_0 = storage::t.0;
state y = storage::y;
constraint y && t_0 >= 42;
// ANCHOR_END: constraint

// ANCHOR: next_state
state bal = mut storage::x;
constraint bal' >= bal + 42;
// ANCHOR_END: next_state 

// ANCHOR: mut 
state inner: { bool, b256 } = mut storage::v.1;
// ANCHOR_END: mut 

// ANCHOR: nil 
state w = mut storage::w;
var value: int = (w == nil ? 0 : w);
// ANCHOR_END: nil 

// ANCHOR: update_to_nil 
if w != nil {
    constraint w' == nil;
}
// ANCHOR_END: update_to_nil 
}
