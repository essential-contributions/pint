storage {
    s_x: int,
    s_y: bool,
    s_z: {int, b256},
    s_a: {bool, int}[2],
    s_u: MyUnion,
    m1: (int => b256),
    m2: (int => (int => {bool, int})),
}

union MyUnion = A(int) | B;

predicate MyPredicate(
    x: int,
    y: bool,
    z: {int, b256},
    a: {bool, int}[2],
    u: MyUnion,
) {
    // Check arguments
    constraint x == 42;
    constraint y == true;
    constraint z == {2, 0x1111111100000000111111110000000011111111000000001111111100000000};
    constraint a == [{true, 1}, {false, 2}];
    constraint u == MyUnion::A(3);

    let s_x = storage::s_x';
    let s_y = storage::s_y';
    let s_z = storage::s_z';
    let s_a = storage::s_a';
    let s_u = storage::s_u';
    let m1_42 = storage::m1[42]';
    let m2_5_6 = storage::m2[5][6]';

    // Update state
    constraint s_x! == 7;
    constraint s_y! == true;
    constraint s_z! == {8, 0x2222222200000000222222220000000022222222000000002222222200000000};
    constraint s_a! == [{false, 3}, {true, 4}];
    constraint s_u! == MyUnion::B;
    constraint m1_42! == 0x3333333300000000333333330000000033333333000000003333333300000000;
    constraint m2_5_6! == {true, 69};
}
