predicate test(number: int, x: int) {
// ANCHOR: basic_select
let y = (number < 5 ? 1 : 2);
// ANCHOR_END: basic_select

// ANCHOR: basic_cond
let z = cond {
    x == 0 => 0,
    x > 0 && x <= 10 => 1,
    x > 10 && x <= 100 => 2,
    else => 3
};
// ANCHOR_END: basic_cond

// ANCHOR: basic_if
if number < 5 {
    constraint x == y;
} else {
    constraint x != y;
}
// ANCHOR_END: basic_if

// ANCHOR: complex_if
if number < 5 {
    constraint x == y;

    if z > 0 {
        constraint x > number;
        constraint y > number;
    }
} else {
    constraint x != y;

    if z > 0 {
        constraint x > number;
        constraint y > number;
    } else {
        constraint x < number;
        constraint y < number;
    }
}
// ANCHOR_END: complex_if
}
