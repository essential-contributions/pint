predicate test(ary: int[10]) {
    let evens: int[10] = map x in ary {
        x % 2 == 1 ? x + 1 : x
    };
    constraint evens[4] + evens[0] == 10;

    let zero_map: bool[10] = map y in ary { y == 0 };
    constraint !zero_map[3];
}

// parsed <<<
// predicate ::test(
//     ::ary: int[10],
// ) {
//     let ::evens: int[10] = map x in ::ary { (((::x % 2) == 1) ? (::x + 1) : ::x) };
//     let ::zero_map: bool[10] = map y in ::ary { (::y == 0) };
//     constraint ((::evens[4] + ::evens[0]) == 10);
//     constraint !::zero_map[3];
// }
// >>>

// flattened <<<
// predicate ::test(
//     ::ary: int[10],
// ) {
//     let ::evens: int[10] = map x in ::ary { (((::x % 2) == 1) ? (::x + 1) : ::x) };
//     let ::zero_map: bool[10] = map y in ::ary { (::y == 0) };
//     constraint ((::evens[4] + ::evens[0]) == 10);
//     constraint !::zero_map[3];
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
