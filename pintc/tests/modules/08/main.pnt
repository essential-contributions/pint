use ::b::c;
use ::d::MyUnion;
use b;

predicate test() {
    state c1 = ::b::c;
    state c2 = b::c;
    state c3 = c;
    state c4 = b::c;

    state a_variant = MyUnion::A;
    state b_variant = d::MyUnion::B;
}

// parsed <<<
// const ::b::c = 5;
// union ::d::MyUnion = A | B;
// 
// predicate ::test(
// ) {
//     state ::c1 = ::b::c;
//     state ::c2 = ::b::c;
//     state ::c3 = ::b::c;
//     state ::c4 = ::b::c;
//     state ::a_variant = ::d::MyUnion::A;
//     state ::b_variant = ::d::MyUnion::B;
// }
// >>>

// flattened <<<
// const ::b::c: int = 5;
// union ::d::MyUnion = A | B;
// 
// predicate ::test(
// ) {
//     state ::c1: int = 5;
//     state ::c2: int = 5;
//     state ::c3: int = 5;
//     state ::c4: int = 5;
//     state ::a_variant: ::d::MyUnion = ::d::MyUnion::A;
//     state ::b_variant: ::d::MyUnion = ::d::MyUnion::B;
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
