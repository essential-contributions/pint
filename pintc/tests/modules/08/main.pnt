use ::b::c;
use ::d::MyUnion;
use b;

predicate test() {
    let c1 = ::b::c;
    let c2 = b::c;
    let c3 = c;
    let c4 = b::c;

    let a_variant = MyUnion::A;
    let b_variant = d::MyUnion::B;
}

// parsed <<<
// const ::b::c = 5;
// union ::d::MyUnion = A | B;
//
// predicate ::test(
// ) {
//     let ::c1 = ::b::c;
//     let ::c2 = ::b::c;
//     let ::c3 = ::b::c;
//     let ::c4 = ::b::c;
//     let ::a_variant = ::d::MyUnion::A;
//     let ::b_variant = ::d::MyUnion::B;
// }
// >>>

// flattened <<<
// const ::b::c: int = 5;
// union ::d::MyUnion = A | B;
//
// predicate ::test(
// ) {
//     let ::c1: int = 5;
//     let ::c2: int = 5;
//     let ::c3: int = 5;
//     let ::c4: int = 5;
//     let ::a_variant: ::d::MyUnion = ::d::MyUnion::A;
//     let ::b_variant: ::d::MyUnion = ::d::MyUnion::B;
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
