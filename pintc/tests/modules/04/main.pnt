union Skill = Nunchuck | BowHunting | ComputerHacking;

predicate test(debbie_skill: debbie::Skill, pedro_skill: Skill, kip_skill: kip::Skill) {
    // A bunch of unions *with the same name* all in different files should all have unique paths.

    constraint debbie_skill == debbie::Skill::GlamourShots;

    constraint pedro_skill == Skill::Nunchuck || pedro_skill == Skill::BowHunting;

    constraint debbie_skill == debbie::Skill::Handicrafts && kip_skill == kip::Skill::CageFighting;
}

// parsed <<<
// union ::Skill = Nunchuck | BowHunting | ComputerHacking;
// union ::kip::Skill = ChattingOnlineWithBabes | CageFighting;
// union ::debbie::Skill = GlamourShots | Handicrafts;
//
// predicate ::test(
//     ::debbie_skill: ::debbie::Skill,
//     ::pedro_skill: ::Skill,
//     ::kip_skill: ::kip::Skill,
// ) {
//     constraint (::debbie_skill == ::debbie::Skill::GlamourShots);
//     constraint ((::pedro_skill == ::Skill::Nunchuck) || (::pedro_skill == ::Skill::BowHunting));
//     constraint ((::debbie_skill == ::debbie::Skill::Handicrafts) && (::kip_skill == ::kip::Skill::CageFighting));
// }
// >>>

// flattened <<<
// union ::Skill = Nunchuck | BowHunting | ComputerHacking;
// union ::kip::Skill = ChattingOnlineWithBabes | CageFighting;
// union ::debbie::Skill = GlamourShots | Handicrafts;
//
// predicate ::test(
//     ::debbie_skill: ::debbie::Skill,
//     ::pedro_skill: ::Skill,
//     ::kip_skill: ::kip::Skill,
// ) {
//     constraint (::debbie_skill == ::debbie::Skill::GlamourShots);
//     constraint ((::pedro_skill == ::Skill::Nunchuck) || (::pedro_skill == ::Skill::BowHunting));
//     constraint ((::debbie_skill == ::debbie::Skill::Handicrafts) && (::kip_skill == ::kip::Skill::CageFighting));
// }
// >>>
