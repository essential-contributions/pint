use variables::{q1, q2, q3, q4};

// Distinc rows: qi != qj for all i, j
constraint q1 != q2;
constraint q1 != q3;
constraint q1 != q4;
constraint q2 != q3;
constraint q2 != q4;
constraint q3 != q4;

// Distinct diagonals: qi + i != qj + j for all i, j
constraint q1 + 1 != q2 + 2;
constraint q1 + 1 != q3 + 3;
constraint q1 + 1 != q4 + 4;
constraint q2 + 2 != q3 + 3;
constraint q2 + 2 != q4 + 4;
constraint q3 + 3 != q4 + 4;

// Upwards and downwards: qi - i != qj - j for all i, j
// Rearranged to avoid subtraction, until subtraction is properly supported
constraint q1 + 1 != q2;
constraint q1 + 2 != q3;
constraint q1 + 3 != q4;
constraint q2 + 1 != q3;
constraint q2 + 2 != q4;
constraint q3 + 1 != q4;

solve satisfy;

// parsed <<<
// var ::variables::q1: int;
// var ::variables::q2: int;
// var ::variables::q3: int;
// var ::variables::q4: int;
// constraint (::variables::q1 != ::variables::q2);
// constraint (::variables::q1 != ::variables::q3);
// constraint (::variables::q1 != ::variables::q4);
// constraint (::variables::q2 != ::variables::q3);
// constraint (::variables::q2 != ::variables::q4);
// constraint (::variables::q3 != ::variables::q4);
// constraint ((::variables::q1 + 1) != (::variables::q2 + 2));
// constraint ((::variables::q1 + 1) != (::variables::q3 + 3));
// constraint ((::variables::q1 + 1) != (::variables::q4 + 4));
// constraint ((::variables::q2 + 2) != (::variables::q3 + 3));
// constraint ((::variables::q2 + 2) != (::variables::q4 + 4));
// constraint ((::variables::q3 + 3) != (::variables::q4 + 4));
// constraint ((::variables::q1 + 1) != ::variables::q2);
// constraint ((::variables::q1 + 2) != ::variables::q3);
// constraint ((::variables::q1 + 3) != ::variables::q4);
// constraint ((::variables::q2 + 1) != ::variables::q3);
// constraint ((::variables::q2 + 2) != ::variables::q4);
// constraint ((::variables::q3 + 1) != ::variables::q4);
// constraint (::variables::q1 >= 1);
// constraint (::variables::q1 <= 4);
// constraint (::variables::q2 >= 1);
// constraint (::variables::q2 <= 4);
// constraint (::variables::q3 >= 1);
// constraint (::variables::q3 <= 4);
// constraint (::variables::q4 >= 1);
// constraint (::variables::q4 <= 4);
// solve satisfy;
// >>>

// flattened <<<
// var ::variables::q1: int;
// var ::variables::q2: int;
// var ::variables::q3: int;
// var ::variables::q4: int;
// constraint (::variables::q1 != ::variables::q2);
// constraint (::variables::q1 != ::variables::q3);
// constraint (::variables::q1 != ::variables::q4);
// constraint (::variables::q2 != ::variables::q3);
// constraint (::variables::q2 != ::variables::q4);
// constraint (::variables::q3 != ::variables::q4);
// constraint ((::variables::q1 + 1) != (::variables::q2 + 2));
// constraint ((::variables::q1 + 1) != (::variables::q3 + 3));
// constraint ((::variables::q1 + 1) != (::variables::q4 + 4));
// constraint ((::variables::q2 + 2) != (::variables::q3 + 3));
// constraint ((::variables::q2 + 2) != (::variables::q4 + 4));
// constraint ((::variables::q3 + 3) != (::variables::q4 + 4));
// constraint ((::variables::q1 + 1) != ::variables::q2);
// constraint ((::variables::q1 + 2) != ::variables::q3);
// constraint ((::variables::q1 + 3) != ::variables::q4);
// constraint ((::variables::q2 + 1) != ::variables::q3);
// constraint ((::variables::q2 + 2) != ::variables::q4);
// constraint ((::variables::q3 + 1) != ::variables::q4);
// constraint (::variables::q1 >= 1);
// constraint (::variables::q1 <= 4);
// constraint (::variables::q2 >= 1);
// constraint (::variables::q2 <= 4);
// constraint (::variables::q3 >= 1);
// constraint (::variables::q3 <= 4);
// constraint (::variables::q4 >= 1);
// constraint (::variables::q4 <= 4);
// solve satisfy;
// >>>
