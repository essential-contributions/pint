use a::E;

use a::F;

const b = F;

enum E = A | B;

type E = b256;

predicate test {
    var E = 4;

    state E = __vec_len();
}

// parse_failure <<<
// symbol `E` has already been declared
// @7..8: previous declaration of the symbol `E` here
// @41..42: `E` redeclared here
// `E` must be declared or imported only once in this scope
// symbol `E` has already been declared
// @7..8: previous declaration of the symbol `E` here
// @58..59: `E` redeclared here
// `E` must be declared or imported only once in this scope
// symbol `E` has already been declared
// @94..95: previous declaration of the symbol `E` here
// @112..113: `E` redeclared here
// `E` must be declared or imported only once in this scope
// symbol `F` has already been declared
// @6..7: previous declaration of the symbol `F` here
// @19..20: `F` redeclared here
// `F` must be declared or imported only once in this scope
// symbol `F` has already been declared
// @6..7: previous declaration of the symbol `F` here
// @36..37: `F` redeclared here
// `F` must be declared or imported only once in this scope
// symbol `F` has already been declared
// @6..7: previous declaration of the symbol `F` here
// @53..54: `F` redeclared here
// `F` must be declared or imported only once in this scope
// symbol `::E` has already been declared
// @7..8: previous declaration of the symbol `::E` here
// @94..95: `::E` redeclared here
// `::E` must be declared or imported only once in this scope
// >>>
