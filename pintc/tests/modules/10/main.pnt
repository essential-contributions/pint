use a::E;

use a::F;

const b = F;

union E = A | B;

type E = b256;

predicate test(E: int) {
    constraint E == 4;

    let E = __len();
}

// parse_failure <<<
// symbol `E` has already been declared
// @7..8: previous declaration of the symbol `E` here
// @42..43: `E` redeclared here
// `E` must be declared or imported only once in this scope
// symbol `E` has already been declared
// @7..8: previous declaration of the symbol `E` here
// @59..60: `E` redeclared here
// `E` must be declared or imported only once in this scope
// symbol `E` has already been declared
// @85..86: previous declaration of the symbol `E` here
// @127..128: `E` redeclared here
// `E` must be declared or imported only once in this scope
// symbol `F` has already been declared
// @6..7: previous declaration of the symbol `F` here
// @20..21: `F` redeclared here
// `F` must be declared or imported only once in this scope
// symbol `F` has already been declared
// @6..7: previous declaration of the symbol `F` here
// @37..38: `F` redeclared here
// `F` must be declared or imported only once in this scope
// symbol `F` has already been declared
// @6..7: previous declaration of the symbol `F` here
// @54..55: `F` redeclared here
// `F` must be declared or imported only once in this scope
// symbol `::E` has already been declared
// @7..8: previous declaration of the symbol `::E` here
// @85..86: `::E` redeclared here
// `::E` must be declared or imported only once in this scope
// >>>
