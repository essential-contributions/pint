// <disabled>
//
// I'm disabling this for now due to type checking and functions.  This one _could_ be type checked,
// since `hello_world()` is well defined, but external functions are currently getting redesigned.

use a::b;

extern {
  fn hello_world() -> bool;
}

var c: int;
state d: bool = hello_world();

constraint b > c;

solve satisfy;

// parsed <<<
// var ::c: int;
// var ::a::b: int;
// state ::d: bool = ::hello_world();
// type ::a::Count = int;
// constraint (::a::b > ::c);
// constraint (::a::b == 10);
// extern { fn ::hello_world() -> bool; }
// solve satisfy;
// >>>

// flattened <<<
// var ::c: int;
// var ::a::b: int;
// state ::d: bool = ::hello_world();
// constraint (::a::b > ::c);
// constraint (::a::b == 10);
// solve satisfy;
// >>>

// solve_failure <<<
// solver internal error: (scip) no state variables are allowed at this stage
// >>>
