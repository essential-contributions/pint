use b_mod::{s0, s1};
use ::b_mod::{s2, s3};
use b_mod::s4;

use b_mod::c_mod::A::{C, D};
use ::b_mod::c_mod::{A, A::B};

constraint s0 == B;
constraint b_mod::s1 == C;
constraint s2 == A::B;
constraint ::b_mod::s3 == b_mod::c_mod::A::C;
constraint s4 == ::b_mod::c_mod::A::B;

enum U = V | W;

solve satisfy;

// intermediate <<<
// var ::b_mod::s0;
// var ::b_mod::s1;
// var ::b_mod::s2;
// var ::b_mod::s3;
// var ::b_mod::s4;
// enum ::U = V | W;
// enum ::b_mod::c_mod::A = B | C | D;
// enum ::b_mod::X = Y | Z;
// constraint (::b_mod::s0 == ::b_mod::c_mod::A::B);
// constraint (::b_mod::s1 == ::b_mod::c_mod::A::C);
// constraint (::b_mod::s2 == ::b_mod::c_mod::A::B);
// constraint (::b_mod::s3 == ::b_mod::c_mod::A::C);
// constraint (::b_mod::s4 == ::b_mod::c_mod::A::B);
// constraint (::b_mod::s0 == ::b_mod::c_mod::A::B);
// constraint (::b_mod::s1 == ::b_mod::c_mod::A::C);
// constraint (::b_mod::s2 == ::b_mod::c_mod::A::B);
// constraint (::b_mod::s3 == ::b_mod::c_mod::A::C);
// constraint (::b_mod::s4 == ::b_mod::c_mod::A::B);
// solve satisfy;
// >>>

// flattened <<<
// var ::b_mod::s0: ::b_mod::c_mod::A;
// var ::b_mod::s1: ::b_mod::c_mod::A;
// var ::b_mod::s2: ::b_mod::c_mod::A;
// var ::b_mod::s3: ::b_mod::c_mod::A;
// var ::b_mod::s4: ::b_mod::c_mod::A;
// enum ::U = V | W;
// enum ::b_mod::c_mod::A = B | C | D;
// enum ::b_mod::X = Y | Z;
// constraint (::b_mod::s0 == 0);
// constraint (::b_mod::s1 == 1);
// constraint (::b_mod::s2 == 0);
// constraint (::b_mod::s3 == 1);
// constraint (::b_mod::s4 == 0);
// constraint (::b_mod::s0 == 0);
// constraint (::b_mod::s1 == 1);
// constraint (::b_mod::s2 == 0);
// constraint (::b_mod::s3 == 1);
// constraint (::b_mod::s4 == 0);
// constraint (::b_mod::s0 >= 0);
// constraint (::b_mod::s0 <= 2);
// constraint (::b_mod::s1 >= 0);
// constraint (::b_mod::s1 <= 2);
// constraint (::b_mod::s2 >= 0);
// constraint (::b_mod::s2 <= 2);
// constraint (::b_mod::s3 >= 0);
// constraint (::b_mod::s3 <= 2);
// constraint (::b_mod::s4 >= 0);
// constraint (::b_mod::s4 <= 2);
// solve satisfy;
// >>>
