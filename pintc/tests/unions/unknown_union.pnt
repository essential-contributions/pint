union known = good | better(int);

predicate test(
    a: unknown,
    b: known, 
    c: known, 
    d: known, 
    e: known, 
) {
    // Unknown union decl.
    constraint a == unknown::variant(11);

    // Known union, unknown variant.
    constraint b == known::unknown(22);

    // Variant does not have a value.
    constraint c == known::good(33);

    // Variant needs a value.
    constraint d == known::better;

    // Variant value type mismatch.
    constraint e == known::better(true);
}

// parsed <<<
// union ::known = good | better(int);
// 
// predicate ::test(
//     ::a: ::unknown,
//     ::b: ::known,
//     ::c: ::known,
//     ::d: ::known,
//     ::e: ::known,
// ) {
//     constraint (::a == ::unknown::variant(11));
//     constraint (::b == ::known::unknown(22));
//     constraint (::c == ::known::good(33));
//     constraint (::d == ::known::better);
//     constraint (::e == ::known::better(true));
// }
// >>>

// typecheck_failure <<<
// undefined type
// @58..65: type is undefined
// unknown union
// @178..194: union declaration for `::unknown::variant` not found
// unknown union variant
// @258..272: union variant `::known::unknown` not found
// valid variant names are `good` and `better`
// union variant does not have a value
// @337..352: union variant `::known::good` should not bind a value
// missing union variant value
// @405..418: union variant `better` requires a value of type `int`
// cannot find value `::known::better` in this scope
// @405..418: not found in this scope
// union variant type mismatch
// @491..495: expecting type `int`, found `bool`
// >>>
