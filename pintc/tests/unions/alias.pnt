union MyUnion = x | a(bool) | b(b256) | c(int);
type MyAlias1 = MyUnion;
type MyAlias2 = MyAlias1;

storage {
    a: (MyAlias2 => bool),
}

predicate Test() {
    let a1 = storage::a[MyAlias1::a(true)];
    let a2 = storage::a[MyAlias2::c(42)];
    let a3 = storage::a[MyAlias1::x];
    let a4 = storage::a[MyAlias2::x];
    let a5 = storage::a[MyUnion::x];
    let a6 = storage::a[MyUnion::a(false)];

    constraint a1 == a2;
    constraint a3 == a4;
    constraint a5 == a6;
}

// parsed <<<
// union ::MyUnion = x | a(bool) | b(b256) | c(int);
// type ::MyAlias1 = ::MyUnion;
// type ::MyAlias2 = ::MyAlias1;
// storage {
//     a: ( ::MyAlias2 => bool ),
// }
//
// predicate ::Test(
// ) {
//     let ::a1 = storage::a[::MyAlias1::a(true)];
//     let ::a2 = storage::a[::MyAlias2::c(42)];
//     let ::a3 = storage::a[::MyAlias1::x];
//     let ::a4 = storage::a[::MyAlias2::x];
//     let ::a5 = storage::a[::MyUnion::x];
//     let ::a6 = storage::a[::MyUnion::a(false)];
//     constraint (::a1 == ::a2);
//     constraint (::a3 == ::a4);
//     constraint (::a5 == ::a6);
// }
// >>>

// flattened <<<
// union ::MyUnion = x | a(bool) | b(b256) | c(int);
// type ::MyAlias1 = ::MyUnion;
// type ::MyAlias2 = ::MyUnion;
// storage {
//     a: ( ::MyUnion => bool ),
// }
//
// predicate ::Test(
// ) {
//     let ::a1: bool? = __pre_state({0, ::MyUnion::a(true)});
//     let ::a2: bool? = __pre_state({0, ::MyUnion::c(42)});
//     let ::a3: bool? = __pre_state({0, ::MyUnion::x});
//     let ::a4: bool? = __pre_state({0, ::MyUnion::x});
//     let ::a5: bool? = __pre_state({0, ::MyUnion::x});
//     let ::a6: bool? = __pre_state({0, ::MyUnion::a(false)});
//     constraint (::a1 == ::a2);
//     constraint (::a3 == ::a4);
//     constraint (::a5 == ::a6);
// }
// >>>
