union pet = cats(int) | dogs(int) | emu;

predicate test(a: pet) {
    constraint pet::cats(11) == a;
    constraint a > pet::cats(11);
    constraint pet::dogs(22) <= pet::emu;
}

// parsed <<<
// union ::pet = cats(int) | dogs(int) | emu;
// 
// predicate ::test(
//     ::a: ::pet,
// ) {
//     constraint (::pet::cats(11) == ::a);
//     constraint (::a > ::pet::cats(11));
//     constraint (::pet::dogs(22) <= ::pet::emu);
// }
// >>>

// typecheck_failure <<<
// operator invalid type error
// @117..134: invalid non-numeric type `::pet` for operator `>`
// operator invalid type error
// @151..176: invalid non-numeric type `::pet` for operator `<=`
// >>>
