union number = zero | one(int) | more(bool);

predicate test(n: number) {
    constraint match n {
        number::zero(x) => x == 0,
        number::one => true,
        else => false,
    };
}

predicate decl_test(n: number) {
    match n {
        number::zero(x) => {
            constraint x == 0;
        }
        number::one => {
            constraint true;
        }
        else => {
            constraint false;
        }
    }
}

// parsed <<<
// union ::number = zero | one(int) | more(bool);
//
// predicate ::test(
//     ::n: ::number,
// ) {
//     constraint match ::n { ::number::zero(x) => (::x == 0), ::number::one => true, else => false };
// }
//
// predicate ::decl_test(
//     ::n: ::number,
// ) {
//     match ::n {
//         ::number::zero(x) => {
//             constraint (::x == 0)
//         }
//         ::number::one => {
//             constraint true
//         }
//         else => {
//             constraint false
//         }
//     }
// }
// >>>

// typecheck_failure <<<
// union variant does not have a value
// @107..119: union variant `::number::zero` should not bind a value
// missing union variant value
// @142..153: union variant `::number::one` requires a value of type `int`
// union variant does not have a value
// @251..263: union variant `::number::zero` should not bind a value
// missing union variant value
// @321..332: union variant `::number::one` requires a value of type `int`
// constraint expression type error
// @89..191: expecting type `bool`
// >>>
