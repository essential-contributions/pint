union value = nul | scalar(int);

predicate test(x: value) {
    constraint match x {
        value::nul => false,
        value::scalar(n) => n > 0,
        else => true,
    };
}

predicate decl_test(x: value) {
    match x {
        value::nul => {
            constraint false;
        }
        value::scalar(n) => {
            constraint n > 0;
        }
        else => {
            constraint true;
        }
    }
}

// parsed <<<
// union ::value = nul | scalar(int);
// 
// predicate ::test(
//     ::x: ::value,
// ) {
//     constraint match ::x { ::value::nul => false, ::value::scalar(n) => (::n > 0), else => true };
// }
// 
// predicate ::decl_test(
//     ::x: ::value,
// ) {
//     match ::x {
//         ::value::nul => {
//             constraint false
//         }
//         ::value::scalar(n) => {
//             constraint (::n > 0)
//         }
//         else => {
//             constraint true
//         }
//     }
// }
// >>>

// typecheck_failure <<<
// unneeded else branch
// @76..177: `else` branch in match will never be evaluated
// unneeded else branch
// @218..424: `else` branch in match will never be evaluated
// >>>
