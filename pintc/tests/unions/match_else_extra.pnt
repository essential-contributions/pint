union value = nul | scalar(int);

predicate test {
    var x: value;

    constraint match x {
        value::nul => false,
        value::scalar(n) => n > 0,
        else => true,
    };
}

predicate decl_test {
    var x: value;

    match x {
        value::nul => {
            constraint false;
        }
        value::scalar(n) => {
            constraint n > 0;
        }
        else => {
            constraint true;
        }
    }
}

// parsed <<<
// union ::value = nul | scalar(int);
//
// predicate ::test {
//     var ::x: ::value;
//     constraint match ::x { ::value::nul => false, ::value::scalar(n) => (::n > 0), else => true };
// }
//
// predicate ::decl_test {
//     var ::x: ::value;
//     match ::x {
//         ::value::nul => {
//             constraint false
//         }
//         ::value::scalar(n) => {
//             constraint (::n > 0)
//         }
//         else => {
//             constraint true
//         }
//     }
// }
// >>>

// typecheck_failure <<<
// unneeded else branch
// @85..186: `else` branch in match will never be evaluated
// unneeded else branch
// @236..442: `else` branch in match will never be evaluated
// >>>
