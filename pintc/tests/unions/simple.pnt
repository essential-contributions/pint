type number = int;

union thing = a(bool) | b(number) | c({int, number});
union maybe_addr = no_addr | addr(b256);

type maydr = maybe_addr;

predicate test(
    x: ::thing,
    d: int,
    no_base_addr: ::maybe_addr,
    a_base_addr: ::maybe_addr,
    actual_addr: b256,
) {
    // Boolean match expression.
    constraint match x {
        thing::a(b) => b,
        thing::b(n) => n > 0,
        thing::c(t) => t.0 + t.1 == 11
    };

    // Integer match expression in a constraint with `else`.
    constraint match x {
        thing::b(b) => b,
        else => 22,
    } > 0;

    // Boolean match expression with blocks & constraints.
    constraint match x {
        thing::a(b) => b,
        thing::b(n) => {
            constraint n > 0;
            n * 2 < 10
        },
        thing::c(t) => {
            constraint t.0 == 33;
            constraint t.1 != 44;
            true
        }
    };

    // Non-expression match.  Also refers to other var `d`.
    match x {
        thing::a(b) => {},
        thing::c(t) => {
            constraint t.0 * t.1 == 66;
            constraint d == t.0 - t.1;
        }
        else => {
            constraint d == 55;
        }
    }

    // Constraining an address to either zero or something.
    constraint no_base_addr == maybe_addr::no_addr;
    constraint a_base_addr == maybe_addr::addr(0x1111111111111111111111111111111111111111111111111111111111111111);

    constraint actual_addr == match no_base_addr {
        maybe_addr::no_addr => 0x0000000000000000000000000000000000000000000000000000000000000000,
        maybe_addr::addr(a) => a,
    };
}

// parsed <<<
// union ::thing = a(bool) | b(::number) | c({int, ::number});
// union ::maybe_addr = no_addr | addr(b256);
// type ::number = int;
// type ::maydr = ::maybe_addr;
//
// predicate ::test(
//     ::x: ::thing,
//     ::d: int,
//     ::no_base_addr: ::maybe_addr,
//     ::a_base_addr: ::maybe_addr,
//     ::actual_addr: b256,
// ) {
//     constraint match ::x { ::thing::a(b) => ::b, ::thing::b(n) => (::n > 0), ::thing::c(t) => ((::t.0 + ::t.1) == 11) };
//     constraint (match ::x { ::thing::b(b) => ::b, else => 22 } > 0);
//     constraint match ::x { ::thing::a(b) => ::b, ::thing::b(n) => constraint (::n > 0); ((::n * 2) < 10), ::thing::c(t) => constraint (::t.0 == 33); constraint (::t.1 != 44); true };
//     constraint (::no_base_addr == ::maybe_addr::no_addr);
//     constraint (::a_base_addr == ::maybe_addr::addr(0x1111111111111111111111111111111111111111111111111111111111111111));
//     constraint (::actual_addr == match ::no_base_addr { ::maybe_addr::no_addr => 0x0000000000000000000000000000000000000000000000000000000000000000, ::maybe_addr::addr(a) => ::a });
//     match ::x {
//         ::thing::a(b) => {
//         }
//         ::thing::c(t) => {
//             constraint ((::t.0 * ::t.1) == 66)
//             constraint (::d == (::t.0 - ::t.1))
//         }
//         else => {
//             constraint (::d == 55)
//         }
//     }
// }
// >>>

// flattened <<<
// union ::thing = a(bool) | b(int) | c({int, int});
// union ::maybe_addr = no_addr | addr(b256);
// type ::number = int;
// type ::maydr = ::maybe_addr;
//
// predicate ::test(
//     ::x: ::thing,
//     ::d: int,
//     ::no_base_addr: ::maybe_addr,
//     ::a_base_addr: ::maybe_addr,
//     ::actual_addr: b256,
// ) {
//     constraint ((UnTag(::x) == 0) ? UnVal(::x, bool) : ((UnTag(::x) == 1) ? (UnVal(::x, int) > 0) : ((UnVal(::x, {int, int}).0 + UnVal(::x, {int, int}).1) == 11)));
//     constraint (((UnTag(::x) == 1) ? UnVal(::x, int) : 22) > 0);
//     constraint ((UnTag(::x) == 0) ? UnVal(::x, bool) : ((UnTag(::x) == 1) ? ((UnVal(::x, int) * 2) < 10) : true));
//     constraint (::no_base_addr == ::maybe_addr::no_addr);
//     constraint (::a_base_addr == ::maybe_addr::addr(0x1111111111111111111111111111111111111111111111111111111111111111));
//     constraint (::actual_addr == ((UnTag(::no_base_addr) == 0) ? 0x0000000000000000000000000000000000000000000000000000000000000000 : UnVal(::no_base_addr, b256)));
//     constraint ((UnTag(::x) == 0) || (!(UnTag(::x) == 2) || ((UnVal(::x, {int, int}).0 * UnVal(::x, {int, int}).1) == 66)));
//     constraint ((UnTag(::x) == 0) || (!(UnTag(::x) == 2) || (::d == (UnVal(::x, {int, int}).0 - UnVal(::x, {int, int}).1))));
//     constraint ((UnTag(::x) == 0) || ((UnTag(::x) == 2) || (::d == 55)));
//     constraint ((UnTag(::x) == 0) || (!(UnTag(::x) == 1) || (UnVal(::x, int) > 0)));
//     constraint ((UnTag(::x) == 0) || ((UnTag(::x) == 1) || (!(UnTag(::x) == 2) || (UnVal(::x, {int, int}).0 == 33))));
//     constraint ((UnTag(::x) == 0) || ((UnTag(::x) == 1) || (!(UnTag(::x) == 2) || (UnVal(::x, {int, int}).1 != 44))));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
