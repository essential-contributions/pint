union number = one(bool) | two(int) | three(int[3]);

// Everything is called `n` deliberately and are bound individually.

predicate test {
    var n: number;
    constraint 0 <= match n {
        number::one(n) => n ? 11 : 22,
        number::two(n) => n * n,
        number::three(n) => n[0],
    };
}

predicate decl_test {
    var n: number;
    match n {
        number::one(n) => {
            constraint 0 <= (n ? 11 : 22);
        }
        number::two(n) => {
            constraint 0 <= n * n;
        }
        number::three(n) => {
            constraint 0 <= n[0];
        }
    }
}

// parsed <<<
// union ::number = one(bool) | two(int) | three(int[3]);
//
// predicate ::test {
//     var ::n: ::number;
//     constraint (0 <= match ::n { ::number::one(n) => (::n ? 11 : 22), ::number::two(n) => (::n * ::n), ::number::three(n) => ::n[0] });
// }
//
// predicate ::decl_test {
//     var ::n: ::number;
//     match ::n {
//         ::number::one(n) => {
//             constraint (0 <= (::n ? 11 : 22))
//         }
//         ::number::two(n) => {
//             constraint (0 <= (::n * ::n))
//         }
//         ::number::three(n) => {
//             constraint (0 <= ::n[0])
//         }
//     }
// }
// >>>

// flattened <<<
// union ::number = one(bool) | two(int) | three(int[3]);
//
// predicate ::test {
//     var ::n: ::number;
//     constraint (0 <= (UnTag(::n) == ::number::one ? (UnVal(::n, bool) ? 11 : 22) : (UnTag(::n) == ::number::two ? (UnVal(::n, int) * UnVal(::n, int)) : UnVal(::n, int[3])[0])));
//     constraint __eq_set(__mut_keys(), {0});
// }
//
// predicate ::decl_test {
//     var ::n: ::number;
//     constraint (!UnTag(::n) == ::number::one || (0 <= (UnVal(::n, bool) ? 11 : 22)));
//     constraint (UnTag(::n) == ::number::one || (!UnTag(::n) == ::number::two || (0 <= (UnVal(::n, int) * UnVal(::n, int)))));
//     constraint (UnTag(::n) == ::number::one || (UnTag(::n) == ::number::two || (!UnTag(::n) == ::number::three || (0 <= UnVal(::n, int[3])[0]))));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
