union count = nul | one | many(int);

predicate test(x: count) {
    constraint match x {
        count::one => true,
    };
}

predicate decl_test(x: count) {
    match x {
        count::one => {
            constraint true;
        }
    }
}

// parsed <<<
// union ::count = nul | one | many(int);
// 
// predicate ::test(
//     ::x: ::count,
// ) {
//     constraint match ::x { ::count::one => true };
// }
// 
// predicate ::decl_test(
//     ::x: ::count,
// ) {
//     match ::x {
//         ::count::one => {
//             constraint true
//         }
//     }
// }
// >>>

// typecheck_failure <<<
// not all match variants are covered
// @80..123: not all variants for union `::count` are covered by match
// branches and/or bindings are required for variants `count::nul` and `count::many`
// not all match variants are covered
// @164..242: not all variants for union `::count` are covered by match
// branches and/or bindings are required for variants `count::nul` and `count::many`
// constraint expression type error
// @80..123: expecting type `bool`
// >>>
