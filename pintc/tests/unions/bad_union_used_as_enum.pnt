union U = A(int) | B;

predicate Foo(a: int[U]) {
    constraint U::B as int == 1;
}

// parsed <<<
// union ::U = A(int) | B;
// 
// predicate ::Foo(
//     ::a: int[::U],
// ) {
//     constraint (::U::B as int == 1);
// }
// >>>

// typecheck_failure <<<
// invalid cast
// @65..76: illegal cast from `::U`
// casts may only be made from `bool`s,`int`s, and enumeration unions to `int`, or from `int`s, `real`s, and enumeration unions to `real`
// invalid array range type ::U
// @44..45: array access must be of type `int` or enumeration `union`
// found range type `::U`
// >>>
