union value = nul | scalar(int);

predicate test(x: value) {
    constraint match x {
        value::nul => false,
        value::scalar(n) => n > 0,
        value::nul => true,
    };
}

predicate decl_test(x: value) {
    match x {
        value::nul => {
            constraint false;
        }
        value::scalar(n) => {
            constraint n > 0;
        }
        value::nul => {
            constraint true;
        }
    }
}

// parsed <<<
// union ::value = nul | scalar(int);
// 
// predicate ::test(
//     ::x: ::value,
// ) {
//     constraint match ::x { ::value::nul => false, ::value::scalar(n) => (::n > 0), ::value::nul => true };
// }
// 
// predicate ::decl_test(
//     ::x: ::value,
// ) {
//     match ::x {
//         ::value::nul => {
//             constraint false
//         }
//         ::value::scalar(n) => {
//             constraint (::n > 0)
//         }
//         ::value::nul => {
//             constraint true
//         }
//     }
// }
// >>>

// typecheck_failure <<<
// re-used match variant
// @158..168: match variant `::value::nul` has previously been bound
// re-used match variant
// @376..386: match variant `::value::nul` has previously been bound
// constraint expression type error
// @76..183: expecting type `bool`
// >>>
