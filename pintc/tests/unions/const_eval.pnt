union node = nope | sure({ int, bool });

const a = node::sure({ 11, false });
const b: bool[match a {
    node::nope => 22,
    node::sure(x) => x.0,
}] = [true, true, false, true, false, false, false, true, false, false, false];

predicate test(y: bool) {
    constraint y == b[2];
}

// parsed <<<
// const ::a = ::node::sure({11, false});
// const ::b: bool[match ::a { ::node::nope => 22, ::node::sure(x) => ::x.0 }] = [true, true, false, true, false, false, false, true, false, false, false];
// union ::node = nope | sure({int, bool});
//
// predicate ::test(
//     ::y: bool,
// ) {
//     constraint (::y == ::b[2]);
// }
// >>>

// flattened <<<
// const ::a: ::node = ::node::sure({11, false});
// const ::b: bool[11] = [true, true, false, true, false, false, false, true, false, false, false];
// union ::node = nope | sure({int, bool});
//
// predicate ::test(
//     ::y: bool,
// ) {
//     constraint (::y == false);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
