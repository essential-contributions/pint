use module::__x;

storage {
    __y: int,
}
interface __MyInterface {
    storage {}
}
type T = { __x: int, y: bool };

enum ___E = A | B;
type __MyType = int;

predicate test {
    var __x = 5;
    constraint __x == 0;
}

// parse_failure <<<
// expected `an identifier`, `macro_name`, `self`, or `{`, found `__x`
// @12..15: expected `an identifier`, `macro_name`, `self`, or `{`
// >>> 
