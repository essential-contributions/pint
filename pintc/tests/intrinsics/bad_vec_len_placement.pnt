storage {
    v: int[],
}

predicate test(v_len: int) {
    constraint v_len == __vec_len(storage::v);
    constraint __vec_len(storage::v) == 0;
}

// parsed <<<
// storage {
//     v: int[],
// }
//
// predicate ::test(
//     ::v_len: int,
// ) {
//     constraint (::v_len == __vec_len(storage::v));
//     constraint (__vec_len(storage::v) == 0);
// }
// >>>

// typecheck_failure <<<
// invalid position for accessing storage
// @118..139: storage cannot be accessed in this position
// storage can only be accessed in the initializer of a `let` declaration
// invalid position for accessing storage
// @80..101: storage cannot be accessed in this position
// storage can only be accessed in the initializer of a `let` declaration
// >>>
