// <disabled>
storage {
    v: int[],
}

predicate test(v_len: int) {
    constraint v_len == __vec_len(storage::v)!;
    constraint __vec_len(storage::v)! == 0;
}

// parsed <<<
// storage {
//     v: int[],
// }
//
// predicate ::test(
//     ::v_len: int,
// ) {
//     constraint (::v_len == __vec_len(storage::v));
//     constraint (__vec_len(storage::v) == 0);
// }
// >>>

// flattened <<<
// storage {
//     v: int[],
// }
//
// predicate ::test(
//     ::v_len: int,
// ) {
//     constraint (::v_len == __pre_state({0}));
//     constraint (__pre_state({0}) == 0);
// }
// >>>
