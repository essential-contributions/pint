predicate Foo() {

}

predicate Bar(
    a: b256,
    b: b256,
    c: b256,
    d: b256,
) {
    // This is fine
    constraint a == __address_of("::Foo");

    // Self referential `__address_of`
    constraint b == __address_of("::Bar");

    // Missing predicate
    constraint c == __address_of("::Missing");

    // This should emit a type checking error for the first argument as well as an "incorrect number
    // of arguments" error.
    constraint d == __address_of(false, 42);
}

// parsed <<<
// predicate ::Foo(
// ) {
// }
// 
// predicate ::Bar(
//     ::a: b256,
//     ::b: b256,
//     ::c: b256,
//     ::d: b256,
// ) {
//     constraint (::a == __address_of("::Foo"));
//     constraint (::b == __address_of("::Bar"));
//     constraint (::c == __address_of("::Missing"));
//     constraint (::d == __address_of(false, 42));
// }
// >>>

// typecheck_failure <<<
// intrinsic `__address_of` cannot refer to the predicate it's used in
// @229..236: this argument refers to prediate `::Bar` in which this intrinsic is used
// predicate `::Missing` not found
// @298..309: argument to `__address_of` must be a valid predicate name
// incorrect intrinsic argument
// @475..480: expected `string`, found `bool`
// @462..474: arguments to this intrinsic are incorrect`
// this intrinsic takes 1 argument but 2 arguments were supplied
// @462..485: unexpected number of arguments here
// >>>
