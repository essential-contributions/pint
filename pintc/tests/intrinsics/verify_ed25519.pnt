predicate test(
    hash0: b256,
    hash1: b256,
    hash2: b256,
    sig: { b256, b256 },
    verify_ed25519_0: bool,
    x: int,
    verify_ed25519_1: bool,
    verify_ed25519_2: bool,
    t: { int, bool, { b256, b256 } },
    verify_ed25519_3: bool,
    verify_ed25519_4: bool,
    y: int,
    verify_ed25519_5: bool,
    a: int[2][3][4],
    verify_ed25519_6: bool,
    verify_ed25519_7: bool,
    verify_ed25519_8: bool,
    verify_ed25519_9: bool,
) {
    constraint sig == { hash0, hash1 };

    constraint verify_ed25519_0 == __verify_ed25519(69, { hash0, hash1 }, hash2);

    constraint verify_ed25519_1 == __verify_ed25519(x, sig, hash2);

    constraint verify_ed25519_2 == __verify_ed25519({ 69, { x, x } }, sig, hash2);

    constraint verify_ed25519_3 == __verify_ed25519(t, sig, hash2);
    constraint verify_ed25519_4 == __verify_ed25519(t.2, sig, hash2);

    constraint verify_ed25519_5 == __verify_ed25519([1, 2, 3, x, y], sig, hash2);

    constraint verify_ed25519_6 == __verify_ed25519(a, sig, hash2);
    constraint verify_ed25519_7 == __verify_ed25519(a[1], sig, hash2);
    constraint verify_ed25519_8 == __verify_ed25519(a[1][2], sig, hash2);
    constraint verify_ed25519_9 == __verify_ed25519(a[1][2][3], sig, hash2);
}

// parsed <<<
// predicate ::test(
//     ::hash0: b256,
//     ::hash1: b256,
//     ::hash2: b256,
//     ::sig: {b256, b256},
//     ::verify_ed25519_0: bool,
//     ::x: int,
//     ::verify_ed25519_1: bool,
//     ::verify_ed25519_2: bool,
//     ::t: {int, bool, {b256, b256}},
//     ::verify_ed25519_3: bool,
//     ::verify_ed25519_4: bool,
//     ::y: int,
//     ::verify_ed25519_5: bool,
//     ::a: int[4][3][2],
//     ::verify_ed25519_6: bool,
//     ::verify_ed25519_7: bool,
//     ::verify_ed25519_8: bool,
//     ::verify_ed25519_9: bool,
// ) {
//     constraint (::sig == {::hash0, ::hash1});
//     constraint (::verify_ed25519_0 == __verify_ed25519(69, {::hash0, ::hash1}, ::hash2));
//     constraint (::verify_ed25519_1 == __verify_ed25519(::x, ::sig, ::hash2));
//     constraint (::verify_ed25519_2 == __verify_ed25519({69, {::x, ::x}}, ::sig, ::hash2));
//     constraint (::verify_ed25519_3 == __verify_ed25519(::t, ::sig, ::hash2));
//     constraint (::verify_ed25519_4 == __verify_ed25519(::t.2, ::sig, ::hash2));
//     constraint (::verify_ed25519_5 == __verify_ed25519([1, 2, 3, ::x, ::y], ::sig, ::hash2));
//     constraint (::verify_ed25519_6 == __verify_ed25519(::a, ::sig, ::hash2));
//     constraint (::verify_ed25519_7 == __verify_ed25519(::a[1], ::sig, ::hash2));
//     constraint (::verify_ed25519_8 == __verify_ed25519(::a[1][2], ::sig, ::hash2));
//     constraint (::verify_ed25519_9 == __verify_ed25519(::a[1][2][3], ::sig, ::hash2));
// }
// >>>

// flattened <<<
// predicate ::test(
//     ::hash0: b256,
//     ::hash1: b256,
//     ::hash2: b256,
//     ::sig: {b256, b256},
//     ::verify_ed25519_0: bool,
//     ::x: int,
//     ::verify_ed25519_1: bool,
//     ::verify_ed25519_2: bool,
//     ::t: {int, bool, {b256, b256}},
//     ::verify_ed25519_3: bool,
//     ::verify_ed25519_4: bool,
//     ::y: int,
//     ::verify_ed25519_5: bool,
//     ::a: int[4][3][2],
//     ::verify_ed25519_6: bool,
//     ::verify_ed25519_7: bool,
//     ::verify_ed25519_8: bool,
//     ::verify_ed25519_9: bool,
// ) {
//     constraint (::sig == {::hash0, ::hash1});
//     constraint (::verify_ed25519_0 == __verify_ed25519(69, {::hash0, ::hash1}, ::hash2));
//     constraint (::verify_ed25519_1 == __verify_ed25519(::x, ::sig, ::hash2));
//     constraint (::verify_ed25519_2 == __verify_ed25519({69, {::x, ::x}}, ::sig, ::hash2));
//     constraint (::verify_ed25519_3 == __verify_ed25519(::t, ::sig, ::hash2));
//     constraint (::verify_ed25519_4 == __verify_ed25519(::t.2, ::sig, ::hash2));
//     constraint (::verify_ed25519_5 == __verify_ed25519([1, 2, 3, ::x, ::y], ::sig, ::hash2));
//     constraint (::verify_ed25519_6 == __verify_ed25519(::a, ::sig, ::hash2));
//     constraint (::verify_ed25519_7 == __verify_ed25519(::a[1], ::sig, ::hash2));
//     constraint (::verify_ed25519_8 == __verify_ed25519(::a[1][2], ::sig, ::hash2));
//     constraint (::verify_ed25519_9 == __verify_ed25519(::a[1][2][3], ::sig, ::hash2));
// }
// >>>
