storage {
    x: int,
    y: b256,
    z: ( int => int ),
    w: { int, int },
}

predicate test {
    state x_len = __vec_len(storage::x);
    state y_len = __vec_len(storage::y);
    state z_len = __vec_len(storage::z);
    state w_len = __vec_len(storage::w);

    var p: int;
    state p_len = __vec_len(p);
    state imm_len = __vec_len(0);
}

// parsed <<<
// storage {
//     x: int,
//     y: b256,
//     z: ( int => int ),
//     w: {int, int},
// }
// 
// predicate ::test {
//     var ::p: int;
//     state ::x_len = __vec_len(storage::x);
//     state ::y_len = __vec_len(storage::y);
//     state ::z_len = __vec_len(storage::z);
//     state ::w_len = __vec_len(storage::w);
//     state ::p_len = __vec_len(::p);
//     state ::imm_len = __vec_len(0);
// }
// >>>

// typecheck_failure <<<
// incorrect intrinsic argument
// @127..137: expected `_[]`, found `int`
// @117..126: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @168..178: expected `_[]`, found `b256`
// @158..167: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @209..219: expected `_[]`, found `( int => int )`
// @199..208: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @250..260: expected `_[]`, found `{int, int}`
// @240..249: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @308..309: expected `_[]`, found `int`
// @298..307: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @342..343: expected `_[]`, found `int`
// @332..341: arguments to this intrinsic are incorrect`
// >>>
