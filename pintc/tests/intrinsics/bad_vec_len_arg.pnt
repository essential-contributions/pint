storage {
    x: int,
    y: b256,
    z: ( int => int ),
    w: { int, int },
}

predicate test(p: int) {
    let x_len = __vec_len(storage::x);
    let y_len = __vec_len(storage::y);
    let z_len = __vec_len(storage::z);
    let w_len = __vec_len(storage::w);

    let p_len = __vec_len(p);
    let imm_len = __vec_len(0);
}

// parsed <<<
// storage {
//     x: int,
//     y: b256,
//     z: ( int => int ),
//     w: {int, int},
// }
//
// predicate ::test(
//     ::p: int,
// ) {
//     let ::x_len = __vec_len(storage::x);
//     let ::y_len = __vec_len(storage::y);
//     let ::z_len = __vec_len(storage::z);
//     let ::w_len = __vec_len(storage::w);
//     let ::p_len = __vec_len(::p);
//     let ::imm_len = __vec_len(0);
// }
// >>>

// typecheck_failure <<<
// incorrect intrinsic argument
// @133..143: expected `_[]`, found `int`
// @123..132: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @172..182: expected `_[]`, found `b256`
// @162..171: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @211..221: expected `_[]`, found `( int => int )`
// @201..210: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @250..260: expected `_[]`, found `{int, int}`
// @240..249: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @290..291: expected `_[]`, found `int`
// @280..289: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @322..323: expected `_[]`, found `int`
// @312..321: arguments to this intrinsic are incorrect`
// >>>
