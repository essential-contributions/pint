storage {
    x: int,
    y: b256,
    z: ( int => int ),
    w: { int, int },
}

predicate test(p: int) {
    state x_len = __vec_len(storage::x);
    state y_len = __vec_len(storage::y);
    state z_len = __vec_len(storage::z);
    state w_len = __vec_len(storage::w);

    state p_len = __vec_len(p);
    state imm_len = __vec_len(0);
}

// parsed <<<
// storage {
//     x: int,
//     y: b256,
//     z: ( int => int ),
//     w: {int, int},
// }
// 
// predicate ::test(
//     ::p: int,
// ) {
//     state ::x_len = __vec_len(storage::x);
//     state ::y_len = __vec_len(storage::y);
//     state ::z_len = __vec_len(storage::z);
//     state ::w_len = __vec_len(storage::w);
//     state ::p_len = __vec_len(::p);
//     state ::imm_len = __vec_len(0);
// }
// >>>

// typecheck_failure <<<
// incorrect intrinsic argument
// @135..145: expected `_[]`, found `int`
// @125..134: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @176..186: expected `_[]`, found `b256`
// @166..175: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @217..227: expected `_[]`, found `( int => int )`
// @207..216: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @258..268: expected `_[]`, found `{int, int}`
// @248..257: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @300..301: expected `_[]`, found `int`
// @290..299: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @334..335: expected `_[]`, found `int`
// @324..333: arguments to this intrinsic are incorrect`
// >>>
