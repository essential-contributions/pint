union MyUnion = A | B;

storage {
    a: int,
    b: bool,
    c: b256,
    d: { int, bool },
}

predicate test(
    a_len: int,
    b_len: int,
    c_len: int,
    d_len: int,
) {
    state a = storage::a;
    state b = storage::b;
    state c = storage::c;
    state d = storage::d;

    constraint a_len == __size_of(a);
    constraint b_len == __size_of(b);
    constraint c_len == __size_of(c);
    constraint d_len == __size_of(d);
}

// parsed <<<
// union ::MyUnion = A | B;
// storage {
//     a: int,
//     b: bool,
//     c: b256,
//     d: {int, bool},
// }
// 
// predicate ::test(
//     ::a_len: int,
//     ::b_len: int,
//     ::c_len: int,
//     ::d_len: int,
// ) {
//     state ::a = storage::a;
//     state ::b = storage::b;
//     state ::c = storage::c;
//     state ::d = storage::d;
//     constraint (::a_len == __size_of(::a));
//     constraint (::b_len == __size_of(::b));
//     constraint (::c_len == __size_of(::c));
//     constraint (::d_len == __size_of(::d));
// }
// >>>

// flattened <<<
// union ::MyUnion = A | B;
// storage {
//     a: int,
//     b: bool,
//     c: b256,
//     d: {int, bool},
// }
// 
// predicate ::test(
//     ::a_len: int,
//     ::b_len: int,
//     ::c_len: int,
//     ::d_len: int,
// ) {
//     state ::a: int = __storage_get({0});
//     state ::b: bool = __storage_get({1});
//     state ::c: b256 = __storage_get({2});
//     state ::d: {int, bool} = __storage_get({3, 0});
//     constraint (::a_len == __size_of(::a));
//     constraint (::b_len == __size_of(::b));
//     constraint (::c_len == __size_of(::c));
//     constraint (::d_len == __size_of(::d));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
