predicate test(
    sha256_0: b256,
    x: int,
    sha256_1: b256,
    sha256_2: b256,
    t: { int, bool, { b256, b256 } },
    sha256_3: b256,
    sha256_4: b256,
    y: int,
    sha256_5: b256,
    a: int[2][3][4],
    sha256_6: b256,
    sha256_7: b256,
    sha256_8: b256,
    sha256_9: b256,

) {
    constraint sha256_0 == __sha256(69);

    constraint sha256_1 == __sha256(x);

    constraint sha256_2 == __sha256({ 69, { x, x } });

    constraint sha256_3 == __sha256(t);
    constraint sha256_4 == __sha256(t.2);

    constraint sha256_5 == __sha256([1, 2, 3, x, y]);

    constraint sha256_6 == __sha256(a);
    constraint sha256_7 == __sha256(a[1]);
    constraint sha256_8 == __sha256(a[1][2]);
    constraint sha256_9 == __sha256(a[1][2][3]);
}

// parsed <<<
// predicate ::test(
//     ::sha256_0: b256,
//     ::x: int,
//     ::sha256_1: b256,
//     ::sha256_2: b256,
//     ::t: {int, bool, {b256, b256}},
//     ::sha256_3: b256,
//     ::sha256_4: b256,
//     ::y: int,
//     ::sha256_5: b256,
//     ::a: int[4][3][2],
//     ::sha256_6: b256,
//     ::sha256_7: b256,
//     ::sha256_8: b256,
//     ::sha256_9: b256,
// ) {
//     constraint (::sha256_0 == __sha256(69));
//     constraint (::sha256_1 == __sha256(::x));
//     constraint (::sha256_2 == __sha256({69, {::x, ::x}}));
//     constraint (::sha256_3 == __sha256(::t));
//     constraint (::sha256_4 == __sha256(::t.2));
//     constraint (::sha256_5 == __sha256([1, 2, 3, ::x, ::y]));
//     constraint (::sha256_6 == __sha256(::a));
//     constraint (::sha256_7 == __sha256(::a[1]));
//     constraint (::sha256_8 == __sha256(::a[1][2]));
//     constraint (::sha256_9 == __sha256(::a[1][2][3]));
// }
// >>>

// flattened <<<
// predicate ::test(
//     ::sha256_0: b256,
//     ::x: int,
//     ::sha256_1: b256,
//     ::sha256_2: b256,
//     ::t: {int, bool, {b256, b256}},
//     ::sha256_3: b256,
//     ::sha256_4: b256,
//     ::y: int,
//     ::sha256_5: b256,
//     ::a: int[4][3][2],
//     ::sha256_6: b256,
//     ::sha256_7: b256,
//     ::sha256_8: b256,
//     ::sha256_9: b256,
// ) {
//     constraint (::sha256_0 == __sha256(69));
//     constraint (::sha256_1 == __sha256(::x));
//     constraint (::sha256_2 == __sha256({69, {::x, ::x}}));
//     constraint (::sha256_3 == __sha256(::t));
//     constraint (::sha256_4 == __sha256(::t.2));
//     constraint (::sha256_5 == __sha256([1, 2, 3, ::x, ::y]));
//     constraint (::sha256_6 == __sha256(::a));
//     constraint (::sha256_7 == __sha256(::a[1]));
//     constraint (::sha256_8 == __sha256(::a[1][2]));
//     constraint (::sha256_9 == __sha256(::a[1][2][3]));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
