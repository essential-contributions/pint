predicate test(
    hash0: b256,
    hash1: b256,
    hash2: b256,
    sig_1: { b256, b256, int },
    recover_secp256k1_0: { b256, int },
    recover_secp256k1_1: { b256, int },
) {
    constraint sig_1 == { hash1, hash2, 69 };

    constraint recover_secp256k1_0 == __recover_secp256k1(hash0, { hash1, hash2, 69 });

    constraint recover_secp256k1_1 == __recover_secp256k1(hash0, sig_1);
}

// parsed <<<
// predicate ::test(
//     ::hash0: b256,
//     ::hash1: b256,
//     ::hash2: b256,
//     ::sig_1: {b256, b256, int},
//     ::recover_secp256k1_0: {b256, int},
//     ::recover_secp256k1_1: {b256, int},
// ) {
//     constraint (::sig_1 == {::hash1, ::hash2, 69});
//     constraint (::recover_secp256k1_0 == __recover_secp256k1(::hash0, {::hash1, ::hash2, 69}));
//     constraint (::recover_secp256k1_1 == __recover_secp256k1(::hash0, ::sig_1));
// }
// >>>

// flattened <<<
// predicate ::test(
//     ::hash0: b256,
//     ::hash1: b256,
//     ::hash2: b256,
//     ::sig_1: {b256, b256, int},
//     ::recover_secp256k1_0: {b256, int},
//     ::recover_secp256k1_1: {b256, int},
// ) {
//     constraint (::sig_1 == {::hash1, ::hash2, 69});
//     constraint (::recover_secp256k1_0 == __recover_secp256k1(::hash0, {::hash1, ::hash2, 69}));
//     constraint (::recover_secp256k1_1 == __recover_secp256k1(::hash0, ::sig_1));
// }
// >>>
