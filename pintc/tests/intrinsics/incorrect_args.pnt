storage {
    x: int,
}

predicate test {
    var hash0: b256;

    // All these intrinsic call have something wrong with them:
    // * Either an argument has the wrong type
    // * Or an incorrect number of arguments is supplied

    var mut_keys_len = __mut_keys_len(42);

    var mut_keys_contains_0: bool = __mut_keys_contains(5);
    var mut_keys_contains_1: bool = __mut_keys_contains();
    var mut_keys_contains_2: bool = __mut_keys_contains(hash0, hash0);

    var this_address = __this_address(42);

    var this_set_address = __this_set_address(42);

    var this_pathway = __this_pathway(42);

    var sha256_0 = __sha256();
    var sha256_1 = __sha256(1, 1);

    var verify_ed25519_0: bool = __verify_ed25519(69, { hash0, hash0 }, 5);
    var verify_ed25519_1: bool = __verify_ed25519(69, hash0, hash0);
    var verify_ed25519_3: bool = __verify_ed25519();
    var verify_ed25519_2: bool = __verify_ed25519(69, { hash0, hash0 }, hash0, 69);

    var recover_secp256k1_0: { b256, int } = __recover_secp256k1(42, { hash0, hash0, 69 });
    var recover_secp256k1_1: { b256, int } = __recover_secp256k1(hash0, { hash0, hash0 });
    var recover_secp256k1_2: { b256, int } = __recover_secp256k1(hash0);
    var recover_secp256k1_3: { b256, int } = __recover_secp256k1(hash0, {hash0, hash0, 69}, hash0);

    state x = storage::x;

    var bad_state_len_1 = __state_len(x, 0);
    var bad_state_len_2 = __state_len();
}

// parsed <<<
// storage {
//     x: int,
// }
//
// predicate ::test {
//     var ::hash0: b256;
//     var ::mut_keys_len;
//     var ::mut_keys_contains_0: bool;
//     var ::mut_keys_contains_1: bool;
//     var ::mut_keys_contains_2: bool;
//     var ::this_address;
//     var ::this_set_address;
//     var ::this_pathway;
//     var ::sha256_0;
//     var ::sha256_1;
//     var ::verify_ed25519_0: bool;
//     var ::verify_ed25519_1: bool;
//     var ::verify_ed25519_3: bool;
//     var ::verify_ed25519_2: bool;
//     var ::recover_secp256k1_0: {b256, int};
//     var ::recover_secp256k1_1: {b256, int};
//     var ::recover_secp256k1_2: {b256, int};
//     var ::recover_secp256k1_3: {b256, int};
//     var ::bad_state_len_1;
//     var ::bad_state_len_2;
//     state ::x = storage::x;
//     constraint (::mut_keys_len == __mut_keys_len(42));
//     constraint (::mut_keys_contains_0 == __mut_keys_contains(5));
//     constraint (::mut_keys_contains_1 == __mut_keys_contains());
//     constraint (::mut_keys_contains_2 == __mut_keys_contains(::hash0, ::hash0));
//     constraint (::this_address == __this_address(42));
//     constraint (::this_set_address == __this_set_address(42));
//     constraint (::this_pathway == __this_pathway(42));
//     constraint (::sha256_0 == __sha256());
//     constraint (::sha256_1 == __sha256(1, 1));
//     constraint (::verify_ed25519_0 == __verify_ed25519(69, {::hash0, ::hash0}, 5));
//     constraint (::verify_ed25519_1 == __verify_ed25519(69, ::hash0, ::hash0));
//     constraint (::verify_ed25519_3 == __verify_ed25519());
//     constraint (::verify_ed25519_2 == __verify_ed25519(69, {::hash0, ::hash0}, ::hash0, 69));
//     constraint (::recover_secp256k1_0 == __recover_secp256k1(42, {::hash0, ::hash0, 69}));
//     constraint (::recover_secp256k1_1 == __recover_secp256k1(::hash0, {::hash0, ::hash0}));
//     constraint (::recover_secp256k1_2 == __recover_secp256k1(::hash0));
//     constraint (::recover_secp256k1_3 == __recover_secp256k1(::hash0, {::hash0, ::hash0, 69}, ::hash0));
//     constraint (::bad_state_len_1 == __state_len(::x, 0));
//     constraint (::bad_state_len_2 == __state_len());
// }
// >>>

// typecheck_failure <<<
// this intrinsic takes 0 arguments but 1 argument was supplied
// @256..274: unexpected number of arguments here
// mismatched types
// @333..334: expected `int[..]`, found `int`
// @313..332: arguments to this intrinsic are incorrect`
// this intrinsic takes 1 argument but 0 arguments were supplied
// @373..394: unexpected number of arguments here
// this intrinsic takes 1 argument but 2 arguments were supplied
// @432..465: unexpected number of arguments here
// this intrinsic takes 0 arguments but 1 argument was supplied
// @491..509: unexpected number of arguments here
// this intrinsic takes 0 arguments but 1 argument was supplied
// @539..561: unexpected number of arguments here
// this intrinsic takes 0 arguments but 1 argument was supplied
// @587..605: unexpected number of arguments here
// this intrinsic takes 1 argument but 0 arguments were supplied
// @627..637: unexpected number of arguments here
// this intrinsic takes 1 argument but 2 arguments were supplied
// @658..672: unexpected number of arguments here
// mismatched types
// @747..748: expected `b256`, found `int`
// @708..724: arguments to this intrinsic are incorrect`
// mismatched types
// @805..810: expected `{ b256, b256 }`, found `b256`
// @784..800: arguments to this intrinsic are incorrect`
// this intrinsic takes 3 arguments but 0 arguments were supplied
// @853..871: unexpected number of arguments here
// this intrinsic takes 3 arguments but 4 arguments were supplied
// @906..955: unexpected number of arguments here
// mismatched types
// @1023..1025: expected `b256`, found `int`
// @1003..1022: arguments to this intrinsic are incorrect`
// mismatched types
// @1122..1138: expected `{ b256, b256, int }`, found `{b256, b256}`
// @1095..1114: arguments to this intrinsic are incorrect`
// this intrinsic takes 2 arguments but 1 argument was supplied
// @1186..1212: unexpected number of arguments here
// this intrinsic takes 2 arguments but 3 arguments were supplied
// @1259..1312: unexpected number of arguments here
// this intrinsic takes 1 argument but 2 arguments were supplied
// @1368..1385: unexpected number of arguments here
// this intrinsic takes 1 argument but 0 arguments were supplied
// @1413..1426: unexpected number of arguments here
// variable initialization type error
// @313..335: variable initializer has unknown type
// @306..310: expecting type `bool`
// variable initialization type error
// @373..394: variable initializer has unknown type
// @366..370: expecting type `bool`
// variable initialization type error
// @432..465: variable initializer has unknown type
// @425..429: expecting type `bool`
// variable initialization type error
// @708..749: variable initializer has unknown type
// @701..705: expecting type `bool`
// variable initialization type error
// @784..818: variable initializer has unknown type
// @777..781: expecting type `bool`
// variable initialization type error
// @853..871: variable initializer has unknown type
// @846..850: expecting type `bool`
// variable initialization type error
// @906..955: variable initializer has unknown type
// @899..903: expecting type `bool`
// variable initialization type error
// @1003..1048: variable initializer has unknown type
// @987..1000: expecting type `{b256, int}`
// variable initialization type error
// @1095..1139: variable initializer has unknown type
// @1079..1092: expecting type `{b256, int}`
// variable initialization type error
// @1186..1212: variable initializer has unknown type
// @1170..1183: expecting type `{b256, int}`
// variable initialization type error
// @1259..1312: variable initializer has unknown type
// @1243..1256: expecting type `{b256, int}`
// constraint expression type error
// @237..274: constraint expression has unknown type
// @237..274: expecting type `bool`
// constraint expression type error
// @281..335: constraint expression has unknown type
// @281..335: expecting type `bool`
// constraint expression type error
// @341..394: constraint expression has unknown type
// @341..394: expecting type `bool`
// constraint expression type error
// @400..465: constraint expression has unknown type
// @400..465: expecting type `bool`
// constraint expression type error
// @472..509: constraint expression has unknown type
// @472..509: expecting type `bool`
// constraint expression type error
// @516..561: constraint expression has unknown type
// @516..561: expecting type `bool`
// constraint expression type error
// @568..605: constraint expression has unknown type
// @568..605: expecting type `bool`
// constraint expression type error
// @612..637: constraint expression has unknown type
// @612..637: expecting type `bool`
// constraint expression type error
// @643..672: constraint expression has unknown type
// @643..672: expecting type `bool`
// constraint expression type error
// @679..749: constraint expression has unknown type
// @679..749: expecting type `bool`
// constraint expression type error
// @755..818: constraint expression has unknown type
// @755..818: expecting type `bool`
// constraint expression type error
// @824..871: constraint expression has unknown type
// @824..871: expecting type `bool`
// constraint expression type error
// @877..955: constraint expression has unknown type
// @877..955: expecting type `bool`
// constraint expression type error
// @962..1048: constraint expression has unknown type
// @962..1048: expecting type `bool`
// constraint expression type error
// @1054..1139: constraint expression has unknown type
// @1054..1139: expecting type `bool`
// constraint expression type error
// @1145..1212: constraint expression has unknown type
// @1145..1212: expecting type `bool`
// constraint expression type error
// @1218..1312: constraint expression has unknown type
// @1218..1312: expecting type `bool`
// >>>