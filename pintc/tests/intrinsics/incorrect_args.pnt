storage {
    x: int,
}

predicate test(
    hash0: b256,
    this_address: b256,
    this_contract_address: b256,
    sha256_0: b256,
    sha256_1: b256,
    verify_ed25519_0: bool,
    verify_ed25519_1: bool,
    verify_ed25519_3: bool,
    verify_ed25519_2: bool,
    recover_secp256k1_0: { b256, int },
    recover_secp256k1_1: { b256, int },
    recover_secp256k1_2: { b256, int },
    recover_secp256k1_3: { b256, int },
    bad_size_of_1: int,
    bad_size_of_2: int,
) {
    // All these intrinsic call have something wrong with them:
    // * Either an argument has the wrong type
    // * Or an incorrect number of arguments is supplied

    constraint this_address == __this_address(42);

    constraint this_contract_address == __this_contract_address(42);

    constraint sha256_0 == __sha256();
    constraint sha256_1 == __sha256(1, 1);

    constraint verify_ed25519_0 == __verify_ed25519(69, { hash0, hash0 }, 5);
    constraint verify_ed25519_1 == __verify_ed25519(69, hash0, hash0);
    constraint verify_ed25519_3 == __verify_ed25519();
    constraint verify_ed25519_2 == __verify_ed25519(69, { hash0, hash0 }, hash0, 69);

    constraint recover_secp256k1_0 == __recover_secp256k1(42, { hash0, hash0, 69 });
    constraint recover_secp256k1_1 == __recover_secp256k1(hash0, { hash0, hash0 });
    constraint recover_secp256k1_2 == __recover_secp256k1(hash0);
    constraint recover_secp256k1_3 == __recover_secp256k1(hash0, {hash0, hash0, 69}, hash0);

    state x = storage::x;

    constraint bad_size_of_1 == __size_of(x, 0);
    constraint bad_size_of_2 == __size_of();
}

// parsed <<<
// storage {
//     x: int,
// }
// 
// predicate ::test(
//     ::hash0: b256,
//     ::this_address: b256,
//     ::this_contract_address: b256,
//     ::sha256_0: b256,
//     ::sha256_1: b256,
//     ::verify_ed25519_0: bool,
//     ::verify_ed25519_1: bool,
//     ::verify_ed25519_3: bool,
//     ::verify_ed25519_2: bool,
//     ::recover_secp256k1_0: {b256, int},
//     ::recover_secp256k1_1: {b256, int},
//     ::recover_secp256k1_2: {b256, int},
//     ::recover_secp256k1_3: {b256, int},
//     ::bad_size_of_1: int,
//     ::bad_size_of_2: int,
// ) {
//     state ::x = storage::x;
//     constraint (::this_address == __this_address(42));
//     constraint (::this_contract_address == __this_contract_address(42));
//     constraint (::sha256_0 == __sha256());
//     constraint (::sha256_1 == __sha256(1, 1));
//     constraint (::verify_ed25519_0 == __verify_ed25519(69, {::hash0, ::hash0}, 5));
//     constraint (::verify_ed25519_1 == __verify_ed25519(69, ::hash0, ::hash0));
//     constraint (::verify_ed25519_3 == __verify_ed25519());
//     constraint (::verify_ed25519_2 == __verify_ed25519(69, {::hash0, ::hash0}, ::hash0, 69));
//     constraint (::recover_secp256k1_0 == __recover_secp256k1(42, {::hash0, ::hash0, 69}));
//     constraint (::recover_secp256k1_1 == __recover_secp256k1(::hash0, {::hash0, ::hash0}));
//     constraint (::recover_secp256k1_2 == __recover_secp256k1(::hash0));
//     constraint (::recover_secp256k1_3 == __recover_secp256k1(::hash0, {::hash0, ::hash0, 69}, ::hash0));
//     constraint (::bad_size_of_1 == __size_of(::x, 0));
//     constraint (::bad_size_of_2 == __size_of());
// }
// >>>

// typecheck_failure <<<
// this intrinsic takes 0 arguments but 1 argument was supplied
// @679..697: unexpected number of arguments here
// this intrinsic takes 0 arguments but 1 argument was supplied
// @740..767: unexpected number of arguments here
// this intrinsic takes 1 argument but 0 arguments were supplied
// @797..807: unexpected number of arguments here
// this intrinsic takes 1 argument but 2 arguments were supplied
// @836..850: unexpected number of arguments here
// incorrect intrinsic argument
// @927..928: expected `b256`, found `int`
// @888..904: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @987..992: expected `{b256, b256}`, found `b256`
// @966..982: arguments to this intrinsic are incorrect`
// this intrinsic takes 3 arguments but 0 arguments were supplied
// @1037..1055: unexpected number of arguments here
// this intrinsic takes 3 arguments but 4 arguments were supplied
// @1092..1141: unexpected number of arguments here
// incorrect intrinsic argument
// @1202..1204: expected `b256`, found `int`
// @1182..1201: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @1294..1310: expected `{b256, b256, int}`, found `{b256, b256}`
// @1267..1286: arguments to this intrinsic are incorrect`
// this intrinsic takes 2 arguments but 1 argument was supplied
// @1351..1377: unexpected number of arguments here
// this intrinsic takes 2 arguments but 3 arguments were supplied
// @1417..1470: unexpected number of arguments here
// this intrinsic takes 1 argument but 2 arguments were supplied
// @1532..1547: unexpected number of arguments here
// this intrinsic takes 1 argument but 0 arguments were supplied
// @1581..1592: unexpected number of arguments here
// >>>
