var hash0: b256;

// All these intrinsic call have something wrong with them:
// * Either an argument has the wrong type
// * Or an incorrect number of arguments is supplied

var mut_keys_len = __mut_keys_len(42);

var mut_keys_contains_0: bool = __mut_keys_contains(5);
var mut_keys_contains_1: bool = __mut_keys_contains();
var mut_keys_contains_2: bool = __mut_keys_contains(hash0, hash0);

var this_address = __this_address(42);

var this_set_address = __this_set_address(42);

var this_pathway = __this_pathway(42);

var sha256_0 = __sha256();
var sha256_1 = __sha256(1, 1);

var verify_ed25519_0: bool = __verify_ed25519(69, { hash0, hash0 }, 5);
var verify_ed25519_1: bool = __verify_ed25519(69, hash0, hash0);
var verify_ed25519_3: bool = __verify_ed25519();
var verify_ed25519_2: bool = __verify_ed25519(69, { hash0, hash0 }, hash0, 69);

var recover_secp256k1_0: { b256, int } = __recover_secp256k1(42, { hash0, hash0, 69 });
var recover_secp256k1_1: { b256, int } = __recover_secp256k1(hash0, { hash0, hash0 });
var recover_secp256k1_2: { b256, int } = __recover_secp256k1(hash0);
var recover_secp256k1_3: { b256, int } = __recover_secp256k1(hash0, {hash0, hash0, 69}, hash0);

storage {
    x: int,
}
state x = storage::x;

var bad_state_len_1 = __state_len(x, 0);
var bad_state_len_2 = __state_len();

solve satisfy;

// intermediate <<<
// storage {
//     x: int,
// }
// var ::hash0: b256;
// var ::mut_keys_len;
// var ::mut_keys_contains_0: bool;
// var ::mut_keys_contains_1: bool;
// var ::mut_keys_contains_2: bool;
// var ::this_address;
// var ::this_set_address;
// var ::this_pathway;
// var ::sha256_0;
// var ::sha256_1;
// var ::verify_ed25519_0: bool;
// var ::verify_ed25519_1: bool;
// var ::verify_ed25519_3: bool;
// var ::verify_ed25519_2: bool;
// var ::recover_secp256k1_0: {b256, int};
// var ::recover_secp256k1_1: {b256, int};
// var ::recover_secp256k1_2: {b256, int};
// var ::recover_secp256k1_3: {b256, int};
// var ::bad_state_len_1;
// var ::bad_state_len_2;
// state ::x = storage::x;
// constraint (::mut_keys_len == __mut_keys_len(42));
// constraint (::mut_keys_contains_0 == __mut_keys_contains(5));
// constraint (::mut_keys_contains_1 == __mut_keys_contains());
// constraint (::mut_keys_contains_2 == __mut_keys_contains(::hash0, ::hash0));
// constraint (::this_address == __this_address(42));
// constraint (::this_set_address == __this_set_address(42));
// constraint (::this_pathway == __this_pathway(42));
// constraint (::sha256_0 == __sha256());
// constraint (::sha256_1 == __sha256(1, 1));
// constraint (::verify_ed25519_0 == __verify_ed25519(69, {::hash0, ::hash0}, 5));
// constraint (::verify_ed25519_1 == __verify_ed25519(69, ::hash0, ::hash0));
// constraint (::verify_ed25519_3 == __verify_ed25519());
// constraint (::verify_ed25519_2 == __verify_ed25519(69, {::hash0, ::hash0}, ::hash0, 69));
// constraint (::recover_secp256k1_0 == __recover_secp256k1(42, {::hash0, ::hash0, 69}));
// constraint (::recover_secp256k1_1 == __recover_secp256k1(::hash0, {::hash0, ::hash0}));
// constraint (::recover_secp256k1_2 == __recover_secp256k1(::hash0));
// constraint (::recover_secp256k1_3 == __recover_secp256k1(::hash0, {::hash0, ::hash0, 69}, ::hash0));
// constraint (::bad_state_len_1 == __state_len(::x, 0));
// constraint (::bad_state_len_2 == __state_len());
// solve satisfy;
// >>>

// typecheck_failure <<<
// this intrinsic takes 0 arguments but 1 argument was supplied
// @194..212: unexpected number of arguments here
// mismatched types
// @267..268: expected `int[..]`, found `int`
// @247..266: arguments to this intrinsic are incorrect`
// this intrinsic takes 1 argument but 0 arguments were supplied
// @303..324: unexpected number of arguments here
// this intrinsic takes 1 argument but 2 arguments were supplied
// @358..391: unexpected number of arguments here
// this intrinsic takes 0 arguments but 1 argument was supplied
// @413..431: unexpected number of arguments here
// this intrinsic takes 0 arguments but 1 argument was supplied
// @457..479: unexpected number of arguments here
// this intrinsic takes 0 arguments but 1 argument was supplied
// @501..519: unexpected number of arguments here
// this intrinsic takes 1 argument but 0 arguments were supplied
// @537..547: unexpected number of arguments here
// this intrinsic takes 1 argument but 2 arguments were supplied
// @564..578: unexpected number of arguments here
// mismatched types
// @649..650: expected `b256`, found `int`
// @610..626: arguments to this intrinsic are incorrect`
// mismatched types
// @703..708: expected `{ b256, b256 }`, found `b256`
// @682..698: arguments to this intrinsic are incorrect`
// this intrinsic takes 3 arguments but 0 arguments were supplied
// @747..765: unexpected number of arguments here
// this intrinsic takes 3 arguments but 4 arguments were supplied
// @796..845: unexpected number of arguments here
// mismatched types
// @909..911: expected `b256`, found `int`
// @889..908: arguments to this intrinsic are incorrect`
// mismatched types
// @1004..1020: expected `{ b256, b256, int }`, found `{b256, b256}`
// @977..996: arguments to this intrinsic are incorrect`
// this intrinsic takes 2 arguments but 1 argument was supplied
// @1064..1090: unexpected number of arguments here
// this intrinsic takes 2 arguments but 3 arguments were supplied
// @1133..1186: unexpected number of arguments here
// this intrinsic takes 1 argument but 2 arguments were supplied
// @1258..1275: unexpected number of arguments here
// this intrinsic takes 1 argument but 0 arguments were supplied
// @1299..1312: unexpected number of arguments here
// this intrinsic takes 0 arguments but 1 argument was supplied
// @194..212: unexpected number of arguments here
// mismatched types
// @267..268: expected `int[..]`, found `int`
// @247..266: arguments to this intrinsic are incorrect`
// this intrinsic takes 1 argument but 0 arguments were supplied
// @303..324: unexpected number of arguments here
// this intrinsic takes 1 argument but 2 arguments were supplied
// @358..391: unexpected number of arguments here
// this intrinsic takes 0 arguments but 1 argument was supplied
// @413..431: unexpected number of arguments here
// this intrinsic takes 0 arguments but 1 argument was supplied
// @457..479: unexpected number of arguments here
// this intrinsic takes 0 arguments but 1 argument was supplied
// @501..519: unexpected number of arguments here
// this intrinsic takes 1 argument but 0 arguments were supplied
// @537..547: unexpected number of arguments here
// this intrinsic takes 1 argument but 2 arguments were supplied
// @564..578: unexpected number of arguments here
// mismatched types
// @649..650: expected `b256`, found `int`
// @610..626: arguments to this intrinsic are incorrect`
// mismatched types
// @703..708: expected `{ b256, b256 }`, found `b256`
// @682..698: arguments to this intrinsic are incorrect`
// this intrinsic takes 3 arguments but 0 arguments were supplied
// @747..765: unexpected number of arguments here
// this intrinsic takes 3 arguments but 4 arguments were supplied
// @796..845: unexpected number of arguments here
// mismatched types
// @909..911: expected `b256`, found `int`
// @889..908: arguments to this intrinsic are incorrect`
// mismatched types
// @1004..1020: expected `{ b256, b256, int }`, found `{b256, b256}`
// @977..996: arguments to this intrinsic are incorrect`
// this intrinsic takes 2 arguments but 1 argument was supplied
// @1064..1090: unexpected number of arguments here
// this intrinsic takes 2 arguments but 3 arguments were supplied
// @1133..1186: unexpected number of arguments here
// this intrinsic takes 1 argument but 2 arguments were supplied
// @1258..1275: unexpected number of arguments here
// this intrinsic takes 1 argument but 0 arguments were supplied
// @1299..1312: unexpected number of arguments here
// unable to determine expression type
// @179..191: type of this expression is ambiguous
// unable to determine expression type
// @398..410: type of this expression is ambiguous
// unable to determine expression type
// @438..454: type of this expression is ambiguous
// unable to determine expression type
// @486..498: type of this expression is ambiguous
// unable to determine expression type
// @526..534: type of this expression is ambiguous
// unable to determine expression type
// @553..561: type of this expression is ambiguous
// unable to determine expression type
// @1240..1255: type of this expression is ambiguous
// unable to determine expression type
// @1281..1296: type of this expression is ambiguous
// variable initialization type error
// @247..269: variable initializer has unknown type
// @240..244: expecting type `bool`
// variable initialization type error
// @303..324: variable initializer has unknown type
// @296..300: expecting type `bool`
// variable initialization type error
// @358..391: variable initializer has unknown type
// @351..355: expecting type `bool`
// variable initialization type error
// @610..651: variable initializer has unknown type
// @603..607: expecting type `bool`
// variable initialization type error
// @682..716: variable initializer has unknown type
// @675..679: expecting type `bool`
// variable initialization type error
// @747..765: variable initializer has unknown type
// @740..744: expecting type `bool`
// variable initialization type error
// @796..845: variable initializer has unknown type
// @789..793: expecting type `bool`
// variable initialization type error
// @889..934: variable initializer has unknown type
// @873..886: expecting type `{b256, int}`
// variable initialization type error
// @977..1021: variable initializer has unknown type
// @961..974: expecting type `{b256, int}`
// variable initialization type error
// @1064..1090: variable initializer has unknown type
// @1048..1061: expecting type `{b256, int}`
// variable initialization type error
// @1133..1186: variable initializer has unknown type
// @1117..1130: expecting type `{b256, int}`
// constraint expression type error
// @175..212: constraint expression has unknown type
// @175..212: expecting type `bool`
// constraint expression type error
// @215..269: constraint expression has unknown type
// @215..269: expecting type `bool`
// constraint expression type error
// @271..324: constraint expression has unknown type
// @271..324: expecting type `bool`
// constraint expression type error
// @326..391: constraint expression has unknown type
// @326..391: expecting type `bool`
// constraint expression type error
// @394..431: constraint expression has unknown type
// @394..431: expecting type `bool`
// constraint expression type error
// @434..479: constraint expression has unknown type
// @434..479: expecting type `bool`
// constraint expression type error
// @482..519: constraint expression has unknown type
// @482..519: expecting type `bool`
// constraint expression type error
// @522..547: constraint expression has unknown type
// @522..547: expecting type `bool`
// constraint expression type error
// @549..578: constraint expression has unknown type
// @549..578: expecting type `bool`
// constraint expression type error
// @581..651: constraint expression has unknown type
// @581..651: expecting type `bool`
// constraint expression type error
// @653..716: constraint expression has unknown type
// @653..716: expecting type `bool`
// constraint expression type error
// @718..765: constraint expression has unknown type
// @718..765: expecting type `bool`
// constraint expression type error
// @767..845: constraint expression has unknown type
// @767..845: expecting type `bool`
// constraint expression type error
// @848..934: constraint expression has unknown type
// @848..934: expecting type `bool`
// constraint expression type error
// @936..1021: constraint expression has unknown type
// @936..1021: expecting type `bool`
// constraint expression type error
// @1023..1090: constraint expression has unknown type
// @1023..1090: expecting type `bool`
// constraint expression type error
// @1092..1186: constraint expression has unknown type
// @1092..1186: expecting type `bool`
// constraint expression type error
// @1236..1275: constraint expression has unknown type
// @1236..1275: expecting type `bool`
// constraint expression type error
// @1277..1312: constraint expression has unknown type
// @1277..1312: expecting type `bool`
// >>>
