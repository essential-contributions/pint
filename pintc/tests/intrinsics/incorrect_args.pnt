storage {
    x: int,
}

predicate test {
    var hash0: b256;

    // All these intrinsic call have something wrong with them:
    // * Either an argument has the wrong type
    // * Or an incorrect number of arguments is supplied

    var this_address = __this_address(42);

    var this_contract_address = __this_contract_address(42);

    var this_pathway = __this_pathway(42);

    // This should emit a type checking error for the first argument as well as an "incorrect number
    // of arguments" error.
    var predicate_at = __predicate_at(false, 42);

    var sha256_0 = __sha256();
    var sha256_1 = __sha256(1, 1);

    var verify_ed25519_0: bool = __verify_ed25519(69, { hash0, hash0 }, 5);
    var verify_ed25519_1: bool = __verify_ed25519(69, hash0, hash0);
    var verify_ed25519_3: bool = __verify_ed25519();
    var verify_ed25519_2: bool = __verify_ed25519(69, { hash0, hash0 }, hash0, 69);

    var recover_secp256k1_0: { b256, int } = __recover_secp256k1(42, { hash0, hash0, 69 });
    var recover_secp256k1_1: { b256, int } = __recover_secp256k1(hash0, { hash0, hash0 });
    var recover_secp256k1_2: { b256, int } = __recover_secp256k1(hash0);
    var recover_secp256k1_3: { b256, int } = __recover_secp256k1(hash0, {hash0, hash0, 69}, hash0);

    state x = storage::x;

    var bad_size_of_1 = __size_of(x, 0);
    var bad_size_of_2 = __size_of();
}

// parsed <<<
// storage {
//     x: int,
// }
// 
// predicate ::test {
//     var ::hash0: b256;
//     var ::this_address;
//     var ::this_contract_address;
//     var ::this_pathway;
//     var ::predicate_at;
//     var ::sha256_0;
//     var ::sha256_1;
//     var ::verify_ed25519_0: bool;
//     var ::verify_ed25519_1: bool;
//     var ::verify_ed25519_3: bool;
//     var ::verify_ed25519_2: bool;
//     var ::recover_secp256k1_0: {b256, int};
//     var ::recover_secp256k1_1: {b256, int};
//     var ::recover_secp256k1_2: {b256, int};
//     var ::recover_secp256k1_3: {b256, int};
//     var ::bad_size_of_1;
//     var ::bad_size_of_2;
//     state ::x = storage::x;
//     constraint (::this_address == __this_address(42));
//     constraint (::this_contract_address == __this_contract_address(42));
//     constraint (::this_pathway == __this_pathway(42));
//     constraint (::predicate_at == __predicate_at(false, 42));
//     constraint (::sha256_0 == __sha256());
//     constraint (::sha256_1 == __sha256(1, 1));
//     constraint (::verify_ed25519_0 == __verify_ed25519(69, {::hash0, ::hash0}, 5));
//     constraint (::verify_ed25519_1 == __verify_ed25519(69, ::hash0, ::hash0));
//     constraint (::verify_ed25519_3 == __verify_ed25519());
//     constraint (::verify_ed25519_2 == __verify_ed25519(69, {::hash0, ::hash0}, ::hash0, 69));
//     constraint (::recover_secp256k1_0 == __recover_secp256k1(42, {::hash0, ::hash0, 69}));
//     constraint (::recover_secp256k1_1 == __recover_secp256k1(::hash0, {::hash0, ::hash0}));
//     constraint (::recover_secp256k1_2 == __recover_secp256k1(::hash0));
//     constraint (::recover_secp256k1_3 == __recover_secp256k1(::hash0, {::hash0, ::hash0, 69}, ::hash0));
//     constraint (::bad_size_of_1 == __size_of(::x, 0));
//     constraint (::bad_size_of_2 == __size_of());
// }
// >>>

// typecheck_failure <<<
// this intrinsic takes 0 arguments but 1 argument was supplied
// @256..274: unexpected number of arguments here
// this intrinsic takes 0 arguments but 1 argument was supplied
// @309..336: unexpected number of arguments here
// this intrinsic takes 0 arguments but 1 argument was supplied
// @362..380: unexpected number of arguments here
// incorrect intrinsic argument
// @550..555: expected `int`, found `bool`
// @535..549: arguments to this intrinsic are incorrect`
// this intrinsic takes 1 argument but 2 arguments were supplied
// @535..560: unexpected number of arguments here
// this intrinsic takes 1 argument but 0 arguments were supplied
// @582..592: unexpected number of arguments here
// this intrinsic takes 1 argument but 2 arguments were supplied
// @613..627: unexpected number of arguments here
// incorrect intrinsic argument
// @702..703: expected `b256`, found `int`
// @663..679: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @760..765: expected `{b256, b256}`, found `b256`
// @739..755: arguments to this intrinsic are incorrect`
// this intrinsic takes 3 arguments but 0 arguments were supplied
// @808..826: unexpected number of arguments here
// this intrinsic takes 3 arguments but 4 arguments were supplied
// @861..910: unexpected number of arguments here
// incorrect intrinsic argument
// @978..980: expected `b256`, found `int`
// @958..977: arguments to this intrinsic are incorrect`
// incorrect intrinsic argument
// @1077..1093: expected `{b256, b256, int}`, found `{b256, b256}`
// @1050..1069: arguments to this intrinsic are incorrect`
// this intrinsic takes 2 arguments but 1 argument was supplied
// @1141..1167: unexpected number of arguments here
// this intrinsic takes 2 arguments but 3 arguments were supplied
// @1214..1267: unexpected number of arguments here
// this intrinsic takes 1 argument but 2 arguments were supplied
// @1321..1336: unexpected number of arguments here
// this intrinsic takes 1 argument but 0 arguments were supplied
// @1362..1373: unexpected number of arguments here
// >>>
