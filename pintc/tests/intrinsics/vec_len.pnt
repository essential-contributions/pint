storage {
    v: int[],
    x: int,
}

interface Foo {
    storage {
        v: int[],
    }
}

predicate test {
    state l = __vec_len(storage::v);

    interface FooI = Foo(0x0000000000000000000000000000000000000000000000000000000000000000);
    state l2 = __vec_len(FooI::storage::v);
}

// parsed <<<
// storage {
//     v: int[],
//     x: int,
// }
// interface ::Foo {
//     storage {
//         v: int[],
//     }
// }
// 
// predicate ::test {
//     interface ::FooI = ::Foo(0x0000000000000000000000000000000000000000000000000000000000000000)
//     state ::l = __vec_len(storage::v);
//     state ::l2 = __vec_len(::FooI::storage::v);
// }
// >>>

// flattened <<<
// storage {
//     v: int[],
//     x: int,
// }
// interface ::Foo {
//     storage {
//         v: int[],
//     }
// }
// 
// predicate ::test {
//     interface ::FooI = ::Foo(0x0000000000000000000000000000000000000000000000000000000000000000)
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
