storage {
    v: int[],
    x: int,
}

interface Foo {
    storage {
        v: int[],
    }
}

predicate test() {
    let l = __vec_len(storage::v);

    let l2 = __vec_len(
                    Foo@[0x0000000000000000000000000000000000000000000000000000000000000000]::storage::v
                );
}

// parsed <<<
// storage {
//     v: int[_],
//     x: int,
// }
// interface ::Foo {
//     storage {
//         v: int[_],
//     }
// }
//
// predicate ::test(
// ) {
//     let ::l = __vec_len(storage::v);
//     let ::l2 = __vec_len(::Foo@[0x0000000000000000000000000000000000000000000000000000000000000000]::storage::v);
// }
// >>>

// flattened <<<
// storage {
//     v: int[],
//     x: int,
// }
// interface ::Foo {
//     storage {
//         v: int[],
//     }
// }
//
// predicate ::test(
// ) {
//     let ::l: int? = __pre_state({0});
//     let ::l2: int? = __pre_state_extern(0x0000000000000000000000000000000000000000000000000000000000000000, {0});
// }
// >>>
