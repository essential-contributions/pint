storage {
    v: int[],
    x: int,
}

interface Foo {
    storage {
        v: int[],
    }
}

predicate test {
    state l = __vec_len(storage::v);

    interface FooI = Foo(0x0000000000000000000000000000000000000000000000000000000000000000);
    state l2 = __vec_len(FooI::storage::v);

    constraint l == l;
    constraint l2 == l2;
}

// parsed <<<
// storage {
//     v: int[],
//     x: int,
// }
// interface ::Foo {
//     storage {
//         v: int[],
//     }
// }
// 
// predicate ::test {
//     interface ::FooI = ::Foo(0x0000000000000000000000000000000000000000000000000000000000000000)
//     state ::l = __vec_len(storage::v);
//     state ::l2 = __vec_len(::FooI::storage::v);
//     constraint (::l == ::l);
//     constraint (::l2 == ::l2);
// }
// >>>

// flattened <<<
// storage {
//     v: int[],
//     x: int,
// }
// interface ::Foo {
//     storage {
//         v: int[],
//     }
// }
// 
// predicate ::test {
//     interface ::FooI = ::Foo(0x0000000000000000000000000000000000000000000000000000000000000000)
//     state ::l: int = __storage_get({0});
//     state ::l2: int = __storage_get_extern(0x0000000000000000000000000000000000000000000000000000000000000000, {0});
//     constraint (::l == ::l);
//     constraint (::l2 == ::l2);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
