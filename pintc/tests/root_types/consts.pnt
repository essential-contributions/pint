const five = 5;

type deuce = int[10 / five];

const two_ints: deuce = [11, 22];

predicate test(a: int) {
    constraint a == two_ints[1];
}

// parsed <<<
// const ::five = 5;
// const ::two_ints: ::deuce = [11, 22];
// type ::deuce = int[(10 / ::five)];
//
// predicate ::test(
//     ::a: int,
// ) {
//     constraint (::a == ::two_ints[1]);
// }
// >>>

// flattened <<<
// const ::five: int = 5;
// const ::two_ints: int[2] = [11, 22];
// type ::deuce = int[2];
//
// predicate ::test(
//     ::a: int,
// ) {
//     constraint (::a == 22);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
