type num = int;
type ary = num[2 + 1];

interface i {
    storage {
        x: ary,
    }

    predicate p(x1: ary);
}

predicate test(addr1: b256) {
    let x = i@[addr1]::storage::x;
    constraint x == [1, 2, 3];
}

// parsed <<<
// type ::num = int;
// type ::ary = ::num[(2 + 1)];
// interface ::i {
//     storage {
//         x: ::ary,
//     }
//     predicate p (
//         x1: ::ary,
//     );
// }
//
// predicate ::test(
//     ::addr1: b256,
// ) {
//     let ::x = ::i@[::addr1]::storage::x;
//     constraint (::x == [1, 2, 3]);
// }
// >>>

// flattened <<<
// type ::num = int;
// type ::ary = int[3];
// interface ::i {
//     storage {
//         x: int[3],
//     }
//     predicate p (
//         x1: int[3],
//     );
// }
//
// predicate ::test(
//     ::addr1: b256,
// ) {
//     let ::x: int[3] = __storage_get_extern(::addr1, {0, 0});
//     constraint (::x == [1, 2, 3]);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
