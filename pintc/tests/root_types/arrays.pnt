type myArray = int[2];
type myMultiDimArray = int[2][2];
type myArrayTuple = int[{3, 1}.0];
type myTuple = { x: int };
type myTupleArray = { x: int[5] };
type myNestedArrayTuple = { y: { z: int[{4, 1}.0] } };

predicate Foo {
    var a: myArrayTuple;
    constraint a[2] == 11;

    var b: myNestedArrayTuple;
    constraint b.y.z[2] == 22;
}

// parsed <<<
// type ::myArray = int[2];
// type ::myMultiDimArray = int[2][2];
// type ::myArrayTuple = int[{3, 1}.0];
// type ::myTuple = {x: int};
// type ::myTupleArray = {x: int[5]};
// type ::myNestedArrayTuple = {y: {z: int[{4, 1}.0]}};
//
// predicate ::Foo {
//     var ::a: ::myArrayTuple;
//     var ::b: ::myNestedArrayTuple;
//     constraint (::a[2] == 11);
//     constraint (::b.y.z[2] == 22);
// }
// >>>

// flattened <<<
// type ::myArray = int[2];
// type ::myMultiDimArray = int[2][2];
// type ::myArrayTuple = int[3];
// type ::myTuple = {x: int};
// type ::myTupleArray = {x: int[5]};
// type ::myNestedArrayTuple = {y: {z: int[4]}};
//
// predicate ::Foo {
//     var ::a: int[3];
//     var ::b: {y: {z: int[4]}};
//     constraint (::a[2] == 11);
//     constraint (::b.y.z[2] == 22);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
