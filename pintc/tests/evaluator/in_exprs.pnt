const a = 1 in [1, 2];
const b = 1 in [3, 2];
//const c = true in [3,2];
const d = true in [true, false];
const e = 1 in 1..2;
const f = 1 in 3..2;

predicate Test(
    g: bool,
    h: bool,
    i: bool,
    j: int,
    k: bool,
    l: bool,
    m: bool,
    n: int,
) {
    constraint g == (1 in [1, 2]);
    constraint h == (1 in [3, 2]);
    constraint i == (true in [true, false]);

    constraint j == 0;
    constraint k == false;
    constraint j in [1, 2];
    constraint k in [false, false];

    constraint l == (1 in 1..2);
    constraint m == (1 in 3..2);

    constraint n == 0;
    constraint n in 1..2;
}

// parsed <<<
// const ::b = 1 in [3, 2];
// const ::e = 1 in 1..2;
// const ::d = true in [true, false];
// const ::a = 1 in [1, 2];
// const ::f = 1 in 3..2;
//
// predicate ::Test(
//     ::g: bool,
//     ::h: bool,
//     ::i: bool,
//     ::j: int,
//     ::k: bool,
//     ::l: bool,
//     ::m: bool,
//     ::n: int,
// ) {
//     constraint (::g == 1 in [1, 2]);
//     constraint (::h == 1 in [3, 2]);
//     constraint (::i == true in [true, false]);
//     constraint (::j == 0);
//     constraint (::k == false);
//     constraint ::j in [1, 2];
//     constraint ::k in [false, false];
//     constraint (::l == 1 in 1..2);
//     constraint (::m == 1 in 3..2);
//     constraint (::n == 0);
//     constraint ::n in 1..2;
// }
// >>>

// flattened <<<
// const ::b: bool = false;
// const ::e: bool = true;
// const ::d: bool = true;
// const ::a: bool = true;
// const ::f: bool = false;
//
// predicate ::Test(
//     ::g: bool,
//     ::h: bool,
//     ::i: bool,
//     ::j: int,
//     ::k: bool,
//     ::l: bool,
//     ::m: bool,
//     ::n: int,
// ) {
//     constraint (::g == ((1 == 1) || (1 == 2)));
//     constraint (::h == ((1 == 3) || (1 == 2)));
//     constraint (::i == ((true == true) || (true == false)));
//     constraint (::j == 0);
//     constraint (::k == false);
//     constraint ((::j == 1) || (::j == 2));
//     constraint ((::k == false) || (::k == false));
//     constraint (::l == ((1 >= 1) && (1 <= 2)));
//     constraint (::m == ((1 >= 3) && (1 <= 2)));
//     constraint (::n == 0);
//     constraint ((::n >= 1) && (::n <= 2));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
