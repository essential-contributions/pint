interface Foo {
    storage {
        x: int,
        y: int,
    }

    predicate I1 {
        pub var x: int;
        pub var y: b256;
    }
}

predicate Simple {
    var addr1: b256;
    var addr2: b256;
    var addr3: b256;

    // Missing interface
    interface Instance1 = MissingInterface(addr1);

    // Missing interface instance
    interface FooInstance = Foo(addr2);
    predicate Bad1 = MissingInterfaceInstance::Foo(addr2);

    // Missing intent
    predicate Missing = FooInstance::MissingPredicate(addr3);

    // Missing pub var
    predicate I1 = FooInstance::I1(addr3);
    var missing_var = I1::missing_var;
}

// parsed <<<
// interface ::Foo {
//     storage {
//         x: int,
//         y: int,
//     }
//     predicate I1 {
//         pub var x: int;
//         pub var y: b256;
//     }
// }
//
// predicate ::Simple {
//     interface ::Instance1 = ::MissingInterface(::addr1)
//     interface ::FooInstance = ::Foo(::addr2)
//     predicate ::Bad1 = ::MissingInterfaceInstance::Foo(::addr2)
//     predicate ::Missing = ::FooInstance::MissingPredicate(::addr3)
//     predicate ::I1 = ::FooInstance::I1(::addr3)
//     var ::addr1: b256;
//     var ::addr2: b256;
//     var ::addr3: b256;
//     var __::Bad1_pathway: int;
//     var __::Missing_pathway: int;
//     var __::I1_pathway: int;
//     var ::missing_var;
//     constraint (::missing_var == ::I1::missing_var);
// }
// >>>

// typecheck_failure <<<
// cannot find interface declaration `::MissingInterface`
// @258..303: cannot find interface declaration `::MissingInterface`
// cannot find interface instance `::MissingInterfaceInstance`
// @384..437: cannot find interface instance `::MissingInterfaceInstance`
// cannot find predicate `MissingPredicate` in interface `::Foo`
// @466..522: cannot find predicate `MissingPredicate` in interface `::Foo`
// cannot find value `::I1::missing_var` in this scope
// @613..628: not found in this scope
// constraint expression type error
// @595..628: constraint expression has unknown type
// @595..628: expecting type `bool`
// >>>
