predicate Foo() {
    constraint Bar@[]();
}
predicate Baz() {
    constraint Bar@[]();
}

predicate P() {
    constraint P@[]();
}

predicate A(x: int) {
}

predicate B() {
    constraint A@[](1, 2);
}

predicate W(x: int, y: b256) {}

predicate U() {
    constraint W@[](1, 2, 3);
    constraint W@[](0);
    constraint W@[](false, {2, 1});
}

// parsed <<<
// predicate ::Foo(
// ) {
//     constraint ::Bar@[]();
// }
//
// predicate ::Baz(
// ) {
//     constraint ::Bar@[]();
// }
//
// predicate ::P(
// ) {
//     constraint ::P@[]();
// }
//
// predicate ::A(
//     ::x: int,
// ) {
// }
//
// predicate ::B(
// ) {
//     constraint ::A@[](1, 2);
// }
//
// predicate ::W(
//     ::x: int,
//     ::y: b256,
// ) {
// }
//
// predicate ::U(
// ) {
//     constraint ::W@[](1, 2, 3);
//     constraint ::W@[](0);
//     constraint ::W@[](false, {2, 1});
// }
// >>>

// typecheck_failure <<<
// cannot find predicate `::Bar` in this contract
// @33..41: this predicate call references predicate `::Bar` which does not exist in this contract
// cannot find predicate `::Bar` in this contract
// @78..86: this predicate call references predicate `::Bar` which does not exist in this contract
// self referential predicate `::P`
// @122..128: this predicate call references the predicate it's declared in
// this predicate takes 1 argument but 2 arguments were supplied
// @189..199: unexpected number of arguments here
// incorrect predicate argument
// @276..277: expected `b256`, found `int`
// @268..281: arguments to this predicate call are incorrect`
// this predicate takes 2 arguments but 3 arguments were supplied
// @268..281: unexpected number of arguments here
// this predicate takes 2 arguments but 1 argument was supplied
// @298..305: unexpected number of arguments here
// incorrect predicate argument
// @327..332: expected `int`, found `bool`
// @322..341: arguments to this predicate call are incorrect`
// incorrect predicate argument
// @334..340: expected `b256`, found `{int, int}`
// @322..341: arguments to this predicate call are incorrect`
// >>>
