interface Foo {
    storage {
        x: int,
        y: int,
    }

    predicate I1 {
        pub var x1: int;
        pub var x2: b256;
        pub var x3: bool;
    }

    predicate I2 {
        pub var x1: int;
        pub var x2: b256;
        pub var x3: bool;
    }

    predicate I3;
}

interface Bar {
    storage {
        x: int,
        z: b256,
    }

    predicate I1 {
        pub var x1: int;
        pub var x2: b256;
        pub var x3: bool;
    }

    predicate I2 {
        pub var x1: int;
        pub var x2: b256;
        pub var x3: bool;
    }

    predicate I3;
}

predicate Simple {
    var addr1: b256;
    var addr2: b256;
    var addr3: b256;
    var addr4: b256;

    interface FooInstance = Foo(addr1);
    interface BarInstance = Bar(addr2);

    state x = FooInstance::storage::x;
    state y = FooInstance::storage::y;
    state z = BarInstance::storage::z;

    predicate FooI1Instance1 = FooInstance::I1(addr3);
    predicate FooI1Instance2 = FooInstance::I1(addr3);

    predicate BarI2Instance1 = BarInstance::I2(addr4);
    predicate BarI2Instance2 = BarInstance::I2(addr4);
    predicate BarI2Instance3 = BarInstance::I2(addr4);

    var x1 = FooI1Instance1::x1;
    var x2 = BarI2Instance2::x2;
    var x3 = BarI2Instance3::x3;
}

// parsed <<<
// interface ::Foo {
//     storage {
//         x: int,
//         y: int,
//     }
//     predicate I1 {
//         pub var x1: int;
//         pub var x2: b256;
//         pub var x3: bool;
//     }
//     predicate I2 {
//         pub var x1: int;
//         pub var x2: b256;
//         pub var x3: bool;
//     }
//     predicate I3;
// }
// interface ::Bar {
//     storage {
//         x: int,
//         z: b256,
//     }
//     predicate I1 {
//         pub var x1: int;
//         pub var x2: b256;
//         pub var x3: bool;
//     }
//     predicate I2 {
//         pub var x1: int;
//         pub var x2: b256;
//         pub var x3: bool;
//     }
//     predicate I3;
// }
//
// predicate ::Simple {
//     interface ::FooInstance = ::Foo(::addr1)
//     interface ::BarInstance = ::Bar(::addr2)
//     predicate ::FooI1Instance1 = ::FooInstance::I1(::addr3)
//     predicate ::FooI1Instance2 = ::FooInstance::I1(::addr3)
//     predicate ::BarI2Instance1 = ::BarInstance::I2(::addr4)
//     predicate ::BarI2Instance2 = ::BarInstance::I2(::addr4)
//     predicate ::BarI2Instance3 = ::BarInstance::I2(::addr4)
//     var ::addr1: b256;
//     var ::addr2: b256;
//     var ::addr3: b256;
//     var ::addr4: b256;
//     var __::FooI1Instance1_pathway: int;
//     var __::FooI1Instance2_pathway: int;
//     var __::BarI2Instance1_pathway: int;
//     var __::BarI2Instance2_pathway: int;
//     var __::BarI2Instance3_pathway: int;
//     var ::x1;
//     var ::x2;
//     var ::x3;
//     state ::x = ::FooInstance::storage::x;
//     state ::y = ::FooInstance::storage::y;
//     state ::z = ::BarInstance::storage::z;
//     constraint (::x1 == ::FooI1Instance1::x1);
//     constraint (::x2 == ::BarI2Instance2::x2);
//     constraint (::x3 == ::BarI2Instance3::x3);
// }
// >>>

// flattened <<<
// interface ::Foo {
//     storage {
//         x: int,
//         y: int,
//     }
//     predicate I1 {
//         pub var x1: int;
//         pub var x2: b256;
//         pub var x3: bool;
//     }
//     predicate I2 {
//         pub var x1: int;
//         pub var x2: b256;
//         pub var x3: bool;
//     }
//     predicate I3;
// }
// interface ::Bar {
//     storage {
//         x: int,
//         z: b256,
//     }
//     predicate I1 {
//         pub var x1: int;
//         pub var x2: b256;
//         pub var x3: bool;
//     }
//     predicate I2 {
//         pub var x1: int;
//         pub var x2: b256;
//         pub var x3: bool;
//     }
//     predicate I3;
// }
//
// predicate ::Simple {
//     interface ::FooInstance = ::Foo(::addr1)
//     interface ::BarInstance = ::Bar(::addr2)
//     predicate ::FooI1Instance1 = ::FooInstance::I1(::addr3)
//     predicate ::FooI1Instance2 = ::FooInstance::I1(::addr3)
//     predicate ::BarI2Instance1 = ::BarInstance::I2(::addr4)
//     predicate ::BarI2Instance2 = ::BarInstance::I2(::addr4)
//     predicate ::BarI2Instance3 = ::BarInstance::I2(::addr4)
//     var ::addr1: b256;
//     var ::addr2: b256;
//     var ::addr3: b256;
//     var ::addr4: b256;
//     var __::FooI1Instance1_pathway: int;
//     var __::FooI1Instance2_pathway: int;
//     var __::BarI2Instance1_pathway: int;
//     var __::BarI2Instance2_pathway: int;
//     var __::BarI2Instance3_pathway: int;
//     var ::x1: int;
//     var ::x2: b256;
//     var ::x3: bool;
//     state ::x: int = ::FooInstance::storage::x;
//     state ::y: int = ::FooInstance::storage::y;
//     state ::z: b256 = ::BarInstance::storage::z;
//     constraint (::x1 == ::FooI1Instance1::x1);
//     constraint (::x2 == ::BarI2Instance2::x2);
//     constraint (::x3 == ::BarI2Instance3::x3);
// }
// >>>
