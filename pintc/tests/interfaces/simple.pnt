interface Foo {
    storage {
        x: int,
        y: int,
    }

    predicate I1(
        x1: int,
        x2: b256,
        x3: bool,
    );

    predicate I2(
        x1: int,
        x2: b256,
        x3: bool,
    );

    predicate I3();
}

interface Bar {
    storage {
        x: int,
        z: b256,
    }

    predicate I1(
        x1: int,
        x2: b256,
        x3: bool,
    );

    predicate I2(
        x1: int,
        x2: b256,
        x3: bool,
    );

    predicate I3();
}

predicate Simple(
    addr1: b256,
    addr2: b256,
    addr3: b256,
    addr4: b256,
    x1: int,
    x2: b256,
    x3: bool,

    foo_i1_1: { x1: int, x2: b256, x3: bool },
    foo_i1_2: { x1: int, x2: b256, x3: bool },

    bar_i2_1: { x1: int, x2: b256, x3: bool },
    bar_i2_2: { x1: int, x2: b256, x3: bool },
    bar_i2_3: { x1: int, x2: b256, x3: bool },
) {
    let x = Foo[[addr1]]::storage::x;
    let y = Foo[[addr1]]::storage::y;
    let z = Bar[[addr2]]::storage::z;

    constraint Foo[[addr1]]::I1[[addr3]](foo_i1_1.x1, foo_i1_1.x2, foo_i1_1.x3);
    constraint Foo[[addr1]]::I1[[addr3]](foo_i1_2.x1, foo_i1_2.x2, foo_i1_2.x3);

    constraint Bar[[addr2]]::I1[[addr4]](bar_i2_1.x1, bar_i2_1.x2, bar_i2_1.x3);
    constraint Bar[[addr2]]::I1[[addr4]](bar_i2_2.x1, bar_i2_2.x2, bar_i2_2.x3);
    constraint Bar[[addr2]]::I1[[addr4]](bar_i2_3.x1, bar_i2_3.x2, bar_i2_3.x3);

    constraint x1 == foo_i1_1.x1;
    constraint x2 == bar_i2_2.x2;
    constraint x3 == bar_i2_3.x3;
}

// parsed <<<
// interface ::Foo {
//     storage {
//         x: int,
//         y: int,
//     }
//     predicate I1 (
//         x1: int,
//         x2: b256,
//         x3: bool,
//     );
//     predicate I2 (
//         x1: int,
//         x2: b256,
//         x3: bool,
//     );
//     predicate I3();
// }
// interface ::Bar {
//     storage {
//         x: int,
//         z: b256,
//     }
//     predicate I1 (
//         x1: int,
//         x2: b256,
//         x3: bool,
//     );
//     predicate I2 (
//         x1: int,
//         x2: b256,
//         x3: bool,
//     );
//     predicate I3();
// }
// 
// predicate ::Simple(
//     ::addr1: b256,
//     ::addr2: b256,
//     ::addr3: b256,
//     ::addr4: b256,
//     ::x1: int,
//     ::x2: b256,
//     ::x3: bool,
//     ::foo_i1_1: {x1: int, x2: b256, x3: bool},
//     ::foo_i1_2: {x1: int, x2: b256, x3: bool},
//     ::bar_i2_1: {x1: int, x2: b256, x3: bool},
//     ::bar_i2_2: {x1: int, x2: b256, x3: bool},
//     ::bar_i2_3: {x1: int, x2: b256, x3: bool},
// ) {
//     let ::x = ::Foo[[::addr1]]::storage::x;
//     let ::y = ::Foo[[::addr1]]::storage::y;
//     let ::z = ::Bar[[::addr2]]::storage::z;
//     constraint ::Foo[[::addr1]]::I1[[::addr3]](::foo_i1_1.x1, ::foo_i1_1.x2, ::foo_i1_1.x3);
//     constraint ::Foo[[::addr1]]::I1[[::addr3]](::foo_i1_2.x1, ::foo_i1_2.x2, ::foo_i1_2.x3);
//     constraint ::Bar[[::addr2]]::I1[[::addr4]](::bar_i2_1.x1, ::bar_i2_1.x2, ::bar_i2_1.x3);
//     constraint ::Bar[[::addr2]]::I1[[::addr4]](::bar_i2_2.x1, ::bar_i2_2.x2, ::bar_i2_2.x3);
//     constraint ::Bar[[::addr2]]::I1[[::addr4]](::bar_i2_3.x1, ::bar_i2_3.x2, ::bar_i2_3.x3);
//     constraint (::x1 == ::foo_i1_1.x1);
//     constraint (::x2 == ::bar_i2_2.x2);
//     constraint (::x3 == ::bar_i2_3.x3);
// }
// >>>

// flattened <<<
// interface ::Foo {
//     storage {
//         x: int,
//         y: int,
//     }
//     predicate I1 (
//         x1: int,
//         x2: b256,
//         x3: bool,
//     );
//     predicate I2 (
//         x1: int,
//         x2: b256,
//         x3: bool,
//     );
//     predicate I3();
// }
// interface ::Bar {
//     storage {
//         x: int,
//         z: b256,
//     }
//     predicate I1 (
//         x1: int,
//         x2: b256,
//         x3: bool,
//     );
//     predicate I2 (
//         x1: int,
//         x2: b256,
//         x3: bool,
//     );
//     predicate I3();
// }
// 
// predicate ::Simple(
//     ::addr1: b256,
//     ::addr2: b256,
//     ::addr3: b256,
//     ::addr4: b256,
//     ::x1: int,
//     ::x2: b256,
//     ::x3: bool,
//     ::foo_i1_1: {x1: int, x2: b256, x3: bool},
//     ::foo_i1_2: {x1: int, x2: b256, x3: bool},
//     ::bar_i2_1: {x1: int, x2: b256, x3: bool},
//     ::bar_i2_2: {x1: int, x2: b256, x3: bool},
//     ::bar_i2_3: {x1: int, x2: b256, x3: bool},
// ) {
//     let ::x: int = __storage_get_extern(::addr1, {0});
//     let ::y: int = __storage_get_extern(::addr1, {1});
//     let ::z: b256 = __storage_get_extern(::addr2, {1});
//     constraint ::Foo[[::addr1]]::I1[[::addr3]](::foo_i1_1.x1, ::foo_i1_1.x2, ::foo_i1_1.x3);
//     constraint ::Foo[[::addr1]]::I1[[::addr3]](::foo_i1_2.x1, ::foo_i1_2.x2, ::foo_i1_2.x3);
//     constraint ::Bar[[::addr2]]::I1[[::addr4]](::bar_i2_1.x1, ::bar_i2_1.x2, ::bar_i2_1.x3);
//     constraint ::Bar[[::addr2]]::I1[[::addr4]](::bar_i2_2.x1, ::bar_i2_2.x2, ::bar_i2_2.x3);
//     constraint ::Bar[[::addr2]]::I1[[::addr4]](::bar_i2_3.x1, ::bar_i2_3.x2, ::bar_i2_3.x3);
//     constraint (::x1 == ::foo_i1_1.x1);
//     constraint (::x2 == ::bar_i2_2.x2);
//     constraint (::x3 == ::bar_i2_3.x3);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
