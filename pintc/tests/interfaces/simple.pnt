interface Foo {
    storage {
        x: int,
        y: int,
    }

    predicate I1(
        x1: int,
        x2: b256,
        x3: bool,
    );

    predicate I2(
        x1: int,
        x2: b256,
        x3: bool,
    );

    predicate I3();
}

interface Bar {
    storage {
        x: int,
        z: b256,
    }

    predicate I1(
        x1: int,
        x2: b256,
        x3: bool,
    );

    predicate I2(
        x1: int,
        x2: b256,
        x3: bool,
    );

    predicate I3();
}

predicate Simple(
    addr1: b256,
    addr2: b256,
    addr3: b256,
    addr4: b256,
    x1: int,
    x2: b256,
    x3: bool,
) {

    interface FooInstance = Foo(addr1);
    interface BarInstance = Bar(addr2);

    state x = FooInstance::storage::x;
    state y = FooInstance::storage::y;
    state z = BarInstance::storage::z;

    predicate FooI1Instance1 = FooInstance::I1(addr3);
    predicate FooI1Instance2 = FooInstance::I1(addr3);

    predicate BarI2Instance1 = BarInstance::I2(addr4);
    predicate BarI2Instance2 = BarInstance::I2(addr4);
    predicate BarI2Instance3 = BarInstance::I2(addr4);

    constraint x1 == FooI1Instance1::x1;
    constraint x2 == BarI2Instance2::x2;
    constraint x3 == BarI2Instance3::x3;
}

// parsed <<<
// interface ::Foo {
//     storage {
//         x: int,
//         y: int,
//     }
//     predicate I1 (
//         x1: int,
//         x2: b256,
//         x3: bool,
//     );
//     predicate I2 (
//         x1: int,
//         x2: b256,
//         x3: bool,
//     );
//     predicate I3();
// }
// interface ::Bar {
//     storage {
//         x: int,
//         z: b256,
//     }
//     predicate I1 (
//         x1: int,
//         x2: b256,
//         x3: bool,
//     );
//     predicate I2 (
//         x1: int,
//         x2: b256,
//         x3: bool,
//     );
//     predicate I3();
// }
// 
// predicate ::Simple(
//     ::addr1: b256,
//     ::addr2: b256,
//     ::addr3: b256,
//     ::addr4: b256,
//     ::x1: int,
//     ::x2: b256,
//     ::x3: bool,
//     __::FooI1Instance1_pathway: int,
//     __::FooI1Instance2_pathway: int,
//     __::BarI2Instance1_pathway: int,
//     __::BarI2Instance2_pathway: int,
//     __::BarI2Instance3_pathway: int,
// ) {
//     interface ::FooInstance = ::Foo(::addr1)
//     interface ::BarInstance = ::Bar(::addr2)
//     predicate ::FooI1Instance1 = ::FooInstance::I1(::addr3)
//     predicate ::FooI1Instance2 = ::FooInstance::I1(::addr3)
//     predicate ::BarI2Instance1 = ::BarInstance::I2(::addr4)
//     predicate ::BarI2Instance2 = ::BarInstance::I2(::addr4)
//     predicate ::BarI2Instance3 = ::BarInstance::I2(::addr4)
//     state ::x = ::FooInstance::storage::x;
//     state ::y = ::FooInstance::storage::y;
//     state ::z = ::BarInstance::storage::z;
//     constraint (::x1 == ::FooI1Instance1::x1);
//     constraint (::x2 == ::BarI2Instance2::x2);
//     constraint (::x3 == ::BarI2Instance3::x3);
// }
// >>>

// flattened <<<
// interface ::Foo {
//     storage {
//         x: int,
//         y: int,
//     }
//     predicate I1 (
//         x1: int,
//         x2: b256,
//         x3: bool,
//     );
//     predicate I2 (
//         x1: int,
//         x2: b256,
//         x3: bool,
//     );
//     predicate I3();
// }
// interface ::Bar {
//     storage {
//         x: int,
//         z: b256,
//     }
//     predicate I1 (
//         x1: int,
//         x2: b256,
//         x3: bool,
//     );
//     predicate I2 (
//         x1: int,
//         x2: b256,
//         x3: bool,
//     );
//     predicate I3();
// }
// 
// predicate ::Simple(
//     ::addr1: b256,
//     ::addr2: b256,
//     ::addr3: b256,
//     ::addr4: b256,
//     ::x1: int,
//     ::x2: b256,
//     ::x3: bool,
//     __::FooI1Instance1_pathway: int,
//     __::FooI1Instance2_pathway: int,
//     __::BarI2Instance1_pathway: int,
//     __::BarI2Instance2_pathway: int,
//     __::BarI2Instance3_pathway: int,
// ) {
//     interface ::FooInstance = ::Foo(::addr1)
//     interface ::BarInstance = ::Bar(::addr2)
//     predicate ::FooI1Instance1 = ::FooInstance::I1(::addr3)
//     predicate ::FooI1Instance2 = ::FooInstance::I1(::addr3)
//     predicate ::BarI2Instance1 = ::BarInstance::I2(::addr4)
//     predicate ::BarI2Instance2 = ::BarInstance::I2(::addr4)
//     predicate ::BarI2Instance3 = ::BarInstance::I2(::addr4)
//     state ::x: int = __storage_get_extern(::addr1, {0});
//     state ::y: int = __storage_get_extern(::addr1, {1});
//     state ::z: b256 = __storage_get_extern(::addr2, {1});
//     constraint (::x1 == __pub_var(__::FooI1Instance1_pathway, {0}));
//     constraint (::x2 == __pub_var(__::BarI2Instance2_pathway, {1}));
//     constraint (::x3 == __pub_var(__::BarI2Instance3_pathway, {2}));
//     constraint __eq_set(__mut_keys(), {0});
//     constraint (__predicate_at(__::FooI1Instance1_pathway) == {::addr1, ::addr3});
//     constraint (__predicate_at(__::FooI1Instance2_pathway) == {::addr1, ::addr3});
//     constraint (__predicate_at(__::BarI2Instance1_pathway) == {::addr2, ::addr4});
//     constraint (__predicate_at(__::BarI2Instance2_pathway) == {::addr2, ::addr4});
//     constraint (__predicate_at(__::BarI2Instance3_pathway) == {::addr2, ::addr4});
// }
// >>>
