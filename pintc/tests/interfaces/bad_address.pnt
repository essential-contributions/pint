interface Foo {
    storage {
        x: int,
        y: int,
    }

    predicate I1(
        x: int,
        y: b256,
    );
}

predicate Simple(addr: b256) {
    constraint Foo@[0 + true]::I1@[addr](0, 0x0000000000000000000000000000000000000000000000000000000000000000);
    constraint Foo@[{1, 2}]::I1@[addr](0, 0x0000000000000000000000000000000000000000000000000000000000000000);

    constraint Foo@[addr]::I1@[0 + true](0, 0x0000000000000000000000000000000000000000000000000000000000000000);
    constraint Foo@[addr]::I1@[false](0, 0x0000000000000000000000000000000000000000000000000000000000000000);
}

// parsed <<<
// interface ::Foo {
//     storage {
//         x: int,
//         y: int,
//     }
//     predicate I1 (
//         x: int,
//         y: b256,
//     );
// }
// 
// predicate ::Simple(
//     ::addr: b256,
// ) {
//     constraint ::Foo@[(0 + true)]::I1@[::addr](0, 0x0000000000000000000000000000000000000000000000000000000000000000);
//     constraint ::Foo@[{1, 2}]::I1@[::addr](0, 0x0000000000000000000000000000000000000000000000000000000000000000);
//     constraint ::Foo@[::addr]::I1@[(0 + true)](0, 0x0000000000000000000000000000000000000000000000000000000000000000);
//     constraint ::Foo@[::addr]::I1@[false](0, 0x0000000000000000000000000000000000000000000000000000000000000000);
// }
// >>>

// typecheck_failure <<<
// operator invalid type error
// @181..189: invalid non-numeric type `bool` for operator `+`
// address expression type error
// @294..300: address expression has unexpected type `{int, int}`
// @294..300: expecting type `b256`
// operator invalid type error
// @417..425: invalid non-numeric type `bool` for operator `+`
// address expression type error
// @530..535: address expression has unexpected type `bool`
// @530..535: expecting type `b256`
// >>>
