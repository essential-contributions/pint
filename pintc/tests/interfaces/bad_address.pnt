interface Foo {
    storage {
        x: int,
        y: int,
    }

    predicate I1(
        x: int,
        y: b256,
    );
}

predicate Simple(addr: b256) {
    interface FooInstance1 = Foo(0 + true);
    interface FooInstance2 = Foo({1, 2});

    interface FooInstance = Foo(addr);
    predicate I1Instance1 = FooInstance::I1(0 + true);
    predicate I1Instance2 = FooInstance::I1(false);
}

// parsed <<<
// interface ::Foo {
//     storage {
//         x: int,
//         y: int,
//     }
//     predicate I1 (
//         x: int,
//         y: b256,
//     );
// }
// 
// predicate ::Simple(
//     ::addr: b256,
//     __::I1Instance1_pathway: int,
//     __::I1Instance2_pathway: int,
// ) {
//     interface ::FooInstance1 = ::Foo((0 + true))
//     interface ::FooInstance2 = ::Foo({1, 2})
//     interface ::FooInstance = ::Foo(::addr)
//     predicate ::I1Instance1 = ::FooInstance::I1((0 + true))
//     predicate ::I1Instance2 = ::FooInstance::I1(false)
// }
// >>>

// typecheck_failure <<<
// operator invalid type error
// @194..202: invalid non-numeric type `bool` for operator `+`
// address expression type error
// @194..202: address expression has unexpected type `int`
// @194..202: expecting type `b256`
// address expression type error
// @238..244: address expression has unexpected type `{int, int}`
// @238..244: expecting type `b256`
// operator invalid type error
// @331..339: invalid non-numeric type `bool` for operator `+`
// address expression type error
// @331..339: address expression has unexpected type `int`
// @331..339: expecting type `b256`
// address expression type error
// @386..391: address expression has unexpected type `bool`
// @386..391: expecting type `b256`
// >>>
