interface Foo {
    storage {
        x: int,
        y: int,
    }

    predicate I1 {
        pub var x: int;
        pub var y: b256;
    }
}

predicate Simple {
    interface FooInstance1 = Foo(0 + true);
    interface FooInstance2 = Foo({1, 2});

    var addr: b256;
    interface FooInstance = Foo(addr);
    predicate I1Instance1 = FooInstance::I1(0 + true);
    predicate I1Instance2 = FooInstance::I1(false);
}

// parsed <<<
// interface ::Foo {
//     storage {
//         x: int,
//         y: int,
//     }
//     predicate I1 {
//         pub var x: int;
//         pub var y: b256;
//     }
// }
//
// predicate ::Simple {
//     interface ::FooInstance1 = ::Foo((0 + true))
//     interface ::FooInstance2 = ::Foo({1, 2})
//     interface ::FooInstance = ::Foo(::addr)
//     predicate ::I1Instance1 = ::FooInstance::I1((0 + true))
//     predicate ::I1Instance2 = ::FooInstance::I1(false)
//     var ::addr: b256;
//     var __::I1Instance1_pathway: int;
//     var __::I1Instance2_pathway: int;
// }
// >>>

// typecheck_failure <<<
// binary operator type error
// @202..206: operator `+` argument has unexpected type `bool`
// address expression type error
// @198..206: address expression has unexpected type `int`
// @198..206: expecting type `b256`
// address expression type error
// @242..248: address expression has unexpected type `{int, int}`
// @242..248: expecting type `b256`
// binary operator type error
// @359..363: operator `+` argument has unexpected type `bool`
// address expression type error
// @355..363: address expression has unexpected type `int`
// @355..363: expecting type `b256`
// address expression type error
// @410..415: address expression has unexpected type `bool`
// @410..415: expecting type `b256`
// >>>
