predicate Simple(
    z: int, 
    q: int,

    foo_nonce: int,
    foo_x: int,
    foo_y: int,
    foo_w: b256,
    foo_b: bool,
    foo_c: { int, { int, b256 }, bool },
    foo_d: int[3],
    foo_e: { int, int }[2][3],
        
    bar_nonce: int,
    bar_x: int,
    bar_y: int,
    bar_w: b256,
    bar_b: bool,
    bar_c: { int, { int, b256 }, bool },
    bar_d: int[3],
    bar_e: { int, int }[2][3],
) {
    constraint Foo[[]](
        foo_nonce,
        foo_x,
        foo_y,
        foo_w,
        foo_b,
        foo_c,
        foo_d,
        foo_e,
    );

    constraint foo_x + z == foo_y + q;
    constraint foo_w == 0x0000000000000009000000000000000900000000000000090000000000000009;
    constraint foo_b == true;
    constraint !foo_b == false;

    constraint foo_c == 
        { 42, { 43, 0x0000000000000008000000000000000800000000000000080000000000000008}, true };
    constraint foo_c.0 == 42;
    constraint foo_c.1 == { 43, 0x0000000000000008000000000000000800000000000000080000000000000008};
    constraint foo_c.1.0 == 43;
    constraint foo_c.1.1 == 0x0000000000000008000000000000000800000000000000080000000000000008;
    constraint foo_c.2 == true;

    constraint foo_d == [91, 92, 93];
    constraint foo_d[0] == 91;
    constraint foo_d[1] == 92;
    constraint foo_d[2] == 93;

    constraint foo_e == [
        [ 
            { 0, 1 },
            { 2, 3 },
            { 4, 5 },
        ],
        [
            { 6, 7 },
            { 8, 9 },
            { 10, 11 },
        ]
    ];

    constraint foo_e[0][0] == { 0, 1 };
    constraint foo_e[1] == [{ 6, 7 }, { 8, 9 }, { 10, 11 }];

    constraint Bar[[]](
        bar_nonce,
        bar_x,
        bar_y,
        bar_w,
        bar_b,
        bar_c,
        bar_d,
        bar_e,
    );

    constraint bar_x + z == bar_y + q;
    constraint bar_w == 0x000000000000000A000000000000000A000000000000000A000000000000000A;
    constraint bar_b == false;
    constraint !bar_b == true;

    constraint bar_c == 
        { 142, { 143, 0x0000000000000009000000000000000900000000000000090000000000000009}, false };
    constraint bar_c.0 == 142;
    constraint bar_c.1 == { 143, 0x0000000000000009000000000000000900000000000000090000000000000009};
    constraint bar_c.1.0 == 143;
    constraint bar_c.1.1 == 0x0000000000000009000000000000000900000000000000090000000000000009;
    constraint bar_c.2 == false;

    constraint bar_d == [191, 192, 193];
    constraint bar_d[0] == 191;
    constraint bar_d[1] == 192;
    constraint bar_d[2] == 193;

    constraint bar_e == [
        [ 
            { 10, 11 },
            { 12, 13 },
            { 14, 15 },
        ],
        [
            { 16, 17 },
            { 18, 19 },
            { 110, 111 },
        ]
    ];

    constraint bar_e[0][0] == { 10, 11 };
    constraint bar_e[1] == [{ 16, 17 }, { 18, 19 }, { 110, 111 }];
}

predicate Foo(
    nonce: int,
    x: int,
    y: int,
    w: b256,
    b: bool,
    c: { int, { int, b256 }, bool },
    d: int[3], 
    e: { int, int }[2][3],
) {
    constraint nonce == 0;
}

predicate Bar(
    nonce: int,
    x: int,
    y: int,
    w: b256,
    b: bool,
    c: { int, { int, b256 }, bool },
    d: int[3], 
    e: { int, int }[2][3],
) {
    constraint nonce == 1;
}

// parsed <<<
// predicate ::Simple(
//     ::z: int,
//     ::q: int,
//     ::foo_nonce: int,
//     ::foo_x: int,
//     ::foo_y: int,
//     ::foo_w: b256,
//     ::foo_b: bool,
//     ::foo_c: {int, {int, b256}, bool},
//     ::foo_d: int[3],
//     ::foo_e: {int, int}[3][2],
//     ::bar_nonce: int,
//     ::bar_x: int,
//     ::bar_y: int,
//     ::bar_w: b256,
//     ::bar_b: bool,
//     ::bar_c: {int, {int, b256}, bool},
//     ::bar_d: int[3],
//     ::bar_e: {int, int}[3][2],
// ) {
//     constraint ::Foo[[]](::foo_nonce, ::foo_x, ::foo_y, ::foo_w, ::foo_b, ::foo_c, ::foo_d, ::foo_e);
//     constraint ((::foo_x + ::z) == (::foo_y + ::q));
//     constraint (::foo_w == 0x0000000000000009000000000000000900000000000000090000000000000009);
//     constraint (::foo_b == true);
//     constraint (!::foo_b == false);
//     constraint (::foo_c == {42, {43, 0x0000000000000008000000000000000800000000000000080000000000000008}, true});
//     constraint (::foo_c.0 == 42);
//     constraint (::foo_c.1 == {43, 0x0000000000000008000000000000000800000000000000080000000000000008});
//     constraint (::foo_c.1.0 == 43);
//     constraint (::foo_c.1.1 == 0x0000000000000008000000000000000800000000000000080000000000000008);
//     constraint (::foo_c.2 == true);
//     constraint (::foo_d == [91, 92, 93]);
//     constraint (::foo_d[0] == 91);
//     constraint (::foo_d[1] == 92);
//     constraint (::foo_d[2] == 93);
//     constraint (::foo_e == [[{0, 1}, {2, 3}, {4, 5}], [{6, 7}, {8, 9}, {10, 11}]]);
//     constraint (::foo_e[0][0] == {0, 1});
//     constraint (::foo_e[1] == [{6, 7}, {8, 9}, {10, 11}]);
//     constraint ::Bar[[]](::bar_nonce, ::bar_x, ::bar_y, ::bar_w, ::bar_b, ::bar_c, ::bar_d, ::bar_e);
//     constraint ((::bar_x + ::z) == (::bar_y + ::q));
//     constraint (::bar_w == 0x000000000000000A000000000000000A000000000000000A000000000000000A);
//     constraint (::bar_b == false);
//     constraint (!::bar_b == true);
//     constraint (::bar_c == {142, {143, 0x0000000000000009000000000000000900000000000000090000000000000009}, false});
//     constraint (::bar_c.0 == 142);
//     constraint (::bar_c.1 == {143, 0x0000000000000009000000000000000900000000000000090000000000000009});
//     constraint (::bar_c.1.0 == 143);
//     constraint (::bar_c.1.1 == 0x0000000000000009000000000000000900000000000000090000000000000009);
//     constraint (::bar_c.2 == false);
//     constraint (::bar_d == [191, 192, 193]);
//     constraint (::bar_d[0] == 191);
//     constraint (::bar_d[1] == 192);
//     constraint (::bar_d[2] == 193);
//     constraint (::bar_e == [[{10, 11}, {12, 13}, {14, 15}], [{16, 17}, {18, 19}, {110, 111}]]);
//     constraint (::bar_e[0][0] == {10, 11});
//     constraint (::bar_e[1] == [{16, 17}, {18, 19}, {110, 111}]);
// }
// 
// predicate ::Foo(
//     ::nonce: int,
//     ::x: int,
//     ::y: int,
//     ::w: b256,
//     ::b: bool,
//     ::c: {int, {int, b256}, bool},
//     ::d: int[3],
//     ::e: {int, int}[3][2],
// ) {
//     constraint (::nonce == 0);
// }
// 
// predicate ::Bar(
//     ::nonce: int,
//     ::x: int,
//     ::y: int,
//     ::w: b256,
//     ::b: bool,
//     ::c: {int, {int, b256}, bool},
//     ::d: int[3],
//     ::e: {int, int}[3][2],
// ) {
//     constraint (::nonce == 1);
// }
// >>>

// flattened <<<
// predicate ::Simple(
//     ::z: int,
//     ::q: int,
//     ::foo_nonce: int,
//     ::foo_x: int,
//     ::foo_y: int,
//     ::foo_w: b256,
//     ::foo_b: bool,
//     ::foo_c: {int, {int, b256}, bool},
//     ::foo_d: int[3],
//     ::foo_e: {int, int}[3][2],
//     ::bar_nonce: int,
//     ::bar_x: int,
//     ::bar_y: int,
//     ::bar_w: b256,
//     ::bar_b: bool,
//     ::bar_c: {int, {int, b256}, bool},
//     ::bar_d: int[3],
//     ::bar_e: {int, int}[3][2],
// ) {
//     constraint ::Foo[[]](::foo_nonce, ::foo_x, ::foo_y, ::foo_w, ::foo_b, ::foo_c, ::foo_d, ::foo_e);
//     constraint ((::foo_x + ::z) == (::foo_y + ::q));
//     constraint (::foo_w == 0x0000000000000009000000000000000900000000000000090000000000000009);
//     constraint (::foo_b == true);
//     constraint (!::foo_b == false);
//     constraint (::foo_c == {42, {43, 0x0000000000000008000000000000000800000000000000080000000000000008}, true});
//     constraint (::foo_c.0 == 42);
//     constraint (::foo_c.1 == {43, 0x0000000000000008000000000000000800000000000000080000000000000008});
//     constraint (::foo_c.1.0 == 43);
//     constraint (::foo_c.1.1 == 0x0000000000000008000000000000000800000000000000080000000000000008);
//     constraint (::foo_c.2 == true);
//     constraint (::foo_d == [91, 92, 93]);
//     constraint (::foo_d[0] == 91);
//     constraint (::foo_d[1] == 92);
//     constraint (::foo_d[2] == 93);
//     constraint (::foo_e == [[{0, 1}, {2, 3}, {4, 5}], [{6, 7}, {8, 9}, {10, 11}]]);
//     constraint (::foo_e[0][0] == {0, 1});
//     constraint (::foo_e[1] == [{6, 7}, {8, 9}, {10, 11}]);
//     constraint ::Bar[[]](::bar_nonce, ::bar_x, ::bar_y, ::bar_w, ::bar_b, ::bar_c, ::bar_d, ::bar_e);
//     constraint ((::bar_x + ::z) == (::bar_y + ::q));
//     constraint (::bar_w == 0x000000000000000A000000000000000A000000000000000A000000000000000A);
//     constraint (::bar_b == false);
//     constraint (!::bar_b == true);
//     constraint (::bar_c == {142, {143, 0x0000000000000009000000000000000900000000000000090000000000000009}, false});
//     constraint (::bar_c.0 == 142);
//     constraint (::bar_c.1 == {143, 0x0000000000000009000000000000000900000000000000090000000000000009});
//     constraint (::bar_c.1.0 == 143);
//     constraint (::bar_c.1.1 == 0x0000000000000009000000000000000900000000000000090000000000000009);
//     constraint (::bar_c.2 == false);
//     constraint (::bar_d == [191, 192, 193]);
//     constraint (::bar_d[0] == 191);
//     constraint (::bar_d[1] == 192);
//     constraint (::bar_d[2] == 193);
//     constraint (::bar_e == [[{10, 11}, {12, 13}, {14, 15}], [{16, 17}, {18, 19}, {110, 111}]]);
//     constraint (::bar_e[0][0] == {10, 11});
//     constraint (::bar_e[1] == [{16, 17}, {18, 19}, {110, 111}]);
//     constraint __eq_set(__mut_keys(), {0});
// }
// 
// predicate ::Foo(
//     ::nonce: int,
//     ::x: int,
//     ::y: int,
//     ::w: b256,
//     ::b: bool,
//     ::c: {int, {int, b256}, bool},
//     ::d: int[3],
//     ::e: {int, int}[3][2],
// ) {
//     constraint (::nonce == 0);
//     constraint __eq_set(__mut_keys(), {0});
// }
// 
// predicate ::Bar(
//     ::nonce: int,
//     ::x: int,
//     ::y: int,
//     ::w: b256,
//     ::b: bool,
//     ::c: {int, {int, b256}, bool},
//     ::d: int[3],
//     ::e: {int, int}[3][2],
// ) {
//     constraint (::nonce == 1);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
