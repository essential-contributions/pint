predicate test {
    var a: int[1][2][3];
    var b: int[2][3];

    constraint a[0][0][0] == 0;
    constraint a[0][0][1] == 1;
    constraint a[0][1][0] == 2;
    constraint a[0][1][2] == 4;

    constraint forall i in 0..1, j in 0..2 {
        b[i][j] - a[0][i][j] == 0
    };

    var c = b;
}

// parsed <<<
// predicate ::test {
//     var ::a: int[3][2][1];
//     var ::b: int[3][2];
//     var ::c;
//     constraint (::a[0][0][0] == 0);
//     constraint (::a[0][0][1] == 1);
//     constraint (::a[0][1][0] == 2);
//     constraint (::a[0][1][2] == 4);
//     constraint forall i in 0..1, j in 0..2, { ((::b[::i][::j] - ::a[0][::i][::j]) == 0) };
//     constraint (::c == ::b);
// }
// >>>

// flattened <<<
// predicate ::test {
//     var ::a: int[3][2][1];
//     var ::b: int[3][2];
//     var ::c: int[3][2];
//     constraint (::a[0][0][0] == 0);
//     constraint (::a[0][0][1] == 1);
//     constraint (::a[0][1][0] == 2);
//     constraint (::a[0][1][2] == 4);
//     constraint ((((((true && ((::b[0][0] - ::a[0][0][0]) == 0)) && ((::b[0][1] - ::a[0][0][1]) == 0)) && ((::b[0][2] - ::a[0][0][2]) == 0)) && ((::b[1][0] - ::a[0][1][0]) == 0)) && ((::b[1][1] - ::a[0][1][1]) == 0)) && ((::b[1][2] - ::a[0][1][2]) == 0));
//     constraint (::c == ::b);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
