
predicate test() {
  let a0 = [[1]];
  let a1 = [[1, 1]];
  let a2 = [[1], [1]];
  let a3 = [[1, 1], [1]];
  let a4 = [[1, 1], [1], [1]];

  let a5 = [[1] ];
  let a6 = [[1, 1] ];
  let a7 = [[1], [1] ];
  let a8 = [[1, 1], [1, 1] ];
  let a9 = [[1, 1], [1, 1], [1, 1] ];

  let a10 = [[1], ];
  let a11 = [[1, 1], ];
  let a12 = [[1], [1], ];
  let a13 = [[1, 1], [1, 1], ];
  let a14 = [[1, 1], [1, 1], [1, 1], ];

  let a15 = [[[1], ], ];
  let a16 = [[[1, 1], [1, 1]], [[1, 1], [1, 1]]];
  let a17 = [[[1], [1], ]];
  let a18 = [[[[1, 1], [1, 1], ]], [[[1, 1], [1, 1], ]]];
}

// parsed <<<
// predicate ::test(
// ) {
//     let ::a0 = [[1]];
//     let ::a1 = [[1, 1]];
//     let ::a2 = [[1], [1]];
//     let ::a3 = [[1, 1], [1]];
//     let ::a4 = [[1, 1], [1], [1]];
//     let ::a5 = [[1]];
//     let ::a6 = [[1, 1]];
//     let ::a7 = [[1], [1]];
//     let ::a8 = [[1, 1], [1, 1]];
//     let ::a9 = [[1, 1], [1, 1], [1, 1]];
//     let ::a10 = [[1]];
//     let ::a11 = [[1, 1]];
//     let ::a12 = [[1], [1]];
//     let ::a13 = [[1, 1], [1, 1]];
//     let ::a14 = [[1, 1], [1, 1], [1, 1]];
//     let ::a15 = [[[1]]];
//     let ::a16 = [[[1, 1], [1, 1]], [[1, 1], [1, 1]]];
//     let ::a17 = [[[1], [1]]];
//     let ::a18 = [[[[1, 1], [1, 1]]], [[[1, 1], [1, 1]]]];
// }
// >>>

// flattened <<<
// predicate ::test(
// ) {
//     let ::a0: int[1][1] = [[1]];
//     let ::a1: int[2][1] = [[1, 1]];
//     let ::a2: int[1][2] = [[1], [1]];
//     let ::a3: int[2][2] = [[1, 1], [1]];
//     let ::a4: int[2][3] = [[1, 1], [1], [1]];
//     let ::a5: int[1][1] = [[1]];
//     let ::a6: int[2][1] = [[1, 1]];
//     let ::a7: int[1][2] = [[1], [1]];
//     let ::a8: int[2][2] = [[1, 1], [1, 1]];
//     let ::a9: int[2][3] = [[1, 1], [1, 1], [1, 1]];
//     let ::a10: int[1][1] = [[1]];
//     let ::a11: int[2][1] = [[1, 1]];
//     let ::a12: int[1][2] = [[1], [1]];
//     let ::a13: int[2][2] = [[1, 1], [1, 1]];
//     let ::a14: int[2][3] = [[1, 1], [1, 1], [1, 1]];
//     let ::a15: int[1][1][1] = [[[1]]];
//     let ::a16: int[2][2][2] = [[[1, 1], [1, 1]], [[1, 1], [1, 1]]];
//     let ::a17: int[1][2][1] = [[[1], [1]]];
//     let ::a18: int[2][2][1][2] = [[[[1, 1], [1, 1]]], [[[1, 1], [1, 1]]]];
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
