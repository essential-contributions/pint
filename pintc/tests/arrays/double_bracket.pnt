storage {
    b0: (int[2] => {int, (int[3] => int)}),
    b1: (int[2][2] => int),
    b2: {int, ( int[2][2] => int[2] )},
}

predicate test() {
  let a0 = [[1]];
  let a1 = [[1, 1]];
  let a2 = [[1], [1]];
  let a3 = [[1, 1], [1]];
  let a4 = [[1, 1], [1], [1]];

  let a5 = [[1] ];
  let a6 = [[1, 1] ];
  let a7 = [[1], [1] ];
  let a8 = [[1, 1], [1, 1] ];
  let a9 = [[1, 1], [1, 1], [1, 1] ];

  let a10 = [[1], ];
  let a11 = [[1, 1], ];
  let a12 = [[1], [1], ];
  let a13 = [[1, 1], [1, 1], ];
  let a14 = [[1, 1], [1, 1], [1, 1], ];

  let a15 = [[[1], ], ];
  let a16 = [[[1, 1], [1, 1]], [[1, 1], [1, 1]]];
  let a17 = [[[1], [1], ]];
  let a18 = [[[[1, 1], [1, 1], ]], [[[1, 1], [1, 1], ]]];

  let b0_access_1 = storage::b0[[1, 2]].1[[5, 6, 7]];
  let b0_access_2 = storage::b0[ [1, 2]].1;
  let b0_access_3 = storage::b0[[1, 2] ] .1 [ [5, 6, 7]];
  let b0_access_4 = storage::b0[[1, 2]];

  let b1_access_1 = storage::b1[[[2, 2], [3, 4]]];
  let b1_access_2 = storage::b1[[ [2, 2], [3, 4]]];
  let b1_access_3 = storage::b1[ [[2, 2], [3, 4]]];
  let b1_access_4 = storage::b1[[[2, 2], [3, 4] ] ];
  let b1_access_5 = storage::b1[[[2, 2], [3, 4] ]];

  let b2_access_0 = storage::b2.1[[[2, 2], [3, 4] ]];
  let b2_access_1 = storage::b2.1[[[2, 2], [3, 4] ]][1];
}


// These failures are expected until all non-storage types are supported as storage map keys

// parsed <<<
// storage {
//     b0: ( int[2] => {int, ( int[3] => int )} ),
//     b1: ( int[2][2] => int ),
//     b2: {int, ( int[2][2] => int[2] )},
// }
//
// predicate ::test(
// ) {
//     let ::a0 = [[1]];
//     let ::a1 = [[1, 1]];
//     let ::a2 = [[1], [1]];
//     let ::a3 = [[1, 1], [1]];
//     let ::a4 = [[1, 1], [1], [1]];
//     let ::a5 = [[1]];
//     let ::a6 = [[1, 1]];
//     let ::a7 = [[1], [1]];
//     let ::a8 = [[1, 1], [1, 1]];
//     let ::a9 = [[1, 1], [1, 1], [1, 1]];
//     let ::a10 = [[1]];
//     let ::a11 = [[1, 1]];
//     let ::a12 = [[1], [1]];
//     let ::a13 = [[1, 1], [1, 1]];
//     let ::a14 = [[1, 1], [1, 1], [1, 1]];
//     let ::a15 = [[[1]]];
//     let ::a16 = [[[1, 1], [1, 1]], [[1, 1], [1, 1]]];
//     let ::a17 = [[[1], [1]]];
//     let ::a18 = [[[[1, 1], [1, 1]]], [[[1, 1], [1, 1]]]];
//     let ::b0_access_1 = storage::b0[[1, 2]].1[[5, 6, 7]];
//     let ::b0_access_2 = storage::b0[[1, 2]].1;
//     let ::b0_access_3 = storage::b0[[1, 2]].1[[5, 6, 7]];
//     let ::b0_access_4 = storage::b0[[1, 2]];
//     let ::b1_access_1 = storage::b1[[[2, 2], [3, 4]]];
//     let ::b1_access_2 = storage::b1[[[2, 2], [3, 4]]];
//     let ::b1_access_3 = storage::b1[[[2, 2], [3, 4]]];
//     let ::b1_access_4 = storage::b1[[[2, 2], [3, 4]]];
//     let ::b1_access_5 = storage::b1[[[2, 2], [3, 4]]];
//     let ::b2_access_0 = storage::b2.1[[[2, 2], [3, 4]]];
//     let ::b2_access_1 = storage::b2.1[[[2, 2], [3, 4]]][1];
// }
// >>>

// typecheck_failure <<<
// local variables cannot have storage types
// @760..800: found local variable of storage type ( int[3] => int ) here
// local variables cannot have storage types
// @862..899: found local variable of storage type {int, ( int[3] => int )} here
// type of local variable depends on the storage type `( int[3] => int )`
// >>>
