enum Num = Zero | One | Two | Three;

predicate test {
    var ary: int[Num];

    constraint ary[1] == 1;
}

// parsed <<<
// enum ::Num = Zero | One | Two | Three;
//
// predicate ::test {
//     var ::ary: int[::Num];
//     constraint (::ary[1] == 1);
// }
// >>>

// typecheck_failure <<<
// attempt to index an array with a mismatched value
// @98..99: array access must be with a `::Num` variant
// found access using type `int`
// constraint expression type error
// @83..105: constraint expression has unknown type
// @83..105: expecting type `bool`
// >>>
