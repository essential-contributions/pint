union Num = Zero | One | Two | Three;

predicate test(ary: int[Num]) {
    constraint ary[1] == 1;
}

// parsed <<<
// union ::Num = Zero | One | Two | Three;
// 
// predicate ::test(
//     ::ary: int[::Num],
// ) {
//     constraint (::ary[1] == 1);
// }
// >>>

// typecheck_failure <<<
// attempt to index an array with a mismatched value
// @90..91: array access must be with a `::Num` variant
// found access using type `int`
// >>>
