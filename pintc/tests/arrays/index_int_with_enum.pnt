enum Num = Zero | One | Two | Three;
let ary: int[4];

constraint ary[Num::One] == 1;

solve satisfy;

// intermediate <<<
// var ::ary: int[4];
// enum ::Num = Zero | One | Two | Three;
// constraint (::ary[::Num::One] == 1);
// solve satisfy;
// >>>

// typecheck_failure <<<
// attempt to index an array with a mismatched value
// @70..78: array access must be with an int value
// found access using type `::Num`
// compiler internal error: missing expr key in expr_types slotmap when checking constraint expr types
// >>>
