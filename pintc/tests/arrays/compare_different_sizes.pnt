predicate test(a: int[4], b: int[5], c: int[2]) {
    constraint b == [11, 22, 33, 44, 55];
    constraint c == [66, 77];

    constraint a == b;
    constraint a != c;
    constraint c != [88, 99, 111];
}

// parsed <<<
// predicate ::test(
//     ::a: int[4],
//     ::b: int[5],
//     ::c: int[2],
// ) {
//     constraint (::b == [11, 22, 33, 44, 55]);
//     constraint (::c == [66, 77]);
//     constraint (::a == ::b);
//     constraint (::a != ::c);
//     constraint (::c != [88, 99, 111]);
// }
// >>>

// flattening_failure <<<
// comparison between differently sized arrays
// @184..202: cannot compare arrays of different sizes
// the left-hand side argument of the `!=` operator has 2 elements while the right-hand side argument has 3 elements
// comparison between differently sized arrays
// @161..167: cannot compare arrays of different sizes
// the left-hand side argument of the `!=` operator has 4 elements while the right-hand side argument has 2 elements
// comparison between differently sized arrays
// @138..144: cannot compare arrays of different sizes
// the left-hand side argument of the `==` operator has 4 elements while the right-hand side argument has 5 elements
// >>>
