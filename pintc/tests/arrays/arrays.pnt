union Colour = Red | Green | Blue;

predicate test(
    a: int[5],
    a1: int,
    b: int[Colour][3],
    b_r_2: int,
    c: int[4],
    c1: int[4],
    cb: bool,
) {
    constraint a1 == a[1];

    constraint b_r_2 == b[Colour::Red][2];

    constraint c == [0, 1, 2, 3];
    constraint c1 == [0, 1, 2, 4];

    constraint cb == (c != c1);
}

// parsed <<<
// union ::Colour = Red | Green | Blue;
// 
// predicate ::test(
//     ::a: int[5],
//     ::a1: int,
//     ::b: int[3][::Colour],
//     ::b_r_2: int,
//     ::c: int[4],
//     ::c1: int[4],
//     ::cb: bool,
// ) {
//     constraint (::a1 == ::a[1]);
//     constraint (::b_r_2 == ::b[::Colour::Red][2]);
//     constraint (::c == [0, 1, 2, 3]);
//     constraint (::c1 == [0, 1, 2, 4]);
//     constraint (::cb == (::c != ::c1));
// }
// >>>

// flattened <<<
// union ::Colour = Red | Green | Blue;
// 
// predicate ::test(
//     ::a: int[5],
//     ::a1: int,
//     ::b: int[3][::Colour],
//     ::b_r_2: int,
//     ::c: int[4],
//     ::c1: int[4],
//     ::cb: bool,
// ) {
//     constraint (::a1 == ::a[1]);
//     constraint (::b_r_2 == ::b[::Colour::Red][2]);
//     constraint (::c == [0, 1, 2, 3]);
//     constraint (::c1 == [0, 1, 2, 4]);
//     constraint (::cb == (::c != ::c1));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
