var a: real[5];
var a1 = a[1];

enum Colour = Red | Green | Blue;
var b: real[Colour][3];
var b_r_2 = b[Colour::Red][2];

var c: int[4] = [0, 1, 2, 3];
var c1 = [0, 1, 2, 4];

var cb: bool = c != c1;

solve satisfy;

// intermediate <<<
// var ::a: real[5];
// var ::a1;
// var ::b: real[3][::Colour];
// var ::b_r_2;
// var ::c: int[4];
// var ::c1;
// var ::cb: bool;
// enum ::Colour = Red | Green | Blue;
// constraint (::a1 == ::a[1]);
// constraint (::b_r_2 == ::b[::Colour::Red][2]);
// constraint (::c == [0, 1, 2, 3]);
// constraint (::c1 == [0, 1, 2, 4]);
// constraint (::cb == (::c != ::c1));
// solve satisfy;
// >>>

// flattened <<<
// var ::a[0]: real;
// var ::a[1]: real;
// var ::a[2]: real;
// var ::a[3]: real;
// var ::a[4]: real;
// var ::a1: real;
// var ::b[0][0]: real;
// var ::b[0][1]: real;
// var ::b[0][2]: real;
// var ::b[1][0]: real;
// var ::b[1][1]: real;
// var ::b[1][2]: real;
// var ::b[2][0]: real;
// var ::b[2][1]: real;
// var ::b[2][2]: real;
// var ::b_r_2: real;
// var ::c[0]: int;
// var ::c[1]: int;
// var ::c[2]: int;
// var ::c[3]: int;
// var ::c1[0]: int;
// var ::c1[1]: int;
// var ::c1[2]: int;
// var ::c1[3]: int;
// var ::cb: int;
// enum ::Colour = Red | Green | Blue;
// constraint (::a1 == ::a[1]);
// constraint (::b_r_2 == ::b[0][2]);
// constraint ((((::c[0] == 0) && (::c[1] == 1)) && (::c[2] == 2)) && (::c[3] == 3));
// constraint ((((::c1[0] == 0) && (::c1[1] == 1)) && (::c1[2] == 2)) && (::c1[3] == 4));
// constraint (::cb == ((((::c[0] != ::c1[0]) && (::c[1] != ::c1[1])) && (::c[2] != ::c1[2])) && (::c[3] != ::c1[3])));
// solve satisfy;
// >>>
