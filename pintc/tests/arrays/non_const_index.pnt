predicate test(
    n: int,
    a: int[10],
) {
    constraint a[n] == 3;
}

// parsed <<<
// predicate ::test(
//     ::n: int,
//     ::a: int[10],
// ) {
//     constraint (::a[::n] == 3);
// }
// >>>

// flattening_failure <<<
// cannot find value `::n` in this scope
// @65..66: not found in this scope
// >>>
