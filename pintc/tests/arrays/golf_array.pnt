predicate test {
    // Generate a random 18-hole golf course.

    var h: int[18];

    constraint forall i in 0..17 {
        h[i] >= 3 && h[i] <= 5
    };

    var sum: int = h[0] + h[1] + h[2] + h[3] + h[4] + h[5] + h[6]
             + h[7] + h[8] + h[9] + h[10] + h[11] + h[12] + h[13]
             + h[14] + h[15] + h[16] + h[17];

    constraint sum == 72;
}


// parsed <<<<
// predicate ::test {
//     var ::h: int[18];
//     var ::sum: int;
//     constraint forall i in 0..17, { ((::h[::i] >= 3) && (::h[::i] <= 5)) };
//     constraint (::sum == (((((((((((((((((::h[0] + ::h[1]) + ::h[2]) + ::h[3]) + ::h[4]) + ::h[5]) + ::h[6]) + ::h[7]) + ::h[8]) + ::h[9]) + ::h[10]) + ::h[11]) + ::h[12]) + ::h[13]) + ::h[14]) + ::h[15]) + ::h[16]) + ::h[17]));
//     constraint (::sum == 72);
// }
// >>>

// flattened <<<
// predicate ::test {
//     var ::h: int[18];
//     var ::sum: int;
//     constraint ((((((((((((((((((1 && ((::h[0] >= 3) && (::h[0] <= 5))) && ((::h[1] >= 3) && (::h[1] <= 5))) && ((::h[2] >= 3) && (::h[2] <= 5))) && ((::h[3] >= 3) && (::h[3] <= 5))) && ((::h[4] >= 3) && (::h[4] <= 5))) && ((::h[5] >= 3) && (::h[5] <= 5))) && ((::h[6] >= 3) && (::h[6] <= 5))) && ((::h[7] >= 3) && (::h[7] <= 5))) && ((::h[8] >= 3) && (::h[8] <= 5))) && ((::h[9] >= 3) && (::h[9] <= 5))) && ((::h[10] >= 3) && (::h[10] <= 5))) && ((::h[11] >= 3) && (::h[11] <= 5))) && ((::h[12] >= 3) && (::h[12] <= 5))) && ((::h[13] >= 3) && (::h[13] <= 5))) && ((::h[14] >= 3) && (::h[14] <= 5))) && ((::h[15] >= 3) && (::h[15] <= 5))) && ((::h[16] >= 3) && (::h[16] <= 5))) && ((::h[17] >= 3) && (::h[17] <= 5)));
//     constraint (::sum == (((((((((((((((((::h[0] + ::h[1]) + ::h[2]) + ::h[3]) + ::h[4]) + ::h[5]) + ::h[6]) + ::h[7]) + ::h[8]) + ::h[9]) + ::h[10]) + ::h[11]) + ::h[12]) + ::h[13]) + ::h[14]) + ::h[15]) + ::h[16]) + ::h[17]));
//     constraint (::sum == 72);
// }
// >>>
