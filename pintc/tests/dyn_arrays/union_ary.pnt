union X = x | y(int) | z(bool);

predicate test(ary: X[]) {
    constraint match ary[1] {
        X::x => true,
        X::y(n) => n < 11,
        X::z(b) => !b,
    };
    constraint __len(ary) > 1;
}

// parsed <<<
// union ::X = x | y(int) | z(bool);
//
// predicate ::test(
//     ::ary: ::X[_],
// ) {
//     constraint match ::ary[1] { ::X::x => true, ::X::y(n) => (::n < 11), ::X::z(b) => !::b };
//     constraint (__len(::ary) > 1);
// }
// >>>

// flattened <<<
// union ::X = x | y(int) | z(bool);
//
// predicate ::test(
//     ::ary: ::X[_],
// ) {
//     constraint ((UnTag(::ary[1]) == 0) ? true : ((UnTag(::ary[1]) == 1) ? (UnVal(::ary[1], int) < 11) : !UnVal(::ary[1], bool)));
//     constraint (__len(::ary) > 1);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
