const a = 11;

predicate A(b: int, c: int) {
    constraint b == a;
    constraint c > a * 2;
}

predicate B(b: bool) {
    constraint b == (a < 22);
}

// parsed <<<
// const ::a = 11;
//
// predicate ::A(
//     ::b: int,
//     ::c: int,
// ) {
//     constraint (::b == ::a);
//     constraint (::c > (::a * 2));
// }
//
// predicate ::B(
//     ::b: bool,
// ) {
//     constraint (::b == (::a < 22));
// }
// >>>

// flattened <<<
// const ::a: int = 11;
//
// predicate ::A(
//     ::b: int,
//     ::c: int,
// ) {
//     constraint (::b == 11);
//     constraint (::c > (11 * 2));
// }
//
// predicate ::B(
//     ::b: bool,
// ) {
//     constraint (::b == (11 < 22));
// }
// >>>
