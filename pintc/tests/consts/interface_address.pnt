interface Counter {
    storage {
        counter: int,
    }
}

const ContractID: b256 = 0x0003000300030003000300030003000300030003000300030003000300030003;

predicate Foo() {
    state counter = Counter[[ContractID]]::storage::counter;
}

// parsed <<<
// const ::ContractID: b256 = 0x0003000300030003000300030003000300030003000300030003000300030003;
// interface ::Counter {
//     storage {
//         counter: int,
//     }
// }
// 
// predicate ::Foo(
// ) {
//     state ::counter = ::Counter[[::ContractID]]::storage::counter;
// }
// >>>

// flattened <<<
// const ::ContractID: b256 = 0x0003000300030003000300030003000300030003000300030003000300030003;
// interface ::Counter {
//     storage {
//         counter: int,
//     }
// }
// 
// predicate ::Foo(
// ) {
//     state ::counter: int = __storage_get_extern(::ContractID, {0});
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
