const a = b * 2;
const b = c + d;
const c = 11;
const d = c + c;

const e = { c, 22 };
const f = [a, b, c];

predicate test(x: int) {
    constraint x < b && x > c;
}

// parsed <<<
// const ::a = (::b * 2);
// const ::b = (::c + ::d);
// const ::c = 11;
// const ::d = (::c + ::c);
// const ::e = {::c, 22};
// const ::f = [::a, ::b, ::c];
//
// predicate ::test(
//     ::x: int,
// ) {
//     constraint ((::x < ::b) && (::x > ::c));
// }
// >>>

// flattened <<<
// const ::a: int = 66;
// const ::b: int = 33;
// const ::c: int = 11;
// const ::d: int = 22;
// const ::e: {int, int} = {11, 22};
// const ::f: int[_] = [66, 33, 11];
//
// predicate ::test(
//     ::x: int,
// ) {
//     constraint ((::x < 33) && (::x > 11));
// }
// >>>
