// Non-primitive consts are temporarily disabled.  Re-enable when they're back.

const a = b * 2;
const b = c + d;
const c = 11;
const d = c + c;

//const e = { c, 22 };
//const f = [a, b, c];

predicate test {
    var x: int;
    constraint x < b && x > c;
}

// parsed <<<
// const ::b = (::c + ::d);
// const ::d = (::c + ::c);
// const ::a = (::b * 2);
// const ::c = 11;
//
// predicate ::test {
//     var ::x: int;
//     constraint ((::x < ::b) && (::x > ::c));
// }
// >>>

// flattened <<<
// const ::b: int = 33;
// const ::d: int = 22;
// const ::a: int = 66;
// const ::c: int = 11;
//
// predicate ::test {
//     var ::x: int;
//     constraint ((::x < 33) && (::x > 11));
// }
// >>>
