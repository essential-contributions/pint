const a = true;

predicate A() {
    constraint a && !b::b;
}

// parsed <<<
// const ::a = true;
// const ::b::b = false;
//
// predicate ::A(
// ) {
//     constraint (::a && !::b::b);
// }
// >>>

// flattened <<<
// const ::a: bool = true;
// const ::b::b: bool = false;
//
// predicate ::A(
// ) {
//     constraint (true && !false);
// }
// >>>
