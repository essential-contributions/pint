interface I {
    predicate P(x: int);
}

const i_addr = 0x0000000000000000000000000000000000000000000000000000000000000000;
const p_addr = 0x1111111111111111111111111111111111111111111111111111111111111111;

predicate Q() {
    interface Iface = I(i_addr);
    predicate PInstance = Iface::P(p_addr);

    constraint PInstance::x == 11;
}

// parsed <<<
// const ::p_addr = 0x1111111111111111111111111111111111111111111111111111111111111111;
// const ::i_addr = 0x0000000000000000000000000000000000000000000000000000000000000000;
// interface ::I {
//     predicate P (
//         x: int,
//     );
// }
// 
// predicate ::Q(
//     __::PInstance_pathway: int,
// ) {
//     interface ::Iface = ::I(::i_addr)
//     predicate ::PInstance = ::Iface::P(::p_addr)
//     constraint (::PInstance::x == 11);
// }
// >>>

// flattened <<<
// const ::p_addr: b256 = 0x1111111111111111111111111111111111111111111111111111111111111111;
// const ::i_addr: b256 = 0x0000000000000000000000000000000000000000000000000000000000000000;
// interface ::I {
//     predicate P (
//         x: int,
//     );
// }
// 
// predicate ::Q(
//     __::PInstance_pathway: int,
// ) {
//     interface ::Iface = ::I(0x0000000000000000000000000000000000000000000000000000000000000000)
//     predicate ::PInstance = ::Iface::P(0x1111111111111111111111111111111111111111111111111111111111111111)
//     constraint (__pub_var(__::PInstance_pathway, {0}) == 11);
//     constraint __eq_set(__mut_keys(), {0});
//     constraint (__predicate_at(__::PInstance_pathway) == {0x0000000000000000000000000000000000000000000000000000000000000000, 0x1111111111111111111111111111111111111111111111111111111111111111});
// }
// >>>
