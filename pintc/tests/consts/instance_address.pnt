interface I {
    predicate P(x: int);
}

const i_addr = 0x0000000000000000000000000000000000000000000000000000000000000000;
const p_addr = 0x1111111111111111111111111111111111111111111111111111111111111111;

predicate Q(x: int) {
    constraint I[[i_addr]]::P[[p_addr]](x);

    constraint x == 11;
}

// parsed <<<
// const ::p_addr = 0x1111111111111111111111111111111111111111111111111111111111111111;
// const ::i_addr = 0x0000000000000000000000000000000000000000000000000000000000000000;
// interface ::I {
//     predicate P (
//         x: int,
//     );
// }
// 
// predicate ::Q(
//     ::x: int,
// ) {
//     constraint ::I[[::i_addr]]::P[[::p_addr]](::x);
//     constraint (::x == 11);
// }
// >>>

// flattened <<<
// const ::p_addr: b256 = 0x1111111111111111111111111111111111111111111111111111111111111111;
// const ::i_addr: b256 = 0x0000000000000000000000000000000000000000000000000000000000000000;
// interface ::I {
//     predicate P (
//         x: int,
//     );
// }
// 
// predicate ::Q(
//     ::x: int,
// ) {
//     constraint ::I[[0x0000000000000000000000000000000000000000000000000000000000000000]]::P[[0x1111111111111111111111111111111111111111111111111111111111111111]](::x);
//     constraint (::x == 11);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
