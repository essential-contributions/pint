const a = b::x * 11;

predicate test(b: int) {
    constraint b == a + b::x;
}

// parsed <<<
// const ::a = (::b::x * 11);
// const ::b::x: int = 22;
//
// predicate ::test(
//     ::b: int,
// ) {
//     constraint (::b == (::a + ::b::x));
// }
// >>>

// flattened <<<
// const ::a: int = 242;
// const ::b::x: int = 22;
//
// predicate ::test(
//     ::b: int,
// ) {
//     constraint (::b == (242 + 22));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
