// Non-primitive consts are temporarily disabled.  Re-enable when they're back.

const a = 11;
const b = 0x2222222222222222222222222222222222222222222222222222222222222222;
const c: int = 33;
const d: b256 = 0x4444444444444444444444444444444444444444444444444444444444444444;
const e = 0x5555555555555555555555555555555555555555555555555555555555555555 == 0x5555555555555555555555555555555555555555555555555555555555555555;
//const f = {66, 77};
//const g = [88, 99];
//const h: { int, bool } = { 1010, false };
//const i: bool[3] = [false, true, true];

enum JacketColour = Cream | Bone | White | OffWhite | Ivory | Beige;
const j = JacketColour::Beige; // Yes.
const k: JacketColour = JacketColour::Bone;

predicate test {
    var q: int;
    constraint q > a && q < c;

    var r: b256;
    constraint r != b && r != d;

    //var s = f.1;
    //var t = g[1];

    //var u: bool;
    //constraint u == h.1 && u != i[2];

    var v: JacketColour;
    constraint v != j && v != k;
}

// parsed <<<
// const ::j = ::JacketColour::Beige;
// const ::b = 0x2222222222222222222222222222222222222222222222222222222222222222;
// const ::e = (0x5555555555555555555555555555555555555555555555555555555555555555 == 0x5555555555555555555555555555555555555555555555555555555555555555);
// const ::k: ::JacketColour = ::JacketColour::Bone;
// const ::d: b256 = 0x4444444444444444444444444444444444444444444444444444444444444444;
// const ::a = 11;
// const ::c: int = 33;
// enum ::JacketColour = Cream | Bone | White | OffWhite | Ivory | Beige;
//
// predicate ::test {
//     var ::q: int;
//     var ::r: b256;
//     var ::v: ::JacketColour;
//     enum ::JacketColour = Cream | Bone | White | OffWhite | Ivory | Beige;
//     constraint ((::q > ::a) && (::q < ::c));
//     constraint ((::r != ::b) && (::r != ::d));
//     constraint ((::v != ::j) && (::v != ::k));
// }
// >>>

// flattened <<<
// const ::j: ::JacketColour = 5;
// const ::b: b256 = 0x2222222222222222222222222222222222222222222222222222222222222222;
// const ::e: bool = 1;
// const ::k: ::JacketColour = 1;
// const ::d: b256 = 0x4444444444444444444444444444444444444444444444444444444444444444;
// const ::a: int = 11;
// const ::c: int = 33;
// enum ::JacketColour = Cream | Bone | White | OffWhite | Ivory | Beige;
//
// predicate ::test {
//     var ::q: int;
//     var ::r: b256;
//     var ::v: int;
//     enum ::JacketColour = Cream | Bone | White | OffWhite | Ivory | Beige;
//     constraint ((::q > 11) && (::q < 33));
//     constraint ((::r != 0x2222222222222222222222222222222222222222222222222222222222222222) && (::r != 0x4444444444444444444444444444444444444444444444444444444444444444));
//     constraint ((::v != 5) && (::v != 1));
//     constraint (::v >= 0);
//     constraint (::v <= 5);
// }
// >>>
