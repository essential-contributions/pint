// These are not okay
let x: int;
state y: int = __foo();
constraint x == 3;
solve satisfy;

// These are okay
enum Foo = A | B;
type Boo = Foo;

if true { }

intent Baz {}

// intermediate <<<
// var ::x: int;
// state ::y: int = __foo();
// enum ::Foo = A | B;
// type ::Boo = ::Foo;
// constraint (::x == 3);
// if true {
// }
// solve satisfy;
// 
// intent ::Baz {
//     enum ::Foo = A | B;
//     type ::Boo = ::Foo;
// }
// >>>

// typecheck_failure <<<
// invalid declartion outside an `intent { .. }` declaration
// @26..27: invalid variable declaration outside an `intent { .. }` declaration
// only `enum` and `type` declarations are allowed outside an `intent { .. }` declaration
// invalid declartion outside an `intent { .. }` declaration
// @34..56: invalid state declaration outside an `intent { .. }` declaration
// only `enum` and `type` declarations are allowed outside an `intent { .. }` declaration
// invalid declartion outside an `intent { .. }` declaration
// @58..75: invalid constraint declaration outside an `intent { .. }` declaration
// only `enum` and `type` declarations are allowed outside an `intent { .. }` declaration
// invalid declartion outside an `intent { .. }` declaration
// @146..157: invalid `if` statement declaration outside an `intent { .. }` declaration
// only `enum` and `type` declarations are allowed outside an `intent { .. }` declaration
// invalid declartion outside an `intent { .. }` declaration
// @77..90: invalid solve directive declaration outside an `intent { .. }` declaration
// only `enum` and `type` declarations are allowed outside an `intent { .. }` declaration
// >>>
