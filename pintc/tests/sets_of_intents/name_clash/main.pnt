use lib::Baz;

enum Foo = A | B;

intent Foo {
    let x: int;
    constraint x == 3;
}

type Bar = Foo;

intent Bar {
    let y: int;
    constraint y == 4;
}

intent Boo {
    type Foo = int;
}

intent Boo {
    enum Baz = P | Q;

    let Bar = 5;
}

// parse_failure <<<
// symbol `Foo` has already been declared
// @20..23: previous declaration of the symbol `Foo` here
// @34..44: `Foo` redeclared here
// `Foo` must be declared or imported only once in this scope
// symbol `Bar` has already been declared
// @94..97: previous declaration of the symbol `Bar` here
// @106..116: `Bar` redeclared here
// `Bar` must be declared or imported only once in this scope
// symbol `Boo` has already been declared
// @161..171: previous declaration of the symbol `Boo` here
// @197..207: `Boo` redeclared here
// `Boo` must be declared or imported only once in this scope
// symbol `::Foo` has already been declared
// @20..23: previous declaration of the symbol `::Foo` here
// @183..186: `::Foo` redeclared here
// `::Foo` must be declared or imported only once in this scope
// symbol `::Bar` has already been declared
// @94..97: previous declaration of the symbol `::Bar` here
// @241..244: `::Bar` redeclared here
// `::Bar` must be declared or imported only once in this scope
// symbol `::Baz` has already been declared
// @9..12: previous declaration of the symbol `::Baz` here
// @219..222: `::Baz` redeclared here
// `::Baz` must be declared or imported only once in this scope
// >>>
