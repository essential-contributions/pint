use baz::MyUnion;
use ::baz::MyType;

predicate Bar(
    y: int,
    e1: MyUnion,
    f1: MyType,
    e2: ::baz::MyUnion,
    f2: baz::MyType,
){
    constraint y == 4;

    constraint e1 == MyUnion::A;
    constraint f1 == MyType::B;

    constraint e2 == ::baz::MyUnion::B;
    constraint f2 == baz::MyType::A;
}

// parsed <<<
// union ::baz::MyUnion = A | B;
// type ::baz::MyType = ::baz::MyUnion;
//
// predicate ::Bar(
//     ::y: int,
//     ::e1: ::baz::MyUnion,
//     ::f1: ::baz::MyType,
//     ::e2: ::baz::MyUnion,
//     ::f2: ::baz::MyType,
// ) {
//     constraint (::y == 4);
//     constraint (::e1 == ::baz::MyUnion::A);
//     constraint (::f1 == ::baz::MyType::B);
//     constraint (::e2 == ::baz::MyUnion::B);
//     constraint (::f2 == ::baz::MyType::A);
// }
// >>>

// flattened <<<
// union ::baz::MyUnion = A | B;
// type ::baz::MyType = ::baz::MyUnion;
//
// predicate ::Bar(
//     ::y: int,
//     ::e1: ::baz::MyUnion,
//     ::f1: ::baz::MyUnion,
//     ::e2: ::baz::MyUnion,
//     ::f2: ::baz::MyUnion,
// ) {
//     constraint (::y == 4);
//     constraint (::e1 == ::baz::MyUnion::A);
//     constraint (::f1 == ::baz::MyUnion::B);
//     constraint (::e2 == ::baz::MyUnion::B);
//     constraint (::f2 == ::baz::MyUnion::A);
// }
// >>>
