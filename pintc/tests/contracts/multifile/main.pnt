use baz::MyUnion;
use ::baz::MyType;

predicate Bar {
    var y: int;
    constraint y == 4;

    var e1 = MyUnion::A;
    var f1 = MyType::B;

    var e2 = ::baz::MyUnion::B;
    var f2 = baz::MyType::A;
}

// parsed <<<
// union ::baz::MyUnion = A | B;
// type ::baz::MyType = ::baz::MyUnion;
//
// predicate ::Bar {
//     var ::y: int;
//     var ::e1;
//     var ::f1;
//     var ::e2;
//     var ::f2;
//     constraint (::y == 4);
//     constraint (::e1 == ::baz::MyUnion::A);
//     constraint (::f1 == ::baz::MyType::B);
//     constraint (::e2 == ::baz::MyUnion::B);
//     constraint (::f2 == ::baz::MyType::A);
// }
// >>>


// flattened <<<
// union ::baz::MyUnion = A | B;
// type ::baz::MyType = ::baz::MyUnion;
//
// predicate ::Bar {
//     var ::y: int;
//     var ::e1: ::baz::MyUnion;
//     var ::f1: ::baz::MyUnion;
//     var ::e2: ::baz::MyUnion;
//     var ::f2: ::baz::MyUnion;
//     constraint (::y == 4);
//     constraint (::e1 == ::baz::MyUnion::A);
//     constraint (::f1 == ::baz::MyUnion::B);
//     constraint (::e2 == ::baz::MyUnion::B);
//     constraint (::f2 == ::baz::MyUnion::A);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
