use lib::@foo;
use ::lib::@equal;
use lib::{@a, @b, @sum};

predicate Foo {
   ::lib::@foo(3);
   constraint @equal(4; 4);
}

predicate Bar {
   @foo(4);
   constraint lib::@equal([ 1.0, 2.0 ]; [ 1.0, 2.0 ]);
}

// This does not work yet. See ##504
//Baz {
//    var v: int;
//    constraint @a(v);
//    constraint @b(v);
//    constraint @a(v);
//    constraint @b(v);
//}

// This does not work yet. See ##504
//Sum {
//    var a: int = 4;
//    var b: int = @sum(1; 2; 3; a);
//}

// parsed <<<
// predicate ::Bar {
//     var ::anon@0::a: int;
//     constraint ([1e0, 2e0] == [1e0, 2e0]);
//     constraint (::anon@0::a == 4);
// }
// 
// predicate ::Foo {
//     var ::anon@1::a: int;
//     constraint (4 == 4);
//     constraint (::anon@1::a == 3);
// }
// >>>

// flattened <<<
// predicate ::Bar {
//     var ::anon@0::a: int;
//     constraint ([1e0, 2e0] == [1e0, 2e0]);
//     constraint (::anon@0::a == 4);
// }
// 
// predicate ::Foo {
//     var ::anon@1::a: int;
//     constraint (4 == 4);
//     constraint (::anon@1::a == 3);
// }
// >>>
