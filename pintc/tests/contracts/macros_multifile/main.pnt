use lib::@foo;
use ::lib::@equal;
use lib::{@a, @b, @sum};

predicate Foo(a: int) {
   ::lib::@foo(a; 3);
   constraint @equal(4; 4);
}

predicate Bar(a: int) {
   @foo(a; 4);
   constraint lib::@equal([ 1, 2 ]; [ 1, 2 ]);
}

// This does not work yet. See ##504
//Baz {
//    var v: int;
//    constraint @a(v);
//    constraint @b(v);
//    constraint @a(v);
//    constraint @b(v);
//}

// This does not work yet. See ##504
//Sum {
//    var a: int = 4;
//    var b: int = @sum(1; 2; 3; a);
//}

// parsed <<<
// predicate ::Foo(
//     ::a: int,
// ) {
//     constraint (4 == 4);
//     constraint (::a == 3);
// }
// 
// predicate ::Bar(
//     ::a: int,
// ) {
//     constraint ([1, 2] == [1, 2]);
//     constraint (::a == 4);
// }
// >>>

// flattened <<<
// predicate ::Foo(
//     ::a: int,
// ) {
//     constraint (4 == 4);
//     constraint (::a == 3);
//     constraint __eq_set(__mut_keys(), {0});
// }
// 
// predicate ::Bar(
//     ::a: int,
// ) {
//     constraint ([1, 2] == [1, 2]);
//     constraint (::a == 4);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
