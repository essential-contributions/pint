// These are not okay
let y: int = __foo();
constraint x == 3;

if true { }

// These are okay
union Foo = A | B;
type Boo = Foo;

interface Bam { storage { } }
interface BamInstance = Bam(0x0000000000000000000000000000000000000000000000000000000000000000);
predicate BamPredicateInstance =
    BamInstance::BamPredicate(0x0000000000000000000000000000000000000000000000000000000000000000);

predicate Baz() {}

// The parser changed to simply disallow these decls outside of predicates.  So it barfs on the
// first `let`.
//

// parse_failure <<<
// expected `::`, `an identifier`, `const`, `interface`, `macro`, `macro_name`, `predicate`, `storage`, `type`, `union`, or `use`, found `let`
// @22..25: expected `::`, `an identifier`, `const`, `interface`, `macro`, `macro_name`, `predicate`, `storage`, `type`, `union`, or `use`
// >>>
