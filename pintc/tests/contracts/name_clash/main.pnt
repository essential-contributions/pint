use lib::Baz;

union Foo = A | B;

predicate Foo(x: int) {
    constraint x == 3;
}

type Bar = Foo;

predicate Bar(y: int) {
    constraint y == 4;
}

type Foo = int;

predicate Boo() {
}

union Baz = P | Q;

predicate Boo(Bar: int) {
    constraint Bar == 5;
}

// parse_failure <<<
// symbol `Foo` has already been declared
// @21..24: previous declaration of the symbol `Foo` here
// @35..48: `Foo` redeclared here
// `Foo` must be declared or imported only once in this scope
// symbol `Bar` has already been declared
// @90..93: previous declaration of the symbol `Bar` here
// @102..115: `Bar` redeclared here
// `Bar` must be declared or imported only once in this scope
// symbol `Foo` has already been declared
// @21..24: previous declaration of the symbol `Foo` here
// @157..160: `Foo` redeclared here
// `Foo` must be declared or imported only once in this scope
// symbol `Baz` has already been declared
// @9..12: previous declaration of the symbol `Baz` here
// @196..199: `Baz` redeclared here
// `Baz` must be declared or imported only once in this scope
// symbol `Boo` has already been declared
// @169..182: previous declaration of the symbol `Boo` here
// @210..223: `Boo` redeclared here
// `Boo` must be declared or imported only once in this scope
// symbol `::Bar` has already been declared
// @90..93: previous declaration of the symbol `::Bar` here
// @224..227: `::Bar` redeclared here
// `::Bar` must be declared or imported only once in this scope
// >>>
