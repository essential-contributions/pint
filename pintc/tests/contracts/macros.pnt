macro @equal($x, $y) {
    $x == $y
}

macro @foo($x) {
    var a: int;
    constraint a == $x;
}

predicate Foo {
   @foo(3);
   constraint @equal(4; 4);
}

predicate Bar {
   @foo(4);
   constraint @equal([ 1.0, 2.0 ]; [ 1.0, 2.0 ]);
}

macro @a($x) {
    @c($x)
}

macro @b($y) {
    @c($y)
}

macro @c($z) {
    $z == 0
}

predicate Baz {
    var v: int;
    constraint @a(v);
    constraint @b(v);
    constraint @a(v);
    constraint @b(v);
}

macro @sum($x, &rest) {
    @sum($x + &rest)
}

macro @sum($x) {
    $x
}

predicate Sum {
    var a: int = 4;
    var b: int = @sum(1; 2; 3; a);
}

// parsed <<<
// predicate ::Bar {
//     var ::anon@0::a: int;
//     constraint ([1e0, 2e0] == [1e0, 2e0]);
//     constraint (::anon@0::a == 4);
// }
// 
// predicate ::Baz {
//     var ::v: int;
//     constraint (::v == 0);
//     constraint (::v == 0);
//     constraint (::v == 0);
//     constraint (::v == 0);
// }
//
// predicate ::Foo {
//     var ::anon@2::a: int;
//     constraint (4 == 4);
//     constraint (::anon@2::a == 3);
// }
//
// predicate ::Sum {
//     var ::a: int;
//     var ::b: int;
//     constraint (::a == 4);
//     constraint (::b == (((1 + 2) + 3) + ::a));
// }
// >>>

// flattened <<<
// predicate ::Bar {
//     var ::anon@0::a: int;
//     constraint ((1e0 == 1e0) && (2e0 == 2e0));
//     constraint (::anon@0::a == 4);
// }
// 
// predicate ::Baz {
//     var ::v: int;
//     constraint (::v == 0);
//     constraint (::v == 0);
//     constraint (::v == 0);
//     constraint (::v == 0);
// }
//
// predicate ::Foo {
//     var ::anon@2::a: int;
//     constraint (4 == 4);
//     constraint (::anon@2::a == 3);
// }
//
// predicate ::Sum {
//     var ::a: int;
//     var ::b: int;
//     constraint (::a == 4);
//     constraint (::b == (((1 + 2) + 3) + ::a));
// }
// >>>
