macro @equal($x, $y) {
    $x == $y
}

macro @foo($a, $x) {
    constraint $a == $x;
}

predicate Foo(a: int) {
   @foo(a; 3);
   constraint @equal(4; 4);
}

predicate Bar(a: int) {
   @foo(a; 4);
   constraint @equal([ 1, 2 ]; [ 1, 2 ]);
}

macro @a($x) {
    @c($x)
}

macro @b($y) {
    @c($y)
}

macro @c($z) {
    $z == 0
}

predicate Baz(v: int) {
    constraint @a(v);
    constraint @b(v);
    constraint @a(v);
    constraint @b(v);
}

macro @sum($x, &rest) {
    @sum($x + &rest)
}

macro @sum($x) {
    $x
}

predicate Sum(a: int, b: int) {
    constraint a == 4;
    constraint b == @sum(1; 2; 3; a);
}

// parsed <<<
// predicate ::Foo(
//     ::a: int,
// ) {
//     constraint (4 == 4);
//     constraint (::a == 3);
// }
// 
// predicate ::Bar(
//     ::a: int,
// ) {
//     constraint ([1, 2] == [1, 2]);
//     constraint (::a == 4);
// }
// 
// predicate ::Baz(
//     ::v: int,
// ) {
//     constraint (::v == 0);
//     constraint (::v == 0);
//     constraint (::v == 0);
//     constraint (::v == 0);
// }
// 
// predicate ::Sum(
//     ::a: int,
//     ::b: int,
// ) {
//     constraint (::a == 4);
//     constraint (::b == (((1 + 2) + 3) + ::a));
// }
// >>>

// flattened <<<
// predicate ::Foo(
//     ::a: int,
// ) {
//     constraint (4 == 4);
//     constraint (::a == 3);
//     constraint __eq_set(__mut_keys(), {0});
// }
// 
// predicate ::Bar(
//     ::a: int,
// ) {
//     constraint ([1, 2] == [1, 2]);
//     constraint (::a == 4);
//     constraint __eq_set(__mut_keys(), {0});
// }
// 
// predicate ::Baz(
//     ::v: int,
// ) {
//     constraint (::v == 0);
//     constraint (::v == 0);
//     constraint (::v == 0);
//     constraint (::v == 0);
//     constraint __eq_set(__mut_keys(), {0});
// }
// 
// predicate ::Sum(
//     ::a: int,
//     ::b: int,
// ) {
//     constraint (::a == 4);
//     constraint (::b == (((1 + 2) + 3) + ::a));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
