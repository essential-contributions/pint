union MyUnion = A | B;

type MyType = MyUnion;

predicate Foo {
    var x: int;
    var y: MyUnion = MyUnion::A;
    constraint x == 3;
}

predicate Bar {
    var x: int;
    var y: MyType = MyType::A;
    constraint x < 2;
}

// parsed <<<
// union ::MyUnion = A | B;
// type ::MyType = ::MyUnion;
//
// predicate ::Foo {
//     var ::x: int;
//     var ::y: ::MyUnion;
//     constraint (::y == ::MyUnion::A);
//     constraint (::x == 3);
// }
//
// predicate ::Bar {
//     var ::x: int;
//     var ::y: ::MyType;
//     constraint (::y == ::MyType::A);
//     constraint (::x < 2);
// }
// >>>


// flattened <<<
// union ::MyUnion = A | B;
// type ::MyType = ::MyUnion;
// 
// predicate ::Foo {
//     var ::x: int;
//     var ::y: ::MyUnion;
//     constraint (::y == ::MyUnion::A);
//     constraint (::x == 3);
//     constraint __eq_set(__mut_keys(), {0});
// }
// 
// predicate ::Bar {
//     var ::x: int;
//     var ::y: ::MyUnion;
//     constraint (::y == ::MyType::A);
//     constraint (::x < 2);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
