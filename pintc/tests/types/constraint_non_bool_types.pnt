union Colour = Red | Green | Blue;

predicate test {
    var a: b256;

    constraint 1 + 2;
    constraint a;
    constraint { 1, 2 };
    constraint [1, 2, 3];
    constraint Colour::Red;
}

// parsed <<<
// union ::Colour = Red | Green | Blue;
//
// predicate ::test {
//     var ::a: b256;
//     constraint (1 + 2);
//     constraint ::a;
//     constraint {1, 2};
//     constraint [1, 2, 3];
//     constraint ::Colour::Red;
// }
// >>>

// typecheck_failure <<<
// constraint expression type error
// @75..91: constraint expression has unexpected type `int`
// @86..91: expecting type `bool`
// constraint expression type error
// @97..109: constraint expression has unexpected type `b256`
// @108..109: expecting type `bool`
// constraint expression type error
// @115..134: constraint expression has unexpected type `{int, int}`
// @126..134: expecting type `bool`
// constraint expression type error
// @140..160: constraint expression has unexpected type `int[3]`
// @151..160: expecting type `bool`
// constraint expression type error
// @166..188: constraint expression has unexpected type `::Colour`
// @177..188: expecting type `bool`
// >>>
