union Colour = Red | Green | Blue;

predicate test(a: b256) {
    constraint 1 + 2;
    constraint a;
    constraint { 1, 2 };
    constraint [1, 2, 3];
    constraint Colour::Red;
}

// parsed <<<
// union ::Colour = Red | Green | Blue;
//
// predicate ::test(
//     ::a: b256,
// ) {
//     constraint (1 + 2);
//     constraint ::a;
//     constraint {1, 2};
//     constraint [1, 2, 3];
//     constraint ::Colour::Red;
// }
// >>>

// typecheck_failure <<<
// constraint expression type error
// @66..82: constraint expression has unexpected type `int`
// @77..82: expecting type `bool`
// constraint expression type error
// @88..100: constraint expression has unexpected type `b256`
// @99..100: expecting type `bool`
// constraint expression type error
// @106..125: constraint expression has unexpected type `{int, int}`
// @117..125: expecting type `bool`
// constraint expression type error
// @131..151: constraint expression has unexpected type `int[3]`
// @142..151: expecting type `bool`
// constraint expression type error
// @157..179: constraint expression has unexpected type `::Colour`
// @168..179: expecting type `bool`
// >>>
