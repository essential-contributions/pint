predicate test {
    var a: b256;
    enum Colour = Red | Green | Blue;

    constraint 1 + 2;
    constraint a;
    constraint { 1, 2 };
    constraint [1, 2, 3];
    constraint Colour::Red;
}

// parsed <<<
// predicate ::test {
//     var ::a: b256;
//     enum ::Colour = Red | Green | Blue;
//     constraint (1 + 2);
//     constraint ::a;
//     constraint {1, 2};
//     constraint [1, 2, 3];
//     constraint ::Colour::Red;
// }
// >>>

// typecheck_failure <<<
// constraint expression type error
// @77..93: constraint expression has unexpected type `int`
// @77..93: expecting type `bool`
// constraint expression type error
// @99..111: constraint expression has unexpected type `b256`
// @99..111: expecting type `bool`
// constraint expression type error
// @117..136: constraint expression has unexpected type `{int, int}`
// @117..136: expecting type `bool`
// constraint expression type error
// @142..162: constraint expression has unexpected type `int[3]`
// @142..162: expecting type `bool`
// constraint expression type error
// @168..190: constraint expression has unexpected type `::Colour`
// @168..190: expecting type `bool`
// >>>
