type A = int;
type B = A[2];
type C = { A, A };
type D = { C, C };

predicate test(x: B, y: D) {
    constraint x[1] == 11;
    constraint y.1.0 == 22;
}

// parsed <<<
// type ::A = int;
// type ::B = ::A[2];
// type ::C = {::A, ::A};
// type ::D = {::C, ::C};
// 
// predicate ::test(
//     ::x: ::B,
//     ::y: ::D,
// ) {
//     constraint (::x[1] == 11);
//     constraint (::y.1.0 == 22);
// }
// >>>

// flattened <<<
// type ::A = int;
// type ::B = int[2];
// type ::C = {int, int};
// type ::D = {{int, int}, {int, int}};
// 
// predicate ::test(
//     ::x: int[2],
//     ::y: {{int, int}, {int, int}},
// ) {
//     constraint (::x[1] == 11);
//     constraint (::y.1.0 == 22);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
