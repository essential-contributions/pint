type A = int;
type B = A[2];
type C = { A, A };
type D = { C, C };

predicate test {
    var x: B;
    var y: D;
    constraint x[1] == 11;
    constraint y.1.0 == 22;
}

// parsed <<<
// type ::A = int;
// type ::B = ::A[2];
// type ::C = {::A, ::A};
// type ::D = {::C, ::C};
//
// predicate ::test {
//     var ::x: ::B;
//     var ::y: ::D;
//     constraint (::x[1] == 11);
//     constraint (::y.1.0 == 22);
// }
// >>>

// flattened <<<
// type ::A = int;
// type ::B = ::A (int)[2];
// type ::C = {::A (int), ::A (int)};
// type ::D = {::C ({::A (int), ::A (int)}), ::C ({::A (int), ::A (int)})};
//
// predicate ::test {
//     var ::x: int[2];
//     var ::y: {{int, int}, {int, int}};
//     constraint (::x[1] == 11);
//     constraint (::y.1.0 == 22);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
