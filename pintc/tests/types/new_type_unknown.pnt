predicate test {
    type Ambiguous = NonExistentEnum;

    var a = Ambiguous::MissingVariant;
}

// parsed <<<
// predicate ::test {
//     var ::a;
//     type ::Ambiguous = ::NonExistentEnum;
//     constraint (::a == ::Ambiguous::MissingVariant);
// }
// >>>

// typecheck_failure <<<
// cannot find value `::Ambiguous::MissingVariant` in this scope
// @68..93: not found in this scope
// cannot find value `::Ambiguous::MissingVariant` in this scope
// @68..93: not found in this scope
// unable to determine expression type
// @64..65: type of this expression is ambiguous
// constraint expression type error
// @60..93: constraint expression has unknown type
// @60..93: expecting type `bool`
// >>>
