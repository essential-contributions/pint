predicate test() {
    let a = -true;
    let b = -{1,2};

    let c = !11;
    let d = !0x0000111100001111000011110000111100001111000011110000111100001111;
}

// parsed <<<
// predicate ::test(
// ) {
//     let ::a = -true;
//     let ::b = -{1, 2};
//     let ::c = !11;
//     let ::d = !0x0000111100001111000011110000111100001111000011110000111100001111;
// }
// >>>

// typecheck_failure <<<
// unary operator type error
// @31..36: operator `-` argument has unexpected type `bool`
// unary operator type error
// @50..56: operator `-` argument has unexpected type `{int, int}`
// unary operator type error
// @71..74: operator `!` argument has unexpected type `int`
// unary operator type error
// @88..155: operator `!` argument has unexpected type `b256`
// >>>
