storage {
    i: int,
    b: bool,
    map1: (int => int),
    map2: (b256 => bool),
}

predicate test() {
    let x = 5;
    let address = 0x2222222222222222222222222222222222222222222222222222222222222222;

    let i1: bool = storage::i;

    let b1: int = storage::b;

    let map_1_access: bool = storage::map1[x];

    let map_2_access: int = storage::map2[address];
}

// parsed <<<
// storage {
//     i: int,
//     b: bool,
//     map1: ( int => int ),
//     map2: ( b256 => bool ),
// }
//
// predicate ::test(
// ) {
//     let ::x = 5;
//     let ::address = 0x2222222222222222222222222222222222222222222222222222222222222222;
//     let ::i1: bool = storage::i;
//     let ::b1: int = storage::b;
//     let ::map_1_access: bool = storage::map1[::x];
//     let ::map_2_access: int = storage::map2[::address];
// }
// >>>

// typecheck_failure <<<
// variable initialization type error
// @228..238: initializing expression has unexpected type `int?`
// @221..225: expecting type `bool`
// variable initialization type error
// @259..269: initializing expression has unexpected type `bool?`
// @253..256: expecting type `int`
// variable initialization type error
// @301..317: initializing expression has unexpected type `int?`
// @294..298: expecting type `bool`
// variable initialization type error
// @348..370: initializing expression has unexpected type `bool?`
// @342..345: expecting type `int`
// >>>
