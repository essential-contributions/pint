storage {
    i: int,
    b: bool,
    map1: (int => int),
    map2: (b256 => bool),
}

predicate test {
    var x = 5;
    var address = 0x2222222222222222222222222222222222222222222222222222222222222222;

    state i1: bool = storage::i;

    state b1: int = storage::b;

    state map_1_access: bool = storage::map1[x];

    state map_2_access: int = storage::map2[address];
}

// parsed <<<
// storage {
//     i: int,
//     b: bool,
//     map1: ( int => int ),
//     map2: ( b256 => bool ),
// }
//
// predicate ::test {
//     var ::x;
//     var ::address;
//     state ::i1: bool = storage::i;
//     state ::b1: int = storage::b;
//     state ::map_1_access: bool = storage::map1[::x];
//     state ::map_2_access: int = storage::map2[::address];
//     constraint (::x == 5);
//     constraint (::address == 0x2222222222222222222222222222222222222222222222222222222222222222);
// }
// >>>

// typecheck_failure <<<
// state variable initialization type error
// @228..238: initializing expression has unexpected type `int`
// @221..225: expecting type `bool`
// state variable initialization type error
// @261..271: initializing expression has unexpected type `bool`
// @255..258: expecting type `int`
// state variable initialization type error
// @305..321: initializing expression has unexpected type `int`
// @298..302: expecting type `bool`
// state variable initialization type error
// @354..376: initializing expression has unexpected type `bool`
// @348..351: expecting type `int`
// >>>
