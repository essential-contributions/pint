predicate test {
    var a = [c[1], b];
    var b = c[1];
    var c = [[b][0], a[1]];
}

// parsed <<<
// predicate ::test {
//     var ::a;
//     var ::b;
//     var ::c;
//     constraint (::a == [::c[1], ::b]);
//     constraint (::b == ::c[1]);
//     constraint (::c == [[::b][0], ::a[1]]);
// }
// >>>

// typecheck_failure <<<
// expression has a recursive dependency
// @52..53: cannot determine type of expression due to dependency
// @70..84: dependency on expression is recursive
// expression has a recursive dependency
// @72..73: cannot determine type of expression due to dependency
// @52..56: dependency on expression is recursive
// expression has a recursive dependency
// @52..53: cannot determine type of expression due to dependency
// @70..84: dependency on expression is recursive
// expression has a recursive dependency
// @52..53: cannot determine type of expression due to dependency
// @70..84: dependency on expression is recursive
// expression has a recursive dependency
// @72..73: cannot determine type of expression due to dependency
// @52..56: dependency on expression is recursive
// expression has a recursive dependency
// @52..53: cannot determine type of expression due to dependency
// @70..84: dependency on expression is recursive
// unable to determine expression type
// @25..26: type of this expression is ambiguous
// unable to determine expression type
// @48..49: type of this expression is ambiguous
// unable to determine expression type
// @66..67: type of this expression is ambiguous
// constraint expression type error
// @21..38: constraint expression has unknown type
// @21..38: expecting type `bool`
// constraint expression type error
// @44..56: constraint expression has unknown type
// @44..56: expecting type `bool`
// constraint expression type error
// @62..84: constraint expression has unknown type
// @62..84: expecting type `bool`
// >>>
