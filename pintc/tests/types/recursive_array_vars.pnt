predicate test() {
    state a = [c[1], b];
    state b = c[1];
    // Without the space in `[ [b...` it'll parse as a `[[` token and then fail.
    state c = [ [b][0], a[1]];
}

// parsed <<<
// predicate ::test(
// ) {
//     state ::a = [::c[1], ::b];
//     state ::b = ::c[1];
//     state ::c = [[::b][0], ::a[1]];
// }
// >>>

// typecheck_failure <<<
// expression has a recursive dependency
// @58..59: cannot determine type of expression due to dependency
// @159..174: dependency on expression is recursive
// expression has a recursive dependency
// @162..163: cannot determine type of expression due to dependency
// @58..62: dependency on expression is recursive
// expression has a recursive dependency
// @58..59: cannot determine type of expression due to dependency
// @159..174: dependency on expression is recursive
// unable to determine expression type
// @23..42: type of this expression is ambiguous
// unable to determine expression type
// @48..62: type of this expression is ambiguous
// unable to determine expression type
// @149..174: type of this expression is ambiguous
// >>>
