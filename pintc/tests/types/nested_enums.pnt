union Animal = Cat | Dog;

type Father = {
    child: {
        age: int,
        pet: Animal,
    },
    pet: Animal,
};

union Parent = Mum | Dad(Father);

const papa: Father = { child: { age: 33, pet: Animal::Cat }, pet: Animal::Dog };

interface InTheFace {
    predicate Who {
        pub var left: Father;
    }
}

predicate Foo {
    var bob = {
        child: {
            age: 23,
            pet: Animal::Dog
        },
        pet: Animal::Cat,
    };

    var friends_pets: Animal[3] = [Animal::Dog, Animal::Cat, Animal::Cat];

    var barb: Parent;
    match barb {
        Parent::Mum => {}
        Parent::Dad(d) => {
            constraint d.pet == Animal::Cat;
        }
    }

    constraint bob.pet != Animal::Dog;
}

// parsed <<<
// const ::papa: ::Father = {child: {age: 33, pet: ::Animal::Cat}, pet: ::Animal::Dog};
// union ::Animal = Cat | Dog;
// union ::Parent = Mum | Dad(::Father);
// type ::Father = {child: {age: int, pet: ::Animal}, pet: ::Animal};
// interface ::InTheFace {
//     predicate Who {
//         pub var left: ::Father;
//     }
// }
//
// predicate ::Foo {
//     var ::bob;
//     var ::friends_pets: ::Animal[3];
//     var ::barb: ::Parent;
//     constraint (::bob == {child: {age: 23, pet: ::Animal::Dog}, pet: ::Animal::Cat});
//     constraint (::friends_pets == [::Animal::Dog, ::Animal::Cat, ::Animal::Cat]);
//     constraint (::bob.pet != ::Animal::Dog);
//     match ::barb {
//         ::Parent::Mum => {
//         }
//         ::Parent::Dad(d) => {
//             constraint (::d.pet == ::Animal::Cat)
//         }
//     }
// }
// >>>

// flattened <<<
// const ::papa: {child: {age: int, pet: ::Animal}, pet: ::Animal} = {child: {age: 33, pet: ::Animal::Cat}, pet: ::Animal::Dog};
// union ::Animal = Cat | Dog;
// union ::Parent = Mum | Dad({child: {age: int, pet: ::Animal}, pet: ::Animal});
// type ::Father = {child: {age: int, pet: ::Animal}, pet: ::Animal};
// interface ::InTheFace {
//     predicate Who {
//         pub var left: {child: {age: int, pet: ::Animal}, pet: ::Animal};
//     }
// }
//
// predicate ::Foo {
//     var ::bob: {child: {age: int, pet: ::Animal}, pet: ::Animal};
//     var ::friends_pets: ::Animal[3];
//     var ::barb: ::Parent;
//     constraint (::bob == {child: {age: 23, pet: ::Animal::Dog}, pet: ::Animal::Cat});
//     constraint (::friends_pets == [::Animal::Dog, ::Animal::Cat, ::Animal::Cat]);
//     constraint (::bob.pet != ::Animal::Dog);
//     constraint ((UnTag(::barb) == 0) || (!(UnTag(::barb) == 1) || (UnVal(::barb, {child: {age: int, pet: ::Animal}, pet: ::Animal}).pet == ::Animal::Cat)));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
