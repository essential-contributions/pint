type A = int;
type B = { x: A, y: A };
type C = A[3];

predicate test(
    a: int,
    b: {x: int, y: int},
    c: int,
    d: int,
    e: int[3],
    f: int,
    g: int,
) {
    constraint b == { a, a };
    constraint c == b.1;
    constraint d == b.x;
    constraint e == [a, a, a];
    constraint f == e[1];
    constraint g == a;
}

// parsed <<<
// type ::A = int;
// type ::B = {x: ::A, y: ::A};
// type ::C = ::A[3];
// 
// predicate ::test(
//     ::a: int,
//     ::b: {x: int, y: int},
//     ::c: int,
//     ::d: int,
//     ::e: int[3],
//     ::f: int,
//     ::g: int,
// ) {
//     constraint (::b == {::a, ::a});
//     constraint (::c == ::b.1);
//     constraint (::d == ::b.x);
//     constraint (::e == [::a, ::a, ::a]);
//     constraint (::f == ::e[1]);
//     constraint (::g == ::a);
// }
// >>>

// flattened <<<
// type ::A = int;
// type ::B = {x: int, y: int};
// type ::C = int[3];
// 
// predicate ::test(
//     ::a: int,
//     ::b: {x: int, y: int},
//     ::c: int,
//     ::d: int,
//     ::e: int[3],
//     ::f: int,
//     ::g: int,
// ) {
//     constraint (::b == {::a, ::a});
//     constraint (::c == ::b.1);
//     constraint (::d == ::b.x);
//     constraint (::e == [::a, ::a, ::a]);
//     constraint (::f == ::e[1]);
//     constraint (::g == ::a);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
