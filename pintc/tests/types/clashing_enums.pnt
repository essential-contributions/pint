enum AttackingBird = Goose | Duck | Chicken;
enum AppropriateDefence = Kick | Runaway | Duck | StareDown;

macro @panicked_response($bird) {
    $bird != ::AttackingBird::Goose ? Duck : Kick
}

var unfortunate_action = @panicked_response(AttackingBird::Goose);

solve satisfy;

// intermediate <<<
// var ::unfortunate_action;
// enum ::AttackingBird = Goose | Duck | Chicken;
// enum ::AppropriateDefence = Kick | Runaway | Duck | StareDown;
// constraint (::unfortunate_action == ((::AttackingBird::Goose != ::AttackingBird::Goose) ? ::Duck : ::Kick));
// solve satisfy;
// >>>

// typecheck_failure <<<
// cannot find value `::Duck` in this scope
// @179..183: not found in this scope
// this symbol is a variant of enums `::AttackingBird` and `::AppropriateDefence` and may need a fully qualified path
// unable to determine expression type
// @198..216: type of this expression is ambiguous
// constraint expression type error
// @194..259: constraint expression has unexpected type `Unknown`
// @194..259: expecting type `bool`
// >>>
