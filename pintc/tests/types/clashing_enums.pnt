macro @panicked_response($bird) {
    // There's no such thing as just `Duck` or `Kick`, they must be fully qualified.
    $bird != ::AttackingBird::Goose ? Duck : Kick
}

union AttackingBird = Goose | Duck | Chicken;
union AppropriateDefence = Kick | Runaway | Duck | StareDown;

predicate test() {
    let unfortunate_action = @panicked_response(AttackingBird::Goose);
}

// parsed <<<
// union ::AttackingBird = Goose | Duck | Chicken;
// union ::AppropriateDefence = Kick | Runaway | Duck | StareDown;
//
// predicate ::test(
// ) {
//     let ::unfortunate_action = ((::AttackingBird::Goose != ::AttackingBird::Goose) ? ::Duck : ::Kick);
// }
// >>>

// typecheck_failure <<<
// cannot find value `::Duck` in this scope
// @157..161: not found in this scope
// this symbol is a variant of unions `::AttackingBird` and `::AppropriateDefence` and may need a fully qualified path
// cannot find value `::Kick` in this scope
// @164..168: not found in this scope
// this symbol is a variant of union `::AppropriateDefence` and may need a fully qualified path
// >>>
