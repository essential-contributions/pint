storage {
    map1: (int => bool),
    map2: (int => (bool => b256)),
}

predicate Foo() {
    // Bad
    state map1 = storage::map1;
    state map2_inner = storage::map2[69];

    // Ok
    state entry = storage::map1[42];
    state entry_inner = storage::map2[42][true];
}

// parsed <<<
// storage {
//     map1: ( int => bool ),
//     map2: ( int => ( bool => b256 ) ),
// }
// 
// predicate ::Foo(
// ) {
//     state ::map1 = storage::map1;
//     state ::map2_inner = storage::map2[69];
//     state ::entry = storage::map1[42];
//     state ::entry_inner = storage::map2[42][true];
// }
// >>>

// typecheck_failure <<<
// predicate parameters cannot have storage types
// @106..132: found parameter of storage type ( int => bool ) here
// predicate parameters cannot have storage types
// @138..174: found parameter of storage type ( bool => b256 ) here
// >>>
