type MyMap = (int => int);

predicate test(
    y: MyMap,
    x: ( int => int ),
) { }

// parsed <<<
// type ::MyMap = ( int => int );
// 
// predicate ::test(
//     ::y: ::MyMap,
//     ::x: ( int => int ),
// ) {
// }
// >>>

// typecheck_failure <<<
// predicate parameters cannot have storage types
// @48..56: found parameter of storage type ::MyMap (( int => int )) here
// type of parameter depends on the storage type `( int => int )`
// predicate parameters cannot have storage types
// @62..79: found parameter of storage type ( int => int ) here
// >>>
