predicate test {
    type A = { A };
    type B = C[2];
    type C = { B, B };
    type D = A;

    var x: A;
    var y: B;
    var z: C;
}

// parsed <<<
// predicate ::test {
//     var ::x: ::A;
//     var ::y: ::B;
//     var ::z: ::C;
//     type ::A = {::A};
//     type ::B = ::C[2];
//     type ::C = {::B, ::B};
//     type ::D = ::A;
// }
// >>>

// typecheck_failure <<<
// type alias refers to itself
// @32..33: type alias `::A` is used recursively in declaration
// @21..35: `::A` is declared here
// type alias refers to itself
// @71..72: type alias `::B` is used recursively in declaration
// @41..54: `::B` is declared here
// type alias refers to itself
// @50..51: type alias `::C` is used recursively in declaration
// @60..77: `::C` is declared here
// type alias refers to itself
// @32..33: type alias `::A` is used recursively in declaration
// @21..35: `::A` is declared here
// >>>
