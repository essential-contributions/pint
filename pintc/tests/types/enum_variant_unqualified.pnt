union Foo = Bar | Baz;
union Bar = Baz | Xyzzy;

predicate test() {
    state a = Baz;
}

// parsed <<<
// union ::Foo = Bar | Baz;
// union ::Bar = Baz | Xyzzy;
// 
// predicate ::test(
// ) {
//     state ::a = ::Baz;
// }
// >>>

// typecheck_failure <<<
// cannot find value `::Baz` in this scope
// @82..85: not found in this scope
// this symbol is a variant of unions `::Foo` and `::Bar` and may need a fully qualified path
// >>>
