storage {
    a: Undefined,
    b: Undefined,
}

const a0: Undefined = 0;
const b0: Undefined = 0;

interface Foo {
    storage {
        a: Undefined,
        b: Undefined,
    }

    predicate P {
        pub var a: Undefined;
        pub var b: Undefined;
    }

    predicate Q {
        pub var a: Undefined;
        pub var b: Undefined;
    }
}

type A = Undefined;
type B = Undefined;

union Baz = X | Y;
type Xyzzy = int;

predicate test(a2: Undefined, b2: Undefined, a: int, b: Foo, d: Baz) {
    state a1: Undefined = storage::a;
    state b1: Undefined = storage::b;

    state c1 = a1 as Undefined;
    state c2 = b1 as Undefined;

    state c = a as Bar;

    state e = a as Xyzzy;
}

// parsed <<<
// const ::b0: ::Undefined = 0;
// const ::a0: ::Undefined = 0;
// union ::Baz = X | Y;
// type ::A = ::Undefined;
// type ::B = ::Undefined;
// type ::Xyzzy = int;
// storage {
//     a: ::Undefined,
//     b: ::Undefined,
// }
// interface ::Foo {
//     storage {
//         a: ::Undefined,
//         b: ::Undefined,
//     }
//     predicate P {
//         pub var a: ::Undefined;
//         pub var b: ::Undefined;
//     }
//     predicate Q {
//         pub var a: ::Undefined;
//         pub var b: ::Undefined;
//     }
// }
// 
// predicate ::test(
//     ::a2: ::Undefined,
//     ::b2: ::Undefined,
//     ::a: int,
//     ::b: ::Foo,
//     ::d: ::Baz,
// ) {
//     state ::a1: ::Undefined = storage::a;
//     state ::b1: ::Undefined = storage::b;
//     state ::c1 = ::a1 as ::Undefined;
//     state ::c2 = ::b1 as ::Undefined;
//     state ::c = ::a as ::Bar;
//     state ::e = ::a as ::Xyzzy;
// }
// >>>

// typecheck_failure <<<
// undefined type
// @517..526: type is undefined
// undefined type
// @555..564: type is undefined
// undefined type
// @451..460: type is undefined
// undefined type
// @466..475: type is undefined
// undefined type
// @488..491: type is undefined
// undefined type
// @664..667: type is undefined
// undefined type
// @633..642: type is undefined
// undefined type
// @601..610: type is undefined
// undefined type
// @84..93: type is undefined
// undefined type
// @59..68: type is undefined
// undefined type
// @17..26: type is undefined
// undefined type
// @35..44: type is undefined
// undefined type
// @141..150: type is undefined
// undefined type
// @163..172: type is undefined
// undefined type
// @218..227: type is undefined
// undefined type
// @248..257: type is undefined
// undefined type
// @303..312: type is undefined
// undefined type
// @333..342: type is undefined
// undefined type
// @362..371: type is undefined
// undefined type
// @382..391: type is undefined
// type not allowed in storage
// @17..26: found type ::Undefined in storage
// type not allowed in storage
// @35..44: found type ::Undefined in storage
// invalid cast
// @595..610: illegal cast to `::Undefined`
// casts may only be made to `int` or `real`
// invalid cast
// @627..642: illegal cast to `::Undefined`
// casts may only be made to `int` or `real`
// invalid cast
// @659..667: illegal cast to `::Bar`
// casts may only be made to `int` or `real`
// const initialization type error
// @96..97: const initializer has unexpected type `int`
// @84..93: expecting type `::Undefined`
// const initialization type error
// @71..72: const initializer has unexpected type `int`
// @59..68: expecting type `::Undefined`
// >>>
