storage {
    a: Undefined,
    b: Undefined,
}

const a0: Undefined = 0;
const b0: Undefined = 0;

interface Foo {
    storage {
        a: Undefined,
        b: Undefined,
    }

    predicate P(
        a: Undefined,
        b: Undefined,
    );

    predicate Q(
        a: Undefined,
        b: Undefined,
    );
}

type A = Undefined;
type B = Undefined;

union Baz = X | Y;
type Xyzzy = int;

predicate test(a2: Undefined, b2: Undefined, a: int, b: Foo, d: Baz) {
    let a1: Undefined = storage::a;
    let b1: Undefined = storage::b;

    let c1 = a1 as Undefined;
    let c2 = b1 as Undefined;

    let c = a as Bar;

    let e = a as Xyzzy;
}

// parsed <<<
// const ::b0: ::Undefined = 0;
// const ::a0: ::Undefined = 0;
// union ::Baz = X | Y;
// type ::A = ::Undefined;
// type ::B = ::Undefined;
// type ::Xyzzy = int;
// storage {
//     a: ::Undefined,
//     b: ::Undefined,
// }
// interface ::Foo {
//     storage {
//         a: ::Undefined,
//         b: ::Undefined,
//     }
//     predicate P (
//         a: ::Undefined,
//         b: ::Undefined,
//     );
//     predicate Q (
//         a: ::Undefined,
//         b: ::Undefined,
//     );
// }
// 
// predicate ::test(
//     ::a2: ::Undefined,
//     ::b2: ::Undefined,
//     ::a: int,
//     ::b: ::Foo,
//     ::d: ::Baz,
// ) {
//     let ::a1: ::Undefined = storage::a;
//     let ::b1: ::Undefined = storage::b;
//     let ::c1 = ::a1 as ::Undefined;
//     let ::c2 = ::b1 as ::Undefined;
//     let ::c = ::a as ::Bar;
//     let ::e = ::a as ::Xyzzy;
// }
// >>>

// typecheck_failure <<<
// undefined type
// @483..492: type is undefined
// undefined type
// @519..528: type is undefined
// undefined type
// @419..428: type is undefined
// undefined type
// @434..443: type is undefined
// undefined type
// @456..459: type is undefined
// undefined type
// @622..625: type is undefined
// undefined type
// @593..602: type is undefined
// undefined type
// @563..572: type is undefined
// undefined type
// @84..93: type is undefined
// undefined type
// @59..68: type is undefined
// undefined type
// @17..26: type is undefined
// undefined type
// @35..44: type is undefined
// undefined type
// @141..150: type is undefined
// undefined type
// @163..172: type is undefined
// undefined type
// @209..218: type is undefined
// undefined type
// @231..240: type is undefined
// undefined type
// @278..287: type is undefined
// undefined type
// @300..309: type is undefined
// undefined type
// @330..339: type is undefined
// undefined type
// @350..359: type is undefined
// type not allowed in storage
// @17..26: found type ::Undefined in storage
// type not allowed in storage
// @35..44: found type ::Undefined in storage
// invalid cast
// @557..572: illegal cast to `::Undefined`
// casts may only be made to `int`
// invalid cast
// @587..602: illegal cast to `::Undefined`
// casts may only be made to `int`
// invalid cast
// @617..625: illegal cast to `::Bar`
// casts may only be made to `int`
// const initialization type error
// @96..97: const initializer has unexpected type `int`
// @84..93: expecting type `::Undefined`
// const initialization type error
// @71..72: const initializer has unexpected type `int`
// @59..68: expecting type `::Undefined`
// >>>
