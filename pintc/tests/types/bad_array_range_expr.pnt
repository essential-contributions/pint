union MyUnion = A | B;

predicate test(
    // Bad
    a: int[true],
    b: int[false],
    d: int[0x0000000000000000000000000000000000000000000000000000000000000000],
    e: int[{1, 2}],
    f: int[[1, 2]],

    // Ok
    i: int[10],
    j: int[MyUnion],
) { }

// parsed <<<
// union ::MyUnion = A | B;
// 
// predicate ::test(
//     ::a: int[true],
//     ::b: int[false],
//     ::d: int[0x0000000000000000000000000000000000000000000000000000000000000000],
//     ::e: int[{1, 2}],
//     ::f: int[[1, 2]],
//     ::i: int[10],
//     ::j: int[::MyUnion],
// ) {
// }
// >>>

// typecheck_failure <<<
// invalid array range type bool
// @62..66: array access must be of type `int` or enumeration `union`
// found range type `bool`
// invalid array range type bool
// @80..85: array access must be of type `int` or enumeration `union`
// found range type `bool`
// invalid array range type b256
// @99..165: array access must be of type `int` or enumeration `union`
// found range type `b256`
// invalid array range type {int, int}
// @179..185: array access must be of type `int` or enumeration `union`
// found range type `{int, int}`
// invalid array range type int[2]
// @199..205: array access must be of type `int` or enumeration `union`
// found range type `int[2]`
// >>>
