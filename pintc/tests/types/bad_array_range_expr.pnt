predicate test {
    // Bad
    var a: int[true];
    var b: int[false];
    var d: int[0x0000000000000000000000000000000000000000000000000000000000000000];
    var e: int[{1, 2}];
    var f: int[[1, 2]];
    var g: int["str"];
    var h: int[10.0];

    // Ok
    enum MyEnum = A | B;
    var i: int[10];
    var j: int[MyEnum];
}

// parsed <<<
// predicate ::test {
//     var ::a: int[true];
//     var ::b: int[false];
//     var ::d: int[0x0000000000000000000000000000000000000000000000000000000000000000];
//     var ::e: int[{1, 2}];
//     var ::f: int[[1, 2]];
//     var ::g: int["str"];
//     var ::h: int[1e1];
//     var ::i: int[10];
//     var ::j: int[::MyEnum];
//     enum ::MyEnum = A | B;
// }
// >>>

// typecheck_failure <<<
// invalid array range type bool
// @43..47: array access must be of type `int` or `enum`
// found range type `bool`
// invalid array range type bool
// @65..70: array access must be of type `int` or `enum`
// found range type `bool`
// invalid array range type b256
// @88..154: array access must be of type `int` or `enum`
// found range type `b256`
// invalid array range type {int, int}
// @172..178: array access must be of type `int` or `enum`
// found range type `{int, int}`
// invalid array range type int[2]
// @196..202: array access must be of type `int` or `enum`
// found range type `int[2]`
// invalid array range type string
// @220..225: array access must be of type `int` or `enum`
// found range type `string`
// invalid array range type real
// @243..247: array access must be of type `int` or `enum`
// found range type `real`
// >>>
