enum SupperGuest = Bartholomew | JamesL | Andrew | Judas | Peter | John | Thomas | JamesG | Philip | Matthew | Jude | Simon;

predicate test {
    var x: int;

    constraint x in 11..22 in 13..20;

    var y: bool;
    constraint y in 0x0000111100001111000011110000111100001111000011110000111100001111..false;

    var z: SupperGuest;
    constraint z in [1, 4, 7];
    constraint x in [SupperGuest::Andrew, SupperGuest::Philip];
}

// parsed <<<
// enum ::SupperGuest = Bartholomew | JamesL | Andrew | Judas | Peter | John | Thomas | JamesG | Philip | Matthew | Jude | Simon;
//
// predicate ::test {
//     var ::x: int;
//     var ::y: bool;
//     var ::z: ::SupperGuest;
//     constraint ::x in 11..22 in 13..20;
//     constraint ::y in 0x0000111100001111000011110000111100001111000011110000111100001111..false;
//     constraint ::z in [1, 4, 7];
//     constraint ::x in [::SupperGuest::Andrew, ::SupperGuest::Philip];
// }
// >>>

// typecheck_failure <<<
// value type and range type differ
// @190..192: range type mismatch; expecting `bool` type, found `int` type
// left and right types in range differ
// @304..309: expecting `b256` type , found `bool` type
// compiler internal error: range ty is not numeric or array?
// @231..309: range ty is not numeric or array?
// value type and array element type in range differ
// @357..358: array element type mismatch; expecting `::SupperGuest` type, found `int` type
// value type and array element type in range differ
// @0..123: array element type mismatch; expecting `int` type, found `::SupperGuest` type
// constraint expression type error
// @231..309: expecting type `bool`
// >>>
