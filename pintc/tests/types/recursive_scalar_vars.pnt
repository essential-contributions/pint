predicate test() {
    state a = b + c;
    state b = c + a;
    state c = a - b;
}

// parsed <<<
// predicate ::test(
// ) {
//     state ::a = (::b + ::c);
//     state ::b = (::c + ::a);
//     state ::c = (::a - ::b);
// }
// >>>

// typecheck_failure <<<
// expression has a recursive dependency
// @75..76: cannot determine type of expression due to dependency
// @33..38: dependency on expression is recursive
// expression has a recursive dependency
// @33..34: cannot determine type of expression due to dependency
// @54..59: dependency on expression is recursive
// expression has a recursive dependency
// @54..55: cannot determine type of expression due to dependency
// @75..80: dependency on expression is recursive
// unable to determine expression type
// @23..38: type of this expression is ambiguous
// unable to determine expression type
// @44..59: type of this expression is ambiguous
// unable to determine expression type
// @65..80: type of this expression is ambiguous
// >>>
