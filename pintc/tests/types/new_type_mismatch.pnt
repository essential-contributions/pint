type I = int;

let i: I = 11;
let j: I = 22.2;

solve satisfy;

// intermediate <<<
// var ::i: ::I;
// var ::j: ::I;
// type ::I = int;
// constraint (::i == 11);
// constraint (::j == 2.22e1);
// solve satisfy;
// >>>

// typecheck_failure <<<
// binary operator type error
// @41..45: operator `==` argument has unexpected type `real`
// @34..35: expecting type `::I (int)`
// compiler internal error: missing expr key in expr_types slotmap when checking constraint expr types
// >>>
