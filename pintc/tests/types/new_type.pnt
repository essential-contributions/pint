union TheLetterA = T | U | V;
type Hooray = int[3];
type Point = { x: int, y: int };
union Experience = Int | Unint;
type A = TheLetterA;
type I = int;
type Int = int;

const cc: I = 4;

storage {
    x: int,
    c: I,
}

interface Boo {
    storage {
        c: I,
    }

    predicate Foo(x: A);
}

predicate test(h: Hooray) {
    state t: A = A::T;
    pub var pt: A = A::T;

    state u: TheLetterA = A::U;
    state v: A = TheLetterA::V;

    state i: I = 11;
    state j: {I, int} = {22, 33};

    state r: Int = 44;
    state e: Experience = Experience::Int;

    constraint h[1] == 55;

    state p: Point = { 66, 77 };
    constraint r < p.y;

    state q: int = i as Int;

    state x: I = storage::x;
}

// parsed <<<
// const ::cc: ::I = 4;
// union ::TheLetterA = T | U | V;
// union ::Experience = Int | Unint;
// type ::Hooray = int[3];
// type ::Point = {x: int, y: int};
// type ::A = ::TheLetterA;
// type ::I = int;
// type ::Int = int;
// storage {
//     x: int,
//     c: ::I,
// }
// interface ::Boo {
//     storage {
//         c: ::I,
//     }
//     predicate Foo (
//         x: ::A,
//     );
// }
// 
// predicate ::test(
//     ::h: ::Hooray,
// ) {
//     pub var ::pt: ::A;
//     state ::t: ::A = ::A::T;
//     state ::u: ::TheLetterA = ::A::U;
//     state ::v: ::A = ::TheLetterA::V;
//     state ::i: ::I = 11;
//     state ::j: {::I, int} = {22, 33};
//     state ::r: ::Int = 44;
//     state ::e: ::Experience = ::Experience::Int;
//     state ::p: ::Point = {66, 77};
//     state ::q: int = ::i as ::Int;
//     state ::x: ::I = storage::x;
//     constraint (::pt == ::A::T);
//     constraint (::h[1] == 55);
//     constraint (::r < ::p.y);
// }
// >>>

// flattened <<<
// const ::cc: int = 4;
// union ::TheLetterA = T | U | V;
// union ::Experience = Int | Unint;
// type ::Hooray = int[3];
// type ::Point = {x: int, y: int};
// type ::A = ::TheLetterA;
// type ::I = int;
// type ::Int = int;
// storage {
//     x: int,
//     c: int,
// }
// interface ::Boo {
//     storage {
//         c: int,
//     }
//     predicate Foo (
//         x: ::TheLetterA,
//     );
// }
// 
// predicate ::test(
//     ::h: int[3],
// ) {
//     pub var ::pt: ::TheLetterA;
//     state ::t: ::TheLetterA = ::TheLetterA::T;
//     state ::u: ::TheLetterA = ::TheLetterA::U;
//     state ::v: ::TheLetterA = ::TheLetterA::V;
//     state ::i: int = 11;
//     state ::j: {int, int} = {22, 33};
//     state ::r: int = 44;
//     state ::e: ::Experience = ::Experience::Int;
//     state ::p: {x: int, y: int} = {66, 77};
//     state ::q: int = ::i;
//     state ::x: int = __storage_get({0});
//     constraint (__pub_var(__this_pathway(), {0}) == ::TheLetterA::T);
//     constraint (::h[1] == 55);
//     constraint (::r < ::p.y);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
