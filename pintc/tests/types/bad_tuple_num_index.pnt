predicate test {
    var a = { 11, 22, 33 };

    constraint a.4 == 44;
}

// parsed <<<
// predicate ::test {
//     var ::a;
//     constraint (::a == {11, 22, 33});
//     constraint (::a.4 == 44);
// }
// >>>

// typecheck_failure <<<
// invalid tuple accessor
// @61..64: unable to get field from tuple using `4`
// tuple has type `{int, int, int}`
// binary operator type error
// @68..70: operator `==` argument has unexpected type `int`
// @61..64: expecting type `{int, int, int}`
// >>>
