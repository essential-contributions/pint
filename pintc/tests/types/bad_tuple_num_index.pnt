let a = { 11, 22, 33 };

constraint a.4 == 44;

solve satisfy;

// intermediate <<<
// var ::a;
// constraint (::a == {11, 22, 33});
// constraint (::a.4 == 44);
// solve satisfy;
// >>>

// typecheck_failure <<<
// invalid tuple accessor
// @36..39: unable to get field from tuple using `4`
// tuple has type `{int, int, int}`
// compiler internal error: missing expr key in expr_types slotmap when checking constraint expr types
// >>>
