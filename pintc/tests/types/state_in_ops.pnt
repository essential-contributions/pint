storage {
    i: int,
    b: bool,
}

predicate test() {
    state i1 = storage::i;
    state b1 = storage::b;

    state bad_and = b1 && i1;
}

// parsed <<<
// storage {
//     i: int,
//     b: bool,
// }
// 
// predicate ::test(
// ) {
//     state ::i1 = storage::i;
//     state ::b1 = storage::b;
//     state ::bad_and = (::b1 && ::i1);
// }
// >>>

// typecheck_failure <<<
// binary operator type error
// @138..140: operator `&&` argument has unexpected type `int`
// @132..140: expecting type `bool`
// >>>
