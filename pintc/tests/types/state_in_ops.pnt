storage {
    i: int,    
    b: bool,
}

state i1 = storage::i;
state b1 = storage::b;

var bad_and = b1 && i1;

solve satisfy;

// intermediate <<<
// storage {
//     i: int,
//     b: bool,
// }
// var ::bad_and;
// state ::i1 = storage::i;
// state ::b1 = storage::b;
// constraint (::bad_and == (::b1 && ::i1));
// solve satisfy;
// >>>

// typecheck_failure <<<
// binary operator type error
// @109..111: operator `&&` argument has unexpected type `int`
// @103..111: expecting type `bool`
// unable to determine expression type
// @93..100: type of this expression is ambiguous
// constraint expression type error
// @89..111: constraint expression has unexpected type `Unknown`
// @89..111: expecting type `bool`
// >>>
