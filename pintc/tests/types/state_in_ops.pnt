storage {
    i: int,
    b: bool,
}

predicate test() {
    let i1 = storage::i;
    let b1 = storage::b;

    let bad_and = b1 && i1;
}

// parsed <<<
// storage {
//     i: int,
//     b: bool,
// }
//
// predicate ::test(
// ) {
//     let ::i1 = storage::i;
//     let ::b1 = storage::b;
//     let ::bad_and = (::b1 && ::i1);
// }
// >>>

// typecheck_failure <<<
// binary operator type error
// @126..128: operator `&&` argument has unexpected type `bool?`
// @126..134: expecting type `bool`
// >>>
