storage {
    i: int,
    b: bool,
}

predicate test {
    state i1 = storage::i;
    state b1 = storage::b;

    var bad_and = b1 && i1;
}

// parsed <<<
// storage {
//     i: int,
//     b: bool,
// }
//
// predicate ::test {
//     var ::bad_and;
//     state ::i1 = storage::i;
//     state ::b1 = storage::b;
//     constraint (::bad_and == (::b1 && ::i1));
// }
// >>>

// typecheck_failure <<<
// binary operator type error
// @134..136: operator `&&` argument has unexpected type `int`
// @128..136: expecting type `bool`
// binary operator type error
// @134..136: operator `&&` argument has unexpected type `int`
// @128..136: expecting type `bool`
// unable to determine expression type
// @118..125: type of this expression is ambiguous
// constraint expression type error
// @114..136: constraint expression has unknown type
// @114..136: expecting type `bool`
// >>>
