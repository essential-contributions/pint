union T = FortyTwo | FleventyFive;

predicate test() {
    let a = 11 + false;
    let b = 22 - true;
    let c = [1,2] * 33;
    let d = 0x0000111100001111000011110000111100001111000011110000111100001111 / 44;

    let e = 55 % T::FortyTwo;

    // `==` and `!=` take any type but they must be equivalent.
    let k = 16 == T::FleventyFive;
    let l = 17 != true;

    let m = true > false;
    let o = 20 < 0x0000111100001111000011110000111100001111000011110000111100001111;
    let p = 22 <= [23, 23];

    let q = true && 24;

    // Tuples can compare with `==` or `!=` too.
    let s = {true, 26} == {27, false};
}

// parsed <<<
// union ::T = FortyTwo | FleventyFive;
//
// predicate ::test(
// ) {
//     let ::a = (11 + false);
//     let ::b = (22 - true);
//     let ::c = ([1, 2] * 33);
//     let ::d = (0x0000111100001111000011110000111100001111000011110000111100001111 / 44);
//     let ::e = (55 % ::T::FortyTwo);
//     let ::k = (16 == ::T::FleventyFive);
//     let ::l = (17 != true);
//     let ::m = (true > false);
//     let ::o = (20 < 0x0000111100001111000011110000111100001111000011110000111100001111);
//     let ::p = (22 <= [23, 23]);
//     let ::q = (true && 24);
//     let ::s = ({true, 26} == {27, false});
// }
// >>>

// typecheck_failure <<<
// operator invalid type error
// @67..77: invalid non-numeric type `bool` for operator `+`
// operator invalid type error
// @91..100: invalid non-numeric type `bool` for operator `-`
// operator invalid type error
// @114..124: invalid non-numeric type `int[2]` for operator `*`
// operator invalid type error
// @138..209: invalid non-numeric type `b256` for operator `/`
// operator invalid type error
// @224..240: invalid non-numeric type `::T` for operator `%`
// binary operator type error
// @325..340: operator `==` argument has unexpected type `::T`
// @319..321: expecting type `int`
// binary operator type error
// @360..364: operator `!=` argument has unexpected type `bool`
// @354..356: expecting type `int`
// operator invalid type error
// @379..391: invalid non-numeric type `bool` for operator `>`
// operator invalid type error
// @405..476: invalid non-numeric type `b256` for operator `<`
// operator invalid type error
// @490..504: invalid non-numeric type `int[2]` for operator `<=`
// binary operator type error
// @527..529: operator `&&` argument has unexpected type `int`
// @519..529: expecting type `bool`
// binary operator type error
// @607..618: operator `==` argument has unexpected type `{int, bool}`
// @593..603: expecting type `{bool, int}`
// >>>
