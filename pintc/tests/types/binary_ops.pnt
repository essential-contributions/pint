// We don't have error recovery in the middle end yet so it'll bail on the first one.
// When we do, these should all be errors.

let a = 11 + false;
let b = 22 - true;
let c = [1,2] * 33;
let d = "four" / 44;

enum T = FortyTwo | FleventyFive;
let e = 55 % T::FortyTwo;

// Numerics are allowed, but they must match.
let f = 66 + 77.7;
let g = 88 - 99.9;
let h = 10.10 * 11;
let i = 12 / 13.13;
let j = 14.14 % 15;

// `==` and `!=` take any type but they must be equivalent.
let k = 16 == T::FleventyFive;
let l = 17 != true;

let m = true > false;
let n = 18 >= 19.19;
let o = 20 < "21";
let p = 22 <= [23, 23];

let q = true && 24;
let r = 25.25 || false;

// Tuples can compare with `==` or `!=` too.
let s = {true, 26} == {27, false};
let t = {28.28, 29} != {30, 31};

solve satisfy;

// intermediate <<<
// var ::a;
// var ::b;
// var ::c;
// var ::d;
// var ::e;
// var ::f;
// var ::g;
// var ::h;
// var ::i;
// var ::j;
// var ::k;
// var ::l;
// var ::m;
// var ::n;
// var ::o;
// var ::p;
// var ::q;
// var ::r;
// var ::s;
// var ::t;
// enum ::T = FortyTwo | FleventyFive;
// constraint (::a == (11 + false));
// constraint (::b == (22 - true));
// constraint (::c == ([1, 2] * 33));
// constraint (::d == ("four" / 44));
// constraint (::e == (55 % ::T::FortyTwo));
// constraint (::f == (66 + 7.77e1));
// constraint (::g == (88 - 9.99e1));
// constraint (::h == (1.01e1 * 11));
// constraint (::i == (12 / 1.313e1));
// constraint (::j == (1.414e1 % 15));
// constraint (::k == (16 == ::T::FleventyFive));
// constraint (::l == (17 != true));
// constraint (::m == (true > false));
// constraint (::n == (18 >= 1.919e1));
// constraint (::o == (20 < "21"));
// constraint (::p == (22 <= [23, 23]));
// constraint (::q == (true && 24));
// constraint (::r == (2.525e1 || false));
// constraint (::s == ({true, 26} == {27, false}));
// constraint (::t == ({2.828e1, 29} != {30, 31}));
// solve satisfy;
// >>>

// typecheck_failure <<<
// binary operator type error
// @143..148: operator `+` argument has unexpected type `bool`
// >>>
