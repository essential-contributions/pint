enum T = FortyTwo | FleventyFive;

predicate test {
    var a = 11 + false;
    var b = 22 - true;
    var c = [1,2] * 33;
    var d = 0x0000111100001111000011110000111100001111000011110000111100001111 / 44;

    var e = 55 % T::FortyTwo;

    // `==` and `!=` take any type but they must be equivalent.
    var k = 16 == T::FleventyFive;
    var l = 17 != true;

    var m = true > false;
    var o = 20 < 0x0000111100001111000011110000111100001111000011110000111100001111;
    var p = 22 <= [23, 23];

    var q = true && 24;

    // Tuples can compare with `==` or `!=` too.
    var s = {true, 26} == {27, false};
}

// parsed <<<
// enum ::T = FortyTwo | FleventyFive;
// 
// predicate ::test {
//     var ::a;
//     var ::b;
//     var ::c;
//     var ::d;
//     var ::e;
//     var ::k;
//     var ::l;
//     var ::m;
//     var ::o;
//     var ::p;
//     var ::q;
//     var ::s;
//     constraint (::a == (11 + false));
//     constraint (::b == (22 - true));
//     constraint (::c == ([1, 2] * 33));
//     constraint (::d == (0x0000111100001111000011110000111100001111000011110000111100001111 / 44));
//     constraint (::e == (55 % ::T::FortyTwo));
//     constraint (::k == (16 == ::T::FleventyFive));
//     constraint (::l == (17 != true));
//     constraint (::m == (true > false));
//     constraint (::o == (20 < 0x0000111100001111000011110000111100001111000011110000111100001111));
//     constraint (::p == (22 <= [23, 23]));
//     constraint (::q == (true && 24));
//     constraint (::s == ({true, 26} == {27, false}));
// }
// >>>

// typecheck_failure <<<
// binary operator type error
// @69..74: operator `+` argument has unexpected type `bool`
// binary operator type error
// @93..97: operator `-` argument has unexpected type `bool`
// binary operator type error
// @111..116: operator `*` argument has unexpected type `int[2]`
// binary operator type error
// @135..201: operator `/` argument has unexpected type `b256`
// binary operator type error
// @226..237: operator `%` argument has unexpected type `::T`
// binary operator type error
// @322..337: operator `==` argument has unexpected type `::T`
// @316..318: expecting type `int`
// binary operator type error
// @357..361: operator `!=` argument has unexpected type `bool`
// @351..353: expecting type `int`
// binary operator type error
// @376..380: operator `>` argument has unexpected type `bool`
// binary operator type error
// @407..473: operator `<` argument has unexpected type `b256`
// binary operator type error
// @493..501: operator `<=` argument has unexpected type `int[2]`
// binary operator type error
// @524..526: operator `&&` argument has unexpected type `int`
// @516..526: expecting type `bool`
// binary operator type error
// @604..615: operator `==` argument has unexpected type `{int, bool}`
// @590..600: expecting type `{bool, int}`
// >>>
