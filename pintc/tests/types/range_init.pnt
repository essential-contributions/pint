predicate test {
    var a = 1..3;
    var b:int = 3..5;

    constraint a == b;
}

// parsed <<<
// predicate ::test {
//     var ::a;
//     var ::b: int;
//     constraint (::a >= 1);
//     constraint (::a <= 3);
//     constraint (::b >= 3);
//     constraint (::b <= 5);
//     constraint (::a == ::b);
// }
// >>>

// flattened <<<
// predicate ::test {
//     var ::a: int;
//     var ::b: int;
//     constraint (::a >= 1);
//     constraint (::a <= 3);
//     constraint (::b >= 3);
//     constraint (::b <= 5);
//     constraint (::a == ::b);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
