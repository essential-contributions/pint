// A local macro which when called from other modules should expand in the correct scope.

macro @main_macro($id) {
    $id == 44
}

use c;
use e::@e_macro;

predicate test {
    // Call a macro in a module, should be expanded in the current scope.

    var a: int;
    constraint ::b::@b_macro(a; 11 + 22);
    constraint c::@c_macro(a; 33);

    // A macro which calls another macro in a module we haven't referenced before.  `@e_macro()` calls
    // `::f::@f_macro()` but before now we haven't used `::f` in `main`.

    constraint @e_macro(a);

    g::@g_macro(55; 66; 77);

}

// parsed <<<
// predicate ::test {
//     var ::a: int;
//     constraint (::a <= (11 + 22));
//     constraint (::a >= 33);
//     constraint ((::a % 3) == 0);
//     constraint (55 != 66);
//     constraint (66 != 77);
// }
// >>>

// flattened <<<
// predicate ::test {
//     var ::a: int;
//     constraint (::a <= (11 + 22));
//     constraint (::a >= 33);
//     constraint ((::a % 3) == 0);
//     constraint (55 != 66);
//     constraint (66 != 77);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
