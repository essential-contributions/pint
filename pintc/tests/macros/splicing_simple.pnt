macro @sum($x, &rest) {
    @sum($x + &rest)
}

macro @sum($x) {
    $x
}

macro @less_than($min, $next, &others) {
    constraint $min < $next;
    @less_than($min; &others);
}

macro @less_than($min, $other) {
    constraint $min < $other;
}

predicate test(a_ary: int[5], lt_a: int) {
    let b_ary: int[4] = [11, 22, 33, 44];

    // Sum both arrays.
    let s_a = @sum(~a_ary);
    let s_b = @sum(~b_ary);

    // Sum both arrays together with some immediates.
    let s_ab = @sum(~a_ary + 55; 66 + ~b_ary);

    // Call less_than() with an explicit min or by using the first element as the min.
    @less_than(lt_a; ~a_ary);
    @less_than(~b_ary);
}

// parsed <<<
// predicate ::test(
//     ::a_ary: int[5],
//     ::lt_a: int,
// ) {
//     let ::b_ary: int[4] = [11, 22, 33, 44];
//     let ::s_a = ((((::a_ary[0] + ::a_ary[1]) + ::a_ary[2]) + ::a_ary[3]) + ::a_ary[4]);
//     let ::s_b = (((::b_ary[0] + ::b_ary[1]) + ::b_ary[2]) + ::b_ary[3]);
//     let ::s_ab = ((((((((((::a_ary[0] + ::a_ary[1]) + ::a_ary[2]) + ::a_ary[3]) + ::a_ary[4]) + 55) + 66) + ::b_ary[0]) + ::b_ary[1]) + ::b_ary[2]) + ::b_ary[3]);
//     constraint (::lt_a < ::a_ary[0]);
//     constraint (::b_ary[0] < ::b_ary[1]);
//     constraint (::lt_a < ::a_ary[1]);
//     constraint (::b_ary[0] < ::b_ary[2]);
//     constraint (::lt_a < ::a_ary[2]);
//     constraint (::b_ary[0] < ::b_ary[3]);
//     constraint (::lt_a < ::a_ary[3]);
//     constraint (::lt_a < ::a_ary[4]);
// }
// >>>

// flattened <<<
// predicate ::test(
//     ::a_ary: int[5],
//     ::lt_a: int,
// ) {
//     let ::b_ary: int[4] = [11, 22, 33, 44];
//     let ::s_a: int = ((((::a_ary[0] + ::a_ary[1]) + ::a_ary[2]) + ::a_ary[3]) + ::a_ary[4]);
//     let ::s_b: int = (((::b_ary[0] + ::b_ary[1]) + ::b_ary[2]) + ::b_ary[3]);
//     let ::s_ab: int = ((((((((((::a_ary[0] + ::a_ary[1]) + ::a_ary[2]) + ::a_ary[3]) + ::a_ary[4]) + 55) + 66) + ::b_ary[0]) + ::b_ary[1]) + ::b_ary[2]) + ::b_ary[3]);
//     constraint (::lt_a < ::a_ary[0]);
//     constraint (::b_ary[0] < ::b_ary[1]);
//     constraint (::lt_a < ::a_ary[1]);
//     constraint (::b_ary[0] < ::b_ary[2]);
//     constraint (::lt_a < ::a_ary[2]);
//     constraint (::b_ary[0] < ::b_ary[3]);
//     constraint (::lt_a < ::a_ary[3]);
//     constraint (::lt_a < ::a_ary[4]);
// }
// >>>
