macro @foo($x) {
    var a: int;
    constraint a == $x;
}

predicate test {
    @foo(11);
    @foo(22);

    var a: int;
    @foo(a);
}

// parsed <<<
// predicate ::test {
//     var ::a: int;
//     var ::anon@0::a: int;
//     var ::anon@1::a: int;
//     var ::anon@2::a: int;
//     constraint (::anon@0::a == 11);
//     constraint (::anon@1::a == 22);
//     constraint (::anon@2::a == ::a);
// }
// >>>

// flattened <<<
// predicate ::test {
//     var ::a: int;
//     var ::anon@0::a: int;
//     var ::anon@1::a: int;
//     var ::anon@2::a: int;
//     constraint (::anon@0::a == 11);
//     constraint (::anon@1::a == 22);
//     constraint (::anon@2::a == ::a);
// }
// >>>
