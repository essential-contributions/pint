macro @foo($a, $x) {
    constraint $a == $x;
}

predicate test(a0: int, a1: int, a2: int, a: int) {
    @foo(a0; 11);
    @foo(a1; 22);
    @foo(a2; a);
}

// parsed <<<
// predicate ::test(
//     ::a0: int,
//     ::a1: int,
//     ::a2: int,
//     ::a: int,
// ) {
//     constraint (::a0 == 11);
//     constraint (::a1 == 22);
//     constraint (::a2 == ::a);
// }
// >>>

// flattened <<<
// predicate ::test(
//     ::a0: int,
//     ::a1: int,
//     ::a2: int,
//     ::a: int,
// ) {
//     constraint (::a0 == 11);
//     constraint (::a1 == 22);
//     constraint (::a2 == ::a);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
