predicate test() {
    // Call a macro in a module which doesn't exist.
    constraint ::b::@b_macro(11);

    // Call a non-existent macro in a module which exists.
    constraint ::c::@c_macro(22);

    // Call a macro which in turn has a parse error.  It's important that the span(s) are correct here.
    constraint d::@d_macro_parse_error(44);

    // Call a macro in a different module with the wrong number of args.
    constraint e::@e_macro(1; 2; 3);
}

// parse_failure <<<
// macro not found
// @87..104: macro `::b::@b_macro` not found
// macro not found
// @181..198: macro `::c::@c_macro` not found
// expected `an identifier`, found `var`
// @45..48: expected `an identifier`
// @320..347: when making macro call to '::d::@d_macro_parse_error'
// unable to match macro call
// @438..458: unable to match call to macro `::e::@e_macro`
// the valid number of arguments must be exactly 1 but this call passes 3 arguments
// a macro named `::e::@e_macro` found with a different signature
// >>>
