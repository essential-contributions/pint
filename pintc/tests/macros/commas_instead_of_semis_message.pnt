macro @m($x, $y, $z) {
    $x + $y + $z
}

predicate test(a: int) {
    constraint @m(a, a);
    constraint @m(a, a, a);
    constraint @m(a, a, a, a);
    constraint @m([a, a, a]; a);
}

// parse_failure <<<
// unable to match macro call
// @83..91: unable to match call to macro `::@m`
// the valid number of arguments must be exactly 3 but this call passes 1 arguments
// a macro named `::@m` found with a different signature
// unable to match macro call
// @108..119: unable to match call to macro `::@m`
// the valid number of arguments must be exactly 3 but this call passes 1 arguments
// macro arguments are separated by `;`.  Perhaps try ::@m(a; a; a)
// unable to match macro call
// @136..150: unable to match call to macro `::@m`
// the valid number of arguments must be exactly 3 but this call passes 1 arguments
// a macro named `::@m` found with a different signature
// unable to match macro call
// @167..183: unable to match call to macro `::@m`
// the valid number of arguments must be exactly 3 but this call passes 2 arguments
// macro arguments are separated by `;`.  Perhaps try ::@m([a; a; a]a)
// >>>
