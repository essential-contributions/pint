macro @add($a, $b) {
    $a + $b
}

predicate test(a: int[2], b: int, x: int, y: int) {
    constraint a == [11, 22];
    constraint b == 33;

    constraint x == @add(~foo);
    constraint y == @add(~b; 44);
}

// parse_failure <<<
// undefined spliced variable
// @169..172: unable to splice unknown variable `::foo`
// unable to match macro call
// @163..173: unable to match call to macro `::@add`
// the valid number of arguments must be exactly 2 but this call passes 1 arguments
// a macro named `::@add` found with a different signature
// spliced variable `::b` must be an array
// @201..202: unable to splice non-array variable `::b`
// expected `!`, `(`, `+`, `-`, `::`, `[`, `[[`, `a boolean`, `a literal`, `an identifier`, `cond`, `const`, `constraint`, `exists`, `forall`, `if`, `interface`, `intrinsic_name`, `macro_name`, `match`, `mut`, `predicate`, `pub`, `state`, `storage`, `type`, `union`, `use`, `{`, or `}`, found `b`
// @25..27: expected `!`, `(`, `+`, `-`, `::`, `[`, `[[`, `a boolean`, `a literal`, `an identifier`, `cond`, `const`, `constraint`, `exists`, `forall`, `if`, `interface`, `intrinsic_name`, `macro_name`, `match`, `mut`, `predicate`, `pub`, `state`, `storage`, `type`, `union`, `use`, `{`, or `}`
// @195..207: when making macro call to '::@add'
// >>>
