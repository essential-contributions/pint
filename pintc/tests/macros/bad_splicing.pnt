macro @add($a, $b) {
    $a + $b
}

predicate test {
    var a: int[2] = [11, 22];
    var b: int = 33;

    var x: int = @add(~foo);
    var y: int = @add(~b; 44);
}

// parse_failure <<<
// undefined spliced variable
// @128..131: unable to splice unknown variable `::foo`
// unable to match macro call
// @122..132: unable to match call to macro `::@add`
// the valid number of arguments must be exactly 2 but this call passes 1 arguments
// a macro named `::@add` found with a different signature
// spliced variable `::b` must be an array
// @157..158: unable to splice non-array variable `::b`
// expected `!`, `(`, `+`, `-`, `::`, `[`, `a boolean`, `a literal`, `an identifier`, `cond`, `const`, `constraint`, `enum`, `exists`, `forall`, `if`, `interface`, `intrinsic_name`, `macro_name`, `match`, `mut`, `predicate`, `pub`, `state`, `storage`, `type`, `union`, `use`, `var`, `{`, or `}`, found `b`
// @25..27: expected `!`, `(`, `+`, `-`, `::`, `[`, `a boolean`, `a literal`, `an identifier`, `cond`, `const`, `constraint`, `enum`, `exists`, `forall`, `if`, `interface`, `intrinsic_name`, `macro_name`, `match`, `mut`, `predicate`, `pub`, `state`, `storage`, `type`, `union`, `use`, `var`, `{`, or `}`
// @151..163: when making macro call to '::@add'
// >>>
