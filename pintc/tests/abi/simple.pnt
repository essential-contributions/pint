storage {
    s0: bool,
    s1: int,
    s2: b256,
    s3: { int, int },
    s4: { int, int, { int, int } },
    my_map: (int => { int, { b256, int } }),
    my_nested_map: (int => (b256 => { int, { b256, int } })),
}

predicate Foo(
    v0: bool,
    v1: int,
    v2: b256,
    v3: { int, int },
    v4: { int, int, { int, int } },
) {
}

// parsed <<<
// storage {
//     s0: bool,
//     s1: int,
//     s2: b256,
//     s3: {int, int},
//     s4: {int, int, {int, int}},
//     my_map: ( int => {int, {b256, int}} ),
//     my_nested_map: ( int => ( b256 => {int, {b256, int}} ) ),
// }
//
// predicate ::Foo(
//     ::v0: bool,
//     ::v1: int,
//     ::v2: b256,
//     ::v3: {int, int},
//     ::v4: {int, int, {int, int}},
// ) {
// }
// >>>

// flattened <<<
// storage {
//     s0: bool,
//     s1: int,
//     s2: b256,
//     s3: {int, int},
//     s4: {int, int, {int, int}},
//     my_map: ( int => {int, {b256, int}} ),
//     my_nested_map: ( int => ( b256 => {int, {b256, int}} ) ),
// }
//
// predicate ::Foo(
//     ::v0: bool,
//     ::v1: int,
//     ::v2: b256,
//     ::v3: {int, int},
//     ::v4: {int, int, {int, int}},
// ) {
// }
// >>>
