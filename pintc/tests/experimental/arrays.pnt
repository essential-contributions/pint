union Colour = Red | Green | Blue;

predicate test(
    a: real[5],
    a1: real,
    b: real[Colour][3],
    b_r_2: real,
) {
    constraint a1 == a[1];
    constraint b_r_2 == b[Colour::Red][2];
}

// parsed <<<
// union ::Colour = Red | Green | Blue;
// 
// predicate ::test(
//     ::a: real[5],
//     ::a1: real,
//     ::b: real[3][::Colour],
//     ::b_r_2: real,
// ) {
//     constraint (::a1 == ::a[1]);
//     constraint (::b_r_2 == ::b[::Colour::Red][2]);
// }
// >>>

// flattened <<<
// union ::Colour = Red | Green | Blue;
// 
// predicate ::test(
//     ::a: real[5],
//     ::a1: real,
//     ::b: real[3][::Colour],
//     ::b_r_2: real,
// ) {
//     constraint (::a1 == ::a[1]);
//     constraint (::b_r_2 == ::b[::Colour::Red][2]);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
