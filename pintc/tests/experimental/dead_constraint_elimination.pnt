const b = 3.14 < 4.23;

predicate Test {
    constraint b;
}

// parsed <<<
// const ::b = (3.14e0 < 4.23e0);
// 
// predicate ::Test {
//     constraint ::b;
// }
// >>>

// flattened <<<
// const ::b: bool = true;
// 
// predicate ::Test {
//     constraint true;
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>

// optimized <<<
// const ::b: bool = true;
// 
// predicate ::Test {
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>

// warnings <<<
// constraint is trivial
// @45..57: constraint is trivial
// constraint is unnecessary and can be removed or revised
// >>>