type I = int;
type Point = { x: real, y: real };
union Experience = Real | Unreal;
type Real = real;

storage {
    x: Real,
}

predicate test() {
    state i: I = 11;
    state j: {I, real} = {22, 33.3};

    state r: Real = 44.4;
    state e: Experience = Experience::Real;

    state p: Point = { 66.6, 77.7 };
    constraint r < p.y;

    state q: real = i as Real;

    state x: Real = storage::x;
}

// parsed <<<
// union ::Experience = Real | Unreal;
// type ::I = int;
// type ::Point = {x: real, y: real};
// type ::Real = real;
// storage {
//     x: ::Real,
// }
// 
// predicate ::test(
// ) {
//     state ::i: ::I = 11;
//     state ::j: {::I, real} = {22, 3.33e1};
//     state ::r: ::Real = 4.44e1;
//     state ::e: ::Experience = ::Experience::Real;
//     state ::p: ::Point = {6.66e1, 7.77e1};
//     state ::q: real = ::i as ::Real;
//     state ::x: ::Real = storage::x;
//     constraint (::r < ::p.y);
// }
// >>>

// flattened <<<
// union ::Experience = Real | Unreal;
// type ::I = int;
// type ::Point = {x: real, y: real};
// type ::Real = real;
// storage {
//     x: real,
// }
// 
// predicate ::test(
// ) {
//     state ::i: int = 11;
//     state ::j: {int, real} = {22, 3.33e1};
//     state ::r: real = 4.44e1;
//     state ::e: ::Experience = ::Experience::Real;
//     state ::p: {x: real, y: real} = {6.66e1, 7.77e1};
//     state ::q: real = ::i as real;
//     state ::x: real = __storage_get({0});
//     constraint (::r < ::p.y);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
