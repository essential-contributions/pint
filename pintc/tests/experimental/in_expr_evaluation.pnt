const a = 1.0 in [1.0, 2.0];
const b = 1.23 in [3.45, 2.2];
const c = 1.5 in 1.0..2.0;
const d = 1.1 in 3.1..2.2;

predicate Test() {
    state e = 1.4 in [1.1, 2.9];
    state f = 1.3 in [3.9, 2.0];
    state g = 0.4 in 3.0..2.0;
    state h = 0.4 in 0.1..0.4;
}

// parsed <<<
// const ::b = 1.23e0 in [3.45e0, 2.2e0];
// const ::d = 1.1e0 in 3.1e0..2.2e0;
// const ::a = 1e0 in [1e0, 2e0];
// const ::c = 1.5e0 in 1e0..2e0;
// 
// predicate ::Test(
// ) {
//     state ::e = 1.4e0 in [1.1e0, 2.9e0];
//     state ::f = 1.3e0 in [3.9e0, 2e0];
//     state ::g = 4e-1 in 3e0..2e0;
//     state ::h = 4e-1 in 1e-1..4e-1;
// }
// >>>

// flattened <<<
// const ::b: bool = false;
// const ::d: bool = false;
// const ::a: bool = true;
// const ::c: bool = true;
// 
// predicate ::Test(
// ) {
//     state ::e: bool = ((1.4e0 == 1.1e0) || (1.4e0 == 2.9e0));
//     state ::f: bool = ((1.3e0 == 3.9e0) || (1.3e0 == 2e0));
//     state ::g: bool = ((4e-1 >= 3e0) && (4e-1 <= 2e0));
//     state ::h: bool = ((4e-1 >= 1e-1) && (4e-1 <= 4e-1));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
