union T = FortyTwo | FleventyFive;

predicate test() {
    // Numerics are allowed, but they must match.
    let f = 66 + 77.7;
    let g = 88 - 99.9;
    let h = 10.10 * 11;
    let i = 12 / 13.13;
    let j = 14.14 % 15;

    let n = 18 >= 19.19;

    let r = 25.25 || false;

    // Tuples can compare with `==` or `!=` too.
    let t = {28.28, 29} != {30, 31};
}

// parsed <<<
// union ::T = FortyTwo | FleventyFive;
// 
// predicate ::test(
// ) {
//     let ::f = (66 + 7.77e1);
//     let ::g = (88 - 9.99e1);
//     let ::h = (1.01e1 * 11);
//     let ::i = (12 / 1.313e1);
//     let ::j = (1.414e1 % 15);
//     let ::n = (18 >= 1.919e1);
//     let ::r = (2.525e1 || false);
//     let ::t = ({2.828e1, 29} != {30, 31});
// }
// >>>

// typecheck_failure <<<
// binary operator type error
// @122..126: operator `+` argument has unexpected type `real`
// @117..119: expecting type `int`
// binary operator type error
// @145..149: operator `-` argument has unexpected type `real`
// @140..142: expecting type `int`
// binary operator type error
// @171..173: operator `*` argument has unexpected type `int`
// @163..168: expecting type `real`
// binary operator type error
// @192..197: operator `/` argument has unexpected type `real`
// @187..189: expecting type `int`
// binary operator type error
// @219..221: operator `%` argument has unexpected type `int`
// @211..216: expecting type `real`
// binary operator type error
// @242..247: operator `>=` argument has unexpected type `real`
// @236..238: expecting type `int`
// binary operator type error
// @262..267: operator `||` argument has unexpected type `real`
// @262..276: expecting type `bool`
// binary operator type error
// @355..363: operator `!=` argument has unexpected type `{int, int}`
// @340..351: expecting type `{real, int}`
// >>>
