union T = FortyTwo | FleventyFive;

predicate test {
    // Numerics are allowed, but they must match.
    var f = 66 + 77.7;
    var g = 88 - 99.9;
    var h = 10.10 * 11;
    var i = 12 / 13.13;
    var j = 14.14 % 15;

    var n = 18 >= 19.19;

    var r = 25.25 || false;

    // Tuples can compare with `==` or `!=` too.
    var t = {28.28, 29} != {30, 31};
}

// parsed <<<
// union ::T = FortyTwo | FleventyFive;
// 
// predicate ::test {
//     var ::f;
//     var ::g;
//     var ::h;
//     var ::i;
//     var ::j;
//     var ::n;
//     var ::r;
//     var ::t;
//     constraint (::f == (66 + 7.77e1));
//     constraint (::g == (88 - 9.99e1));
//     constraint (::h == (1.01e1 * 11));
//     constraint (::i == (12 / 1.313e1));
//     constraint (::j == (1.414e1 % 15));
//     constraint (::n == (18 >= 1.919e1));
//     constraint (::r == (2.525e1 || false));
//     constraint (::t == ({2.828e1, 29} != {30, 31}));
// }
// >>>

// typecheck_failure <<<
// binary operator type error
// @120..124: operator `+` argument has unexpected type `real`
// @115..117: expecting type `int`
// binary operator type error
// @143..147: operator `-` argument has unexpected type `real`
// @138..140: expecting type `int`
// binary operator type error
// @169..171: operator `*` argument has unexpected type `int`
// @161..166: expecting type `real`
// binary operator type error
// @190..195: operator `/` argument has unexpected type `real`
// @185..187: expecting type `int`
// binary operator type error
// @217..219: operator `%` argument has unexpected type `int`
// @209..214: expecting type `real`
// binary operator type error
// @240..245: operator `>=` argument has unexpected type `real`
// @234..236: expecting type `int`
// binary operator type error
// @260..265: operator `||` argument has unexpected type `real`
// @260..274: expecting type `bool`
// binary operator type error
// @353..361: operator `!=` argument has unexpected type `{int, int}`
// @338..349: expecting type `{real, int}`
// >>>
