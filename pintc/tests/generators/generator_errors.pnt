predicate test(
    j: int,
    k: int,
    b: int,
    c: int,
) {
    // Duplicate indices
    constraint forall i in 1..2, i in 3..4 { true };
    constraint exists p in 5..6, p in 7..8 { true };

    // Invalid bounds
    constraint forall i in j..k { true };
    constraint exists a in b..c { true };

    // Symbol not found
    constraint forall i in 0..5 where j != 3 { true };
    constraint exists i in 0..6 where j != 4 { true };
}

// parsed <<<
// predicate ::test(
//     ::j: int,
//     ::k: int,
//     ::b: int,
//     ::c: int,
// ) {
//     constraint forall i in 1..2, i in 3..4, { true };
//     constraint exists p in 5..6, p in 7..8, { true };
//     constraint forall i in ::j..::k, { true };
//     constraint exists a in ::b..::c, { true };
//     constraint forall i in 0..5, where (::j != 3) { true };
//     constraint exists i in 0..6, where (::j != 4) { true };
// }
// >>>

// flattening_failure <<<
// `forall` index `i` has already been declared
// @115..116: previous declaration of the index `i` here
// @126..127: `i` redeclared here
// `forall` index `i` must be declared only once in this scope
// `exists` index `p` has already been declared
// @168..169: previous declaration of the index `p` here
// @179..180: `p` redeclared here
// `exists` index `p` must be declared only once in this scope
// invalid bound for `forall` index `i`
// @249..250: invalid bound for `forall` index `i`
// `forall` index bound must be an integer literal
// invalid bound for `exists` index `a`
// @291..292: invalid bound for `exists` index `a`
// `exists` index bound must be an integer literal
// cannot find value `::j` in this scope
// @369..370: not found in this scope
// cannot find value `::j` in this scope
// @424..425: not found in this scope
// >>>
