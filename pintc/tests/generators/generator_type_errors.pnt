predicate test() {
    // Range errors.
    constraint forall i in false..true { false };
    constraint exists i in false..true { false };
    constraint forall i in 0x0000000000000000000000000000000000000000000000000000000000000000..0x0000000000000000000000000000000000000000000000000000000000000002 { false };
    constraint exists i in 0x0000000000000000000000000000000000000000000000000000000000000000..0x0000000000000000000000000000000000000000000000000000000000000002 { false };

    // Constraint errors.
    constraint forall i in 0..3 where i { true };
    constraint exists i in 0..3 where i { true };

    // Body errors.

    constraint forall i in 0..3 { i + i };
    constraint exists i in 0..3 { i + i };
}

// parsed <<<
// predicate ::test(
// ) {
//     constraint forall i in false..true, { false };
//     constraint exists i in false..true, { false };
//     constraint forall i in 0x0000000000000000000000000000000000000000000000000000000000000000..0x0000000000000000000000000000000000000000000000000000000000000002, { false };
//     constraint exists i in 0x0000000000000000000000000000000000000000000000000000000000000000..0x0000000000000000000000000000000000000000000000000000000000000002, { false };
//     constraint forall i in 0..3, where ::i { true };
//     constraint exists i in 0..3, where ::i { true };
//     constraint forall i in 0..3, { (::i + ::i) };
//     constraint exists i in 0..3, { (::i + ::i) };
// }
// >>>

// typecheck_failure <<<
// range type must be numeric
// @67..78: ranges must have numeric bounds; found `bool`
// range type must be numeric
// @117..128: ranges must have numeric bounds; found `bool`
// range type must be numeric
// @167..301: ranges must have numeric bounds; found `b256`
// range type must be numeric
// @340..474: ranges must have numeric bounds; found `b256`
// condition for `forall` must be a `bool`
// @551..552: invalid type `int`, expecting `bool`
// condition for `exists` must be a `bool`
// @601..602: invalid type `int`, expecting `bool`
// body for `forall` must be a `bool` expression
// @669..674: invalid type `int`, expecting `bool`
// body for `exists` must be a `bool` expression
// @712..717: invalid type `int`, expecting `bool`
// >>>
