storage {
    v0: int[],
    v1: bool[],
    v2: b256[],
}

interface Bar {
    storage {
        u0: int[],
        u1: bool[],
        u2: b256[],
    }
}

predicate Foo() {
    state addr = 0x0000000000000000000000000000000000000000000000000000000000000000;
    state v0_0 = storage::v0[0];
    state v0_1 = storage::v0[1];
    state v1_1 = storage::v1[1];
    state v2_2 = storage::v2[2];

    constraint v0_0 == 0;
    constraint v0_1 == 0;
    constraint v0_0' == 1;
    constraint v0_1' == 1;

    state u0_0 = Bar[[addr]]::storage::u0[0];
    state u0_1 = Bar[[addr]]::storage::u0[1];
    state u1_1 = Bar[[addr]]::storage::u1[1];
    state u2_2 = Bar[[addr]]::storage::u2[2];

    constraint u0_0 == 0;
    constraint u0_1 == 0;
    constraint u0_0' == 1;
    constraint u0_1' == 1;

    constraint u1_1 == (1 == 1);
    constraint u2_2 == 0x0000000000000000000000000000000000000000000000000000000000000000;
    constraint v1_1 == (1 == 1);
    constraint v2_2 == 0x0000000000000000000000000000000000000000000000000000000000000000;
}

// parsed <<<
// storage {
//     v0: int[],
//     v1: bool[],
//     v2: b256[],
// }
// interface ::Bar {
//     storage {
//         u0: int[],
//         u1: bool[],
//         u2: b256[],
//     }
// }
// 
// predicate ::Foo(
// ) {
//     state ::addr = 0x0000000000000000000000000000000000000000000000000000000000000000;
//     state ::v0_0 = storage::v0[0];
//     state ::v0_1 = storage::v0[1];
//     state ::v1_1 = storage::v1[1];
//     state ::v2_2 = storage::v2[2];
//     state ::u0_0 = ::Bar[[::addr]]::storage::u0[0];
//     state ::u0_1 = ::Bar[[::addr]]::storage::u0[1];
//     state ::u1_1 = ::Bar[[::addr]]::storage::u1[1];
//     state ::u2_2 = ::Bar[[::addr]]::storage::u2[2];
//     constraint (::v0_0 == 0);
//     constraint (::v0_1 == 0);
//     constraint (::v0_0' == 1);
//     constraint (::v0_1' == 1);
//     constraint (::u0_0 == 0);
//     constraint (::u0_1 == 0);
//     constraint (::u0_0' == 1);
//     constraint (::u0_1' == 1);
//     constraint (::u1_1 == (1 == 1));
//     constraint (::u2_2 == 0x0000000000000000000000000000000000000000000000000000000000000000);
//     constraint (::v1_1 == (1 == 1));
//     constraint (::v2_2 == 0x0000000000000000000000000000000000000000000000000000000000000000);
// }
// >>>

// flattened <<<
// storage {
//     v0: int[],
//     v1: bool[],
//     v2: b256[],
// }
// interface ::Bar {
//     storage {
//         u0: int[],
//         u1: bool[],
//         u2: b256[],
//     }
// }
// 
// predicate ::Foo(
// ) {
//     state ::addr: b256 = 0x0000000000000000000000000000000000000000000000000000000000000000;
//     state ::v0_0: int = __storage_get({0, 0});
//     state ::v0_1: int = __storage_get({0, 1});
//     state ::v1_1: bool = __storage_get({1, 1});
//     state ::v2_2: b256 = __storage_get({2, 2});
//     state ::u0_0: int = __storage_get_extern(::addr, {0, 0});
//     state ::u0_1: int = __storage_get_extern(::addr, {0, 1});
//     state ::u1_1: bool = __storage_get_extern(::addr, {1, 1});
//     state ::u2_2: b256 = __storage_get_extern(::addr, {2, 2});
//     state __v0_len: int = __storage_get({0});
//     state __v1_len: int = __storage_get({1});
//     state __v2_len: int = __storage_get({2});
//     constraint (::v0_0 == 0);
//     constraint (::v0_1 == 0);
//     constraint (::v0_0' == 1);
//     constraint (::v0_1' == 1);
//     constraint (::u0_0 == 0);
//     constraint (::u0_1 == 0);
//     constraint (::u0_0' == 1);
//     constraint (::u0_1' == 1);
//     constraint (::u1_1 == (1 == 1));
//     constraint (::u2_2 == 0x0000000000000000000000000000000000000000000000000000000000000000);
//     constraint (::v1_1 == (1 == 1));
//     constraint (::v2_2 == 0x0000000000000000000000000000000000000000000000000000000000000000);
//     constraint (0 < __v0_len);
//     constraint (1 < __v1_len);
//     constraint (2 < __v2_len);
//     constraint (1 < __v0_len);
//     constraint (1 < __v0_len');
//     constraint (0 < __v0_len');
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
