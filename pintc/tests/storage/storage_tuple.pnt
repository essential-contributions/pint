storage {
    u: { b256, int },
    t: { b256, { int, int } },
    w: { addr: b256, inner: { x: int, int } },
    map_to_tuples: ( int => { b256, { int, int } } ),
}

interface Foo {
    storage {
        u: { b256, int },
        t: { b256, { int, int } },
        w: { addr: b256, inner: { x: int, int } },
        map_to_tuples: ( int => { b256, { int, int } } ),
    }
}

predicate Bar {
    interface FooInstance = Foo(0x1111111111111111111111111111111111111111111111111111111111111111);

    state u = storage::u;
    state u0 = storage::u.0;
    state u1 = storage::u.1;

    state t = storage::t;
    state t0 = storage::t .0;
    state t10 = storage::t.1.0;
    state t11 = storage::t.1.1;

    state w = storage::w;
    state w0 = storage::w .addr;
    state w10 = storage::w.inner.x;
    state w11 = storage::w.inner.1;

    state map_to_tuples_69 = storage::map_to_tuples[69];
    state map_to_tuples_69_0 = storage::map_to_tuples[69].0;
    state map_to_tuples_69_1_0 = storage::map_to_tuples[69].1.0;
    state map_to_tuples_69_1_1 = storage::map_to_tuples[69].1.1;

    state foo_u = FooInstance::storage::u;
    state foo_u0 = FooInstance::storage::u.0;
    state foo_u1 = FooInstance::storage::u.1;

    state foo_t = FooInstance::storage::t;
    state foo_t0 = FooInstance::storage::t .0;
    state foo_t10 = FooInstance::storage::t.1.0;
    state foo_t11 = FooInstance::storage::t.1.1;

    state foo_w = FooInstance::storage::w;
    state foo_w0 = FooInstance::storage::w .addr;
    state foo_w10 = FooInstance::storage::w.inner.x;
    state foo_w11 = FooInstance::storage::w.inner.1;

    state foo_map_to_tuples_69 = FooInstance::storage::map_to_tuples[69];
    state foo_map_to_tuples_69_0 = FooInstance::storage::map_to_tuples[69].0;
    state foo_map_to_tuples_69_1_0 = FooInstance::storage::map_to_tuples[69].1.0;
    state foo_map_to_tuples_69_1_1 = FooInstance::storage::map_to_tuples[69].1.1;

    constraint u == u;
    constraint u0 == u0;
    constraint u1 == u1;
    constraint t == t;
    constraint t0 == t0;
    constraint t10 == t10;
    constraint t11 == t11;
    constraint w == w;
    constraint w0 == w0;
    constraint w10 == w10;
    constraint w11 == w11;
    constraint map_to_tuples_69 == map_to_tuples_69;
    constraint map_to_tuples_69_0 == map_to_tuples_69_0;
    constraint map_to_tuples_69_1_0 == map_to_tuples_69_1_0;
    constraint map_to_tuples_69_1_1 == map_to_tuples_69_1_1;
    constraint foo_u == foo_u;
    constraint foo_u0 == foo_u0;
    constraint foo_u1 == foo_u1;
    constraint foo_t == foo_t;
    constraint foo_t0 == foo_t0;
    constraint foo_t10 == foo_t10;
    constraint foo_t11 == foo_t11;
    constraint foo_w == foo_w;
    constraint foo_w0 == foo_w0;
    constraint foo_w10 == foo_w10;
    constraint foo_w11 == foo_w11;
    constraint foo_map_to_tuples_69 == foo_map_to_tuples_69;
    constraint foo_map_to_tuples_69_0 == foo_map_to_tuples_69_0;
    constraint foo_map_to_tuples_69_1_0 == foo_map_to_tuples_69_1_0;
    constraint foo_map_to_tuples_69_1_1 == foo_map_to_tuples_69_1_1;
}

// parsed <<<
// storage {
//     u: {b256, int},
//     t: {b256, {int, int}},
//     w: {addr: b256, inner: {x: int, int}},
//     map_to_tuples: ( int => {b256, {int, int}} ),
// }
// interface ::Foo {
//     storage {
//         u: {b256, int},
//         t: {b256, {int, int}},
//         w: {addr: b256, inner: {x: int, int}},
//         map_to_tuples: ( int => {b256, {int, int}} ),
//     }
// }
//
// predicate ::Bar {
//     interface ::FooInstance = ::Foo(0x1111111111111111111111111111111111111111111111111111111111111111)
//     state ::u = storage::u;
//     state ::u0 = storage::u.0;
//     state ::u1 = storage::u.1;
//     state ::t = storage::t;
//     state ::t0 = storage::t.0;
//     state ::t10 = storage::t.1.0;
//     state ::t11 = storage::t.1.1;
//     state ::w = storage::w;
//     state ::w0 = storage::w.addr;
//     state ::w10 = storage::w.inner.x;
//     state ::w11 = storage::w.inner.1;
//     state ::map_to_tuples_69 = storage::map_to_tuples[69];
//     state ::map_to_tuples_69_0 = storage::map_to_tuples[69].0;
//     state ::map_to_tuples_69_1_0 = storage::map_to_tuples[69].1.0;
//     state ::map_to_tuples_69_1_1 = storage::map_to_tuples[69].1.1;
//     state ::foo_u = ::FooInstance::storage::u;
//     state ::foo_u0 = ::FooInstance::storage::u.0;
//     state ::foo_u1 = ::FooInstance::storage::u.1;
//     state ::foo_t = ::FooInstance::storage::t;
//     state ::foo_t0 = ::FooInstance::storage::t.0;
//     state ::foo_t10 = ::FooInstance::storage::t.1.0;
//     state ::foo_t11 = ::FooInstance::storage::t.1.1;
//     state ::foo_w = ::FooInstance::storage::w;
//     state ::foo_w0 = ::FooInstance::storage::w.addr;
//     state ::foo_w10 = ::FooInstance::storage::w.inner.x;
//     state ::foo_w11 = ::FooInstance::storage::w.inner.1;
//     state ::foo_map_to_tuples_69 = ::FooInstance::storage::map_to_tuples[69];
//     state ::foo_map_to_tuples_69_0 = ::FooInstance::storage::map_to_tuples[69].0;
//     state ::foo_map_to_tuples_69_1_0 = ::FooInstance::storage::map_to_tuples[69].1.0;
//     state ::foo_map_to_tuples_69_1_1 = ::FooInstance::storage::map_to_tuples[69].1.1;
//     constraint (::u == ::u);
//     constraint (::u0 == ::u0);
//     constraint (::u1 == ::u1);
//     constraint (::t == ::t);
//     constraint (::t0 == ::t0);
//     constraint (::t10 == ::t10);
//     constraint (::t11 == ::t11);
//     constraint (::w == ::w);
//     constraint (::w0 == ::w0);
//     constraint (::w10 == ::w10);
//     constraint (::w11 == ::w11);
//     constraint (::map_to_tuples_69 == ::map_to_tuples_69);
//     constraint (::map_to_tuples_69_0 == ::map_to_tuples_69_0);
//     constraint (::map_to_tuples_69_1_0 == ::map_to_tuples_69_1_0);
//     constraint (::map_to_tuples_69_1_1 == ::map_to_tuples_69_1_1);
//     constraint (::foo_u == ::foo_u);
//     constraint (::foo_u0 == ::foo_u0);
//     constraint (::foo_u1 == ::foo_u1);
//     constraint (::foo_t == ::foo_t);
//     constraint (::foo_t0 == ::foo_t0);
//     constraint (::foo_t10 == ::foo_t10);
//     constraint (::foo_t11 == ::foo_t11);
//     constraint (::foo_w == ::foo_w);
//     constraint (::foo_w0 == ::foo_w0);
//     constraint (::foo_w10 == ::foo_w10);
//     constraint (::foo_w11 == ::foo_w11);
//     constraint (::foo_map_to_tuples_69 == ::foo_map_to_tuples_69);
//     constraint (::foo_map_to_tuples_69_0 == ::foo_map_to_tuples_69_0);
//     constraint (::foo_map_to_tuples_69_1_0 == ::foo_map_to_tuples_69_1_0);
//     constraint (::foo_map_to_tuples_69_1_1 == ::foo_map_to_tuples_69_1_1);
// }
// >>>

// flattened <<<
// storage {
//     u: {b256, int},
//     t: {b256, {int, int}},
//     w: {addr: b256, inner: {x: int, int}},
//     map_to_tuples: ( int => {b256, {int, int}} ),
// }
// interface ::Foo {
//     storage {
//         u: {b256, int},
//         t: {b256, {int, int}},
//         w: {addr: b256, inner: {x: int, int}},
//         map_to_tuples: ( int => {b256, {int, int}} ),
//     }
// }
//
// predicate ::Bar {
//     interface ::FooInstance = ::Foo(0x1111111111111111111111111111111111111111111111111111111111111111)
//     state ::u: {b256, int} = __storage_get({0, 0});
//     state ::u0: b256 = __storage_get({0, (0 + 0)});
//     state ::u1: int = __storage_get({0, (0 + 1)});
//     state ::t: {b256, {int, int}} = __storage_get({1, 0});
//     state ::t0: b256 = __storage_get({1, (0 + 0)});
//     state ::t10: int = __storage_get({1, ((0 + 1) + 0)});
//     state ::t11: int = __storage_get({1, ((0 + 1) + 1)});
//     state ::w: {addr: b256, inner: {x: int, int}} = __storage_get({2, 0});
//     state ::w0: b256 = __storage_get({2, (0 + 0)});
//     state ::w10: int = __storage_get({2, ((0 + 1) + 0)});
//     state ::w11: int = __storage_get({2, ((0 + 1) + 1)});
//     state ::map_to_tuples_69: {b256, {int, int}} = __storage_get({3, 69, 0});
//     state ::map_to_tuples_69_0: b256 = __storage_get({3, 69, (0 + 0)});
//     state ::map_to_tuples_69_1_0: int = __storage_get({3, 69, ((0 + 1) + 0)});
//     state ::map_to_tuples_69_1_1: int = __storage_get({3, 69, ((0 + 1) + 1)});
//     state ::foo_u: {b256, int} = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {0, 0});
//     state ::foo_u0: b256 = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {0, (0 + 0)});
//     state ::foo_u1: int = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {0, (0 + 1)});
//     state ::foo_t: {b256, {int, int}} = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {1, 0});
//     state ::foo_t0: b256 = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {1, (0 + 0)});
//     state ::foo_t10: int = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {1, ((0 + 1) + 0)});
//     state ::foo_t11: int = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {1, ((0 + 1) + 1)});
//     state ::foo_w: {addr: b256, inner: {x: int, int}} = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {2, 0});
//     state ::foo_w0: b256 = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {2, (0 + 0)});
//     state ::foo_w10: int = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {2, ((0 + 1) + 0)});
//     state ::foo_w11: int = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {2, ((0 + 1) + 1)});
//     state ::foo_map_to_tuples_69: {b256, {int, int}} = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {3, 69, 0});
//     state ::foo_map_to_tuples_69_0: b256 = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {3, 69, (0 + 0)});
//     state ::foo_map_to_tuples_69_1_0: int = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {3, 69, ((0 + 1) + 0)});
//     state ::foo_map_to_tuples_69_1_1: int = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {3, 69, ((0 + 1) + 1)});
//     constraint (::u == ::u);
//     constraint (::u0 == ::u0);
//     constraint (::u1 == ::u1);
//     constraint (::t == ::t);
//     constraint (::t0 == ::t0);
//     constraint (::t10 == ::t10);
//     constraint (::t11 == ::t11);
//     constraint (::w == ::w);
//     constraint (::w0 == ::w0);
//     constraint (::w10 == ::w10);
//     constraint (::w11 == ::w11);
//     constraint (::map_to_tuples_69 == ::map_to_tuples_69);
//     constraint (::map_to_tuples_69_0 == ::map_to_tuples_69_0);
//     constraint (::map_to_tuples_69_1_0 == ::map_to_tuples_69_1_0);
//     constraint (::map_to_tuples_69_1_1 == ::map_to_tuples_69_1_1);
//     constraint (::foo_u == ::foo_u);
//     constraint (::foo_u0 == ::foo_u0);
//     constraint (::foo_u1 == ::foo_u1);
//     constraint (::foo_t == ::foo_t);
//     constraint (::foo_t0 == ::foo_t0);
//     constraint (::foo_t10 == ::foo_t10);
//     constraint (::foo_t11 == ::foo_t11);
//     constraint (::foo_w == ::foo_w);
//     constraint (::foo_w0 == ::foo_w0);
//     constraint (::foo_w10 == ::foo_w10);
//     constraint (::foo_w11 == ::foo_w11);
//     constraint (::foo_map_to_tuples_69 == ::foo_map_to_tuples_69);
//     constraint (::foo_map_to_tuples_69_0 == ::foo_map_to_tuples_69_0);
//     constraint (::foo_map_to_tuples_69_1_0 == ::foo_map_to_tuples_69_1_0);
//     constraint (::foo_map_to_tuples_69_1_1 == ::foo_map_to_tuples_69_1_1);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
