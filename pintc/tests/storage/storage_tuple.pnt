storage {
    u: { b256, int },
    t: { b256, { int, int } },
    w: { addr: b256, inner: { x: int, int } },
    map_to_tuples: ( int => { b256, { int, int } } ),
}

interface Foo {
    storage {
        u: { b256, int },
        t: { b256, { int, int } },
        w: { addr: b256, inner: { x: int, int } },
        map_to_tuples: ( int => { b256, { int, int } } ),
    }
}

predicate Bar {
    interface FooInstance = Foo(0x1111111111111111111111111111111111111111111111111111111111111111);

    state u = storage::u;
    state u0 = storage::u.0;
    state u1 = storage::u.1;

    state t = storage::t;
    state t0 = storage::t .0;
    state t10 = storage::t.1.0;
    state t11 = storage::t.1.1;

    state w = storage::w;
    state w0 = storage::w .addr;
    state w10 = storage::w.inner.x;
    state w11 = storage::w.inner.1;

    state map_to_tuples_69 = storage::map_to_tuples[69];
    state map_to_tuples_69_0 = storage::map_to_tuples[69].0;
    state map_to_tuples_69_1_0 = storage::map_to_tuples[69].1.0;
    state map_to_tuples_69_1_1 = storage::map_to_tuples[69].1.1;

    state foo_u = FooInstance::storage::u;
    state foo_u0 = FooInstance::storage::u.0;
    state foo_u1 = FooInstance::storage::u.1;

    state foo_t = FooInstance::storage::t;
    state foo_t0 = FooInstance::storage::t .0;
    state foo_t10 = FooInstance::storage::t.1.0;
    state foo_t11 = FooInstance::storage::t.1.1;

    state foo_w = FooInstance::storage::w;
    state foo_w0 = FooInstance::storage::w .addr;
    state foo_w10 = FooInstance::storage::w.inner.x;
    state foo_w11 = FooInstance::storage::w.inner.1;

    state foo_map_to_tuples_69 = FooInstance::storage::map_to_tuples[69];
    state foo_map_to_tuples_69_0 = FooInstance::storage::map_to_tuples[69].0;
    state foo_map_to_tuples_69_1_0 = FooInstance::storage::map_to_tuples[69].1.0;
    state foo_map_to_tuples_69_1_1 = FooInstance::storage::map_to_tuples[69].1.1;
}

// parsed <<<
// storage {
//     u: {b256, int},
//     t: {b256, {int, int}},
//     w: {addr: b256, inner: {x: int, int}},
//     map_to_tuples: ( int => {b256, {int, int}} ),
// }
// interface ::Foo {
//     storage {
//         u: {b256, int},
//         t: {b256, {int, int}},
//         w: {addr: b256, inner: {x: int, int}},
//         map_to_tuples: ( int => {b256, {int, int}} ),
//     }
// }
// 
// predicate ::Bar {
//     storage {
//         u: {b256, int},
//         t: {b256, {int, int}},
//         w: {addr: b256, inner: {x: int, int}},
//         map_to_tuples: ( int => {b256, {int, int}} ),
//     }
//     interface ::Foo {
//         storage {
//             u: {b256, int},
//             t: {b256, {int, int}},
//             w: {addr: b256, inner: {x: int, int}},
//             map_to_tuples: ( int => {b256, {int, int}} ),
//         }
//     }
//     interface ::FooInstance = ::Foo(0x1111111111111111111111111111111111111111111111111111111111111111)
//     state ::u = storage::u;
//     state ::u0 = storage::u.0;
//     state ::u1 = storage::u.1;
//     state ::t = storage::t;
//     state ::t0 = storage::t.0;
//     state ::t10 = storage::t.1.0;
//     state ::t11 = storage::t.1.1;
//     state ::w = storage::w;
//     state ::w0 = storage::w.addr;
//     state ::w10 = storage::w.inner.x;
//     state ::w11 = storage::w.inner.1;
//     state ::map_to_tuples_69 = storage::map_to_tuples[69];
//     state ::map_to_tuples_69_0 = storage::map_to_tuples[69].0;
//     state ::map_to_tuples_69_1_0 = storage::map_to_tuples[69].1.0;
//     state ::map_to_tuples_69_1_1 = storage::map_to_tuples[69].1.1;
//     state ::foo_u = ::FooInstance::storage::u;
//     state ::foo_u0 = ::FooInstance::storage::u.0;
//     state ::foo_u1 = ::FooInstance::storage::u.1;
//     state ::foo_t = ::FooInstance::storage::t;
//     state ::foo_t0 = ::FooInstance::storage::t.0;
//     state ::foo_t10 = ::FooInstance::storage::t.1.0;
//     state ::foo_t11 = ::FooInstance::storage::t.1.1;
//     state ::foo_w = ::FooInstance::storage::w;
//     state ::foo_w0 = ::FooInstance::storage::w.addr;
//     state ::foo_w10 = ::FooInstance::storage::w.inner.x;
//     state ::foo_w11 = ::FooInstance::storage::w.inner.1;
//     state ::foo_map_to_tuples_69 = ::FooInstance::storage::map_to_tuples[69];
//     state ::foo_map_to_tuples_69_0 = ::FooInstance::storage::map_to_tuples[69].0;
//     state ::foo_map_to_tuples_69_1_0 = ::FooInstance::storage::map_to_tuples[69].1.0;
//     state ::foo_map_to_tuples_69_1_1 = ::FooInstance::storage::map_to_tuples[69].1.1;
// }
// >>>

// flattened <<<
// storage {
//     u: {b256, int},
//     t: {b256, {int, int}},
//     w: {addr: b256, inner: {x: int, int}},
//     map_to_tuples: ( int => {b256, {int, int}} ),
// }
// interface ::Foo {
//     storage {
//         u: {b256, int},
//         t: {b256, {int, int}},
//         w: {addr: b256, inner: {x: int, int}},
//         map_to_tuples: ( int => {b256, {int, int}} ),
//     }
// }
// 
// predicate ::Bar {
//     storage {
//         u: {b256, int},
//         t: {b256, {int, int}},
//         w: {addr: b256, inner: {x: int, int}},
//         map_to_tuples: ( int => {b256, {int, int}} ),
//     }
//     interface ::Foo {
//         storage {
//             u: {b256, int},
//             t: {b256, {int, int}},
//             w: {addr: b256, inner: {x: int, int}},
//             map_to_tuples: ( int => {b256, {int, int}} ),
//         }
//     }
//     interface ::FooInstance = ::Foo(0x1111111111111111111111111111111111111111111111111111111111111111)
//     state ::u: {b256, int} = storage::u;
//     state ::u0: b256 = storage::u.0;
//     state ::u1: int = storage::u.1;
//     state ::t: {b256, {int, int}} = storage::t;
//     state ::t0: b256 = storage::t.0;
//     state ::t10: int = storage::t.1.0;
//     state ::t11: int = storage::t.1.1;
//     state ::w: {addr: b256, inner: {x: int, int}} = storage::w;
//     state ::w0: b256 = storage::w.addr;
//     state ::w10: int = storage::w.inner.x;
//     state ::w11: int = storage::w.inner.1;
//     state ::map_to_tuples_69: {b256, {int, int}} = storage::map_to_tuples[69];
//     state ::map_to_tuples_69_0: b256 = storage::map_to_tuples[69].0;
//     state ::map_to_tuples_69_1_0: int = storage::map_to_tuples[69].1.0;
//     state ::map_to_tuples_69_1_1: int = storage::map_to_tuples[69].1.1;
//     state ::foo_u: {b256, int} = ::FooInstance::storage::u;
//     state ::foo_u0: b256 = ::FooInstance::storage::u.0;
//     state ::foo_u1: int = ::FooInstance::storage::u.1;
//     state ::foo_t: {b256, {int, int}} = ::FooInstance::storage::t;
//     state ::foo_t0: b256 = ::FooInstance::storage::t.0;
//     state ::foo_t10: int = ::FooInstance::storage::t.1.0;
//     state ::foo_t11: int = ::FooInstance::storage::t.1.1;
//     state ::foo_w: {addr: b256, inner: {x: int, int}} = ::FooInstance::storage::w;
//     state ::foo_w0: b256 = ::FooInstance::storage::w.addr;
//     state ::foo_w10: int = ::FooInstance::storage::w.inner.x;
//     state ::foo_w11: int = ::FooInstance::storage::w.inner.1;
//     state ::foo_map_to_tuples_69: {b256, {int, int}} = ::FooInstance::storage::map_to_tuples[69];
//     state ::foo_map_to_tuples_69_0: b256 = ::FooInstance::storage::map_to_tuples[69].0;
//     state ::foo_map_to_tuples_69_1_0: int = ::FooInstance::storage::map_to_tuples[69].1.0;
//     state ::foo_map_to_tuples_69_1_1: int = ::FooInstance::storage::map_to_tuples[69].1.1;
// }
// >>>
