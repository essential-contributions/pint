storage {
    t: {int, int},
    t1: {int, {int, int}},
    u: {bool, bool},
    u1: {bool, {bool, bool}},
    v: {b256, b256},
    v1: {b256, {b256, b256}},
    w: {int[2], int[2]},
    w1: {int[2], {int[2], int[2]}},
}

predicate foo() {
    let t = storage::t;
    constraint t'.0 == 0;
    constraint t'.1 == 0;
    constraint t.0' == 0;
    constraint t.1' == 0;

    let t1 = storage::t1;
    constraint t1'.0 == 0;
    constraint t1'.1 == { 0, 0 };
    constraint t1'.1.0 == 0;
    constraint t1'.1.1 == 0;
    constraint t1.0' == 0;
    constraint t1.1' == { 0, 0 };
    constraint t1.1.1' == 0;
    constraint t1.1.0' == 0;

    let u = storage::u;
    constraint u'.0 == false;
    constraint u'.1 == false;
    constraint u.0' == false;
    constraint u.1' == false;

    let u1 = storage::u1;
    constraint u1'.0 == true;
    constraint u1'.1 == { true, true };
    constraint u1'.1.0 == true;
    constraint u1'.1.1 == true;
    constraint u1.0' == true;
    constraint u1.1' == { true, true };
    constraint u1.1.1' == true;
    constraint u1.1.0' == true;    
    
    let v = storage::v;
    constraint v'.0 == 0x0000000000000001000000000000000200000000000000030000000000000004;
    constraint v'.1 == 0x0000000000000001000000000000000200000000000000030000000000000004;
    constraint v.0' == 0x0000000000000001000000000000000200000000000000030000000000000004;
    constraint v.1' == 0x0000000000000001000000000000000200000000000000030000000000000004;

    let v1 = storage::v1;
    constraint v1'.0 == 0x0000000000000001000000000000000200000000000000030000000000000004;
    constraint v1'.1 == { 0x0000000000000001000000000000000200000000000000030000000000000004, 0x0000000000000001000000000000000200000000000000030000000000000004 };
    constraint v1'.1.0 == 0x0000000000000001000000000000000200000000000000030000000000000004;
    constraint v1'.1.1 == 0x0000000000000001000000000000000200000000000000030000000000000004;
    constraint v1.0' == 0x0000000000000001000000000000000200000000000000030000000000000004;
    constraint v1.1' == { 0x0000000000000001000000000000000200000000000000030000000000000004, 0x0000000000000001000000000000000200000000000000030000000000000004 };
    constraint v1.1.1' == 0x0000000000000001000000000000000200000000000000030000000000000004;
    constraint v1.1.0' == 0x0000000000000001000000000000000200000000000000030000000000000004;

    let w = storage::w;
    constraint w'.0 == [1, 1];
    constraint w'.1 == [1, 1];
    constraint w.0' == [1, 1];
    constraint w.1' == [1, 1];

    let w1 = storage::w1;
    constraint w1'.0 == [1, 1];
    constraint w1'.1 == { [1, 1], [1, 1] };
    constraint w1'.1.0 == [1, 1];
    constraint w1'.1.1 == [1, 1];
    constraint w1.0' == [1, 1];
    constraint w1.1' == { [1, 1], [1, 1] };
    constraint w1.1.1' == [1, 1];
    constraint w1.1.0' == [1, 1];
}

// parsed <<<
// storage {
//     t: {int, int},
//     t1: {int, {int, int}},
//     u: {bool, bool},
//     u1: {bool, {bool, bool}},
//     v: {b256, b256},
//     v1: {b256, {b256, b256}},
//     w: {int[2], int[2]},
//     w1: {int[2], {int[2], int[2]}},
// }
//
// predicate ::foo(
// ) {
//     let ::t = storage::t;
//     let ::t1 = storage::t1;
//     let ::u = storage::u;
//     let ::u1 = storage::u1;
//     let ::v = storage::v;
//     let ::v1 = storage::v1;
//     let ::w = storage::w;
//     let ::w1 = storage::w1;
//     constraint (::t'.0 == 0);
//     constraint (::t'.1 == 0);
//     constraint (::t.0' == 0);
//     constraint (::t.1' == 0);
//     constraint (::t1'.0 == 0);
//     constraint (::t1'.1 == {0, 0});
//     constraint (::t1'.1.0 == 0);
//     constraint (::t1'.1.1 == 0);
//     constraint (::t1.0' == 0);
//     constraint (::t1.1' == {0, 0});
//     constraint (::t1.1.1' == 0);
//     constraint (::t1.1.0' == 0);
//     constraint (::u'.0 == false);
//     constraint (::u'.1 == false);
//     constraint (::u.0' == false);
//     constraint (::u.1' == false);
//     constraint (::u1'.0 == true);
//     constraint (::u1'.1 == {true, true});
//     constraint (::u1'.1.0 == true);
//     constraint (::u1'.1.1 == true);
//     constraint (::u1.0' == true);
//     constraint (::u1.1' == {true, true});
//     constraint (::u1.1.1' == true);
//     constraint (::u1.1.0' == true);
//     constraint (::v'.0 == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v'.1 == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v.0' == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v.1' == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v1'.0 == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v1'.1 == {0x0000000000000001000000000000000200000000000000030000000000000004, 0x0000000000000001000000000000000200000000000000030000000000000004});
//     constraint (::v1'.1.0 == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v1'.1.1 == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v1.0' == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v1.1' == {0x0000000000000001000000000000000200000000000000030000000000000004, 0x0000000000000001000000000000000200000000000000030000000000000004});
//     constraint (::v1.1.1' == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v1.1.0' == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::w'.0 == [1, 1]);
//     constraint (::w'.1 == [1, 1]);
//     constraint (::w.0' == [1, 1]);
//     constraint (::w.1' == [1, 1]);
//     constraint (::w1'.0 == [1, 1]);
//     constraint (::w1'.1 == {[1, 1], [1, 1]});
//     constraint (::w1'.1.0 == [1, 1]);
//     constraint (::w1'.1.1 == [1, 1]);
//     constraint (::w1.0' == [1, 1]);
//     constraint (::w1.1' == {[1, 1], [1, 1]});
//     constraint (::w1.1.1' == [1, 1]);
//     constraint (::w1.1.0' == [1, 1]);
// }
// >>>

// flattened <<<
// storage {
//     t: {int, int},
//     t1: {int, {int, int}},
//     u: {bool, bool},
//     u1: {bool, {bool, bool}},
//     v: {b256, b256},
//     v1: {b256, {b256, b256}},
//     w: {int[2], int[2]},
//     w1: {int[2], {int[2], int[2]}},
// }
//
// predicate ::foo(
// ) {
//     let ::t: {int, int} = __storage_get({0, 0});
//     let ::t1: {int, {int, int}} = __storage_get({1, 0});
//     let ::u: {bool, bool} = __storage_get({2, 0});
//     let ::u1: {bool, {bool, bool}} = __storage_get({3, 0});
//     let ::v: {b256, b256} = __storage_get({4, 0});
//     let ::v1: {b256, {b256, b256}} = __storage_get({5, 0});
//     let ::w: {int[2], int[2]} = __storage_get({6, 0});
//     let ::w1: {int[2], {int[2], int[2]}} = __storage_get({7, 0});
//     constraint (::t'.0 == 0);
//     constraint (::t'.1 == 0);
//     constraint (::t'.0 == 0);
//     constraint (::t'.1 == 0);
//     constraint (::t1'.0 == 0);
//     constraint (::t1'.1 == {0, 0});
//     constraint (::t1'.1.0 == 0);
//     constraint (::t1'.1.1 == 0);
//     constraint (::t1'.0 == 0);
//     constraint (::t1'.1 == {0, 0});
//     constraint (::t1'.1.1 == 0);
//     constraint (::t1'.1.0 == 0);
//     constraint (::u'.0 == false);
//     constraint (::u'.1 == false);
//     constraint (::u'.0 == false);
//     constraint (::u'.1 == false);
//     constraint (::u1'.0 == true);
//     constraint (::u1'.1 == {true, true});
//     constraint (::u1'.1.0 == true);
//     constraint (::u1'.1.1 == true);
//     constraint (::u1'.0 == true);
//     constraint (::u1'.1 == {true, true});
//     constraint (::u1'.1.1 == true);
//     constraint (::u1'.1.0 == true);
//     constraint (::v'.0 == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v'.1 == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v'.0 == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v'.1 == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v1'.0 == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v1'.1 == {0x0000000000000001000000000000000200000000000000030000000000000004, 0x0000000000000001000000000000000200000000000000030000000000000004});
//     constraint (::v1'.1.0 == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v1'.1.1 == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v1'.0 == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v1'.1 == {0x0000000000000001000000000000000200000000000000030000000000000004, 0x0000000000000001000000000000000200000000000000030000000000000004});
//     constraint (::v1'.1.1 == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::v1'.1.0 == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (::w'.0 == [1, 1]);
//     constraint (::w'.1 == [1, 1]);
//     constraint (::w'.0 == [1, 1]);
//     constraint (::w'.1 == [1, 1]);
//     constraint (::w1'.0 == [1, 1]);
//     constraint (::w1'.1 == {[1, 1], [1, 1]});
//     constraint (::w1'.1.0 == [1, 1]);
//     constraint (::w1'.1.1 == [1, 1]);
//     constraint (::w1'.0 == [1, 1]);
//     constraint (::w1'.1 == {[1, 1], [1, 1]});
//     constraint (::w1'.1.1 == [1, 1]);
//     constraint (::w1'.1.0 == [1, 1]);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
