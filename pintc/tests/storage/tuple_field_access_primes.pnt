storage {
    t: {int, int},
    t1: {int, {int, int}},
    u: {bool, bool},
    u1: {bool, {bool, bool}},
    v: {b256, b256},
    v1: {b256, {b256, b256}},
    w: {int[2], int[2]},
    w1: {int[2], {int[2], int[2]}},
}

predicate foo() {
    constraint storage::t'.0! == 0;
    constraint storage::t'.1! == 0;
    constraint storage::t.0'! == 0;
    constraint storage::t.1'! == 0;

    constraint storage::t1'.0! == 0;
    constraint storage::t1'.1! == { 0, 0 };
    constraint storage::t1'.1.0! == 0;
    constraint storage::t1'.1.1! == 0;
    constraint storage::t1.0'! == 0;
    constraint storage::t1.1'! == { 0, 0 };
    constraint storage::t1.1.1'! == 0;
    constraint storage::t1.1.0'! == 0;

    constraint storage::u'.0! == false;
    constraint storage::u'.1! == false;
    constraint storage::u.0'! == false;
    constraint storage::u.1'! == false;

    constraint storage::u1'.0! == true;
    constraint storage::u1'.1! == { true, true };
    constraint storage::u1'.1.0! == true;
    constraint storage::u1'.1.1! == true;
    constraint storage::u1.0'! == true;
    constraint storage::u1.1'! == { true, true };
    constraint storage::u1.1.1'! == true;
    constraint storage::u1.1.0'! == true;    
    
    constraint storage::v'.0! == 0x0000000000000001000000000000000200000000000000030000000000000004;
    constraint storage::v'.1! == 0x0000000000000001000000000000000200000000000000030000000000000004;
    constraint storage::v.0'! == 0x0000000000000001000000000000000200000000000000030000000000000004;
    constraint storage::v.1'! == 0x0000000000000001000000000000000200000000000000030000000000000004;

    constraint storage::v1'.0! == 0x0000000000000001000000000000000200000000000000030000000000000004;
    constraint storage::v1'.1! == { 0x0000000000000001000000000000000200000000000000030000000000000004, 0x0000000000000001000000000000000200000000000000030000000000000004 };
    constraint storage::v1'.1.0! == 0x0000000000000001000000000000000200000000000000030000000000000004;
    constraint storage::v1'.1.1! == 0x0000000000000001000000000000000200000000000000030000000000000004;
    constraint storage::v1.0'! == 0x0000000000000001000000000000000200000000000000030000000000000004;
    constraint storage::v1.1'! == { 0x0000000000000001000000000000000200000000000000030000000000000004, 0x0000000000000001000000000000000200000000000000030000000000000004 };
    constraint storage::v1.1.1'! == 0x0000000000000001000000000000000200000000000000030000000000000004;
    constraint storage::v1.1.0'! == 0x0000000000000001000000000000000200000000000000030000000000000004;

    constraint storage::w'.0! == [1, 1];
    constraint storage::w'.1! == [1, 1];
    constraint storage::w.0'! == [1, 1];
    constraint storage::w.1'! == [1, 1];

    constraint storage::w1'.0! == [1, 1];
    constraint storage::w1'.1! == { [1, 1], [1, 1] };
    constraint storage::w1'.1.0! == [1, 1];
    constraint storage::w1'.1.1! == [1, 1];
    constraint storage::w1.0'! == [1, 1];
    constraint storage::w1.1'! == { [1, 1], [1, 1] };
    constraint storage::w1.1.1'! == [1, 1];
    constraint storage::w1.1.0'! == [1, 1];
}

// parsed <<<
// storage {
//     t: {int, int},
//     t1: {int, {int, int}},
//     u: {bool, bool},
//     u1: {bool, {bool, bool}},
//     v: {b256, b256},
//     v1: {b256, {b256, b256}},
//     w: {int[2], int[2]},
//     w1: {int[2], {int[2], int[2]}},
// }
//
// predicate ::foo(
// ) {
//     constraint (storage::t'.0! == 0);
//     constraint (storage::t'.1! == 0);
//     constraint (storage::t.0'! == 0);
//     constraint (storage::t.1'! == 0);
//     constraint (storage::t1'.0! == 0);
//     constraint (storage::t1'.1! == {0, 0});
//     constraint (storage::t1'.1.0! == 0);
//     constraint (storage::t1'.1.1! == 0);
//     constraint (storage::t1.0'! == 0);
//     constraint (storage::t1.1'! == {0, 0});
//     constraint (storage::t1.1.1'! == 0);
//     constraint (storage::t1.1.0'! == 0);
//     constraint (storage::u'.0! == false);
//     constraint (storage::u'.1! == false);
//     constraint (storage::u.0'! == false);
//     constraint (storage::u.1'! == false);
//     constraint (storage::u1'.0! == true);
//     constraint (storage::u1'.1! == {true, true});
//     constraint (storage::u1'.1.0! == true);
//     constraint (storage::u1'.1.1! == true);
//     constraint (storage::u1.0'! == true);
//     constraint (storage::u1.1'! == {true, true});
//     constraint (storage::u1.1.1'! == true);
//     constraint (storage::u1.1.0'! == true);
//     constraint (storage::v'.0! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (storage::v'.1! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (storage::v.0'! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (storage::v.1'! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (storage::v1'.0! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (storage::v1'.1! == {0x0000000000000001000000000000000200000000000000030000000000000004, 0x0000000000000001000000000000000200000000000000030000000000000004});
//     constraint (storage::v1'.1.0! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (storage::v1'.1.1! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (storage::v1.0'! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (storage::v1.1'! == {0x0000000000000001000000000000000200000000000000030000000000000004, 0x0000000000000001000000000000000200000000000000030000000000000004});
//     constraint (storage::v1.1.1'! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (storage::v1.1.0'! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (storage::w'.0! == [1, 1]);
//     constraint (storage::w'.1! == [1, 1]);
//     constraint (storage::w.0'! == [1, 1]);
//     constraint (storage::w.1'! == [1, 1]);
//     constraint (storage::w1'.0! == [1, 1]);
//     constraint (storage::w1'.1! == {[1, 1], [1, 1]});
//     constraint (storage::w1'.1.0! == [1, 1]);
//     constraint (storage::w1'.1.1! == [1, 1]);
//     constraint (storage::w1.0'! == [1, 1]);
//     constraint (storage::w1.1'! == {[1, 1], [1, 1]});
//     constraint (storage::w1.1.1'! == [1, 1]);
//     constraint (storage::w1.1.0'! == [1, 1]);
// }
// >>>

// flattened <<<
// storage {
//     t: {int, int},
//     t1: {int, {int, int}},
//     u: {bool, bool},
//     u1: {bool, {bool, bool}},
//     v: {b256, b256},
//     v1: {b256, {b256, b256}},
//     w: {int[2], int[2]},
//     w1: {int[2], {int[2], int[2]}},
// }
//
// predicate ::foo(
// ) {
//     constraint (__post_state({0, (0 + 0)})! == 0);
//     constraint (__post_state({0, (0 + 1)})! == 0);
//     constraint (__post_state({0, (0 + 0)})! == 0);
//     constraint (__post_state({0, (0 + 1)})! == 0);
//     constraint (__post_state({1, (0 + 0)})! == 0);
//     constraint (__post_state({1, (0 + 1)})! == {0, 0});
//     constraint (__post_state({1, ((0 + 1) + 0)})! == 0);
//     constraint (__post_state({1, ((0 + 1) + 1)})! == 0);
//     constraint (__post_state({1, (0 + 0)})! == 0);
//     constraint (__post_state({1, (0 + 1)})! == {0, 0});
//     constraint (__post_state({1, ((0 + 1) + 1)})! == 0);
//     constraint (__post_state({1, ((0 + 1) + 0)})! == 0);
//     constraint (__post_state({2, (0 + 0)})! == false);
//     constraint (__post_state({2, (0 + 1)})! == false);
//     constraint (__post_state({2, (0 + 0)})! == false);
//     constraint (__post_state({2, (0 + 1)})! == false);
//     constraint (__post_state({3, (0 + 0)})! == true);
//     constraint (__post_state({3, (0 + 1)})! == {true, true});
//     constraint (__post_state({3, ((0 + 1) + 0)})! == true);
//     constraint (__post_state({3, ((0 + 1) + 1)})! == true);
//     constraint (__post_state({3, (0 + 0)})! == true);
//     constraint (__post_state({3, (0 + 1)})! == {true, true});
//     constraint (__post_state({3, ((0 + 1) + 1)})! == true);
//     constraint (__post_state({3, ((0 + 1) + 0)})! == true);
//     constraint (__post_state({4, (0 + 0)})! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (__post_state({4, (0 + 1)})! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (__post_state({4, (0 + 0)})! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (__post_state({4, (0 + 1)})! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (__post_state({5, (0 + 0)})! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (__post_state({5, (0 + 1)})! == {0x0000000000000001000000000000000200000000000000030000000000000004, 0x0000000000000001000000000000000200000000000000030000000000000004});
//     constraint (__post_state({5, ((0 + 1) + 0)})! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (__post_state({5, ((0 + 1) + 1)})! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (__post_state({5, (0 + 0)})! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (__post_state({5, (0 + 1)})! == {0x0000000000000001000000000000000200000000000000030000000000000004, 0x0000000000000001000000000000000200000000000000030000000000000004});
//     constraint (__post_state({5, ((0 + 1) + 1)})! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (__post_state({5, ((0 + 1) + 0)})! == 0x0000000000000001000000000000000200000000000000030000000000000004);
//     constraint (__post_state({6, (0 + 0)})! == [1, 1]);
//     constraint (__post_state({6, (0 + 2)})! == [1, 1]);
//     constraint (__post_state({6, (0 + 0)})! == [1, 1]);
//     constraint (__post_state({6, (0 + 2)})! == [1, 1]);
//     constraint (__post_state({7, (0 + 0)})! == [1, 1]);
//     constraint (__post_state({7, (0 + 2)})! == {[1, 1], [1, 1]});
//     constraint (__post_state({7, ((0 + 2) + 0)})! == [1, 1]);
//     constraint (__post_state({7, ((0 + 2) + 2)})! == [1, 1]);
//     constraint (__post_state({7, (0 + 0)})! == [1, 1]);
//     constraint (__post_state({7, (0 + 2)})! == {[1, 1], [1, 1]});
//     constraint (__post_state({7, ((0 + 2) + 2)})! == [1, 1]);
//     constraint (__post_state({7, ((0 + 2) + 0)})! == [1, 1]);
// }
// >>>
