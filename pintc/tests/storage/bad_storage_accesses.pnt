storage {
    t: { int, int[3] },
    map: ( int => { int, int, b256 } ),
    a: ( b256 => int[storage::t.0] ),
    bb: b256,
}

interface Foo {
    storage {
        a: int[3][storage::t.0],
    }
    
    predicate Bar;
}

type MyType = { int, int[storage::t.0] };

union G = A(int) | B(int[storage::t.0]);

const C = storage::t.1;

predicate Test {
    var x = storage::map[3].2;

    var addr: b256;
    constraint storage::a[addr][storage::t.0] == 0;

    var y = storage::t;

    var b: bool;

    if b {
        constraint storage::t.0 == 0;
        constraint storage::t.1 == 0;
    } else {
        constraint storage::t.0 == 1;
        constraint storage::t.1 == 2;
    }

    var u: G;
    match u {
        G::A(a) => {
            constraint storage::t.0 == a;
        }
        G::B(b) => {}
    }

    interface FooI = Foo(storage::bb);
    predicate BarI = FooI::Bar(storage::bb);
}

// parsed <<<
// const ::C = storage::t.1;
// union ::G = A(int) | B(int[storage::t.0]);
// type ::MyType = {int, int[storage::t.0]};
// storage {
//     t: {int, int[3]},
//     map: ( int => {int, int, b256} ),
//     a: ( b256 => int[storage::t.0] ),
//     bb: b256,
// }
// interface ::Foo {
//     storage {
//         a: int[storage::t.0][3],
//     }
//     predicate Bar;
// }
// 
// predicate ::Test {
//     interface ::FooI = ::Foo(storage::bb)
//     predicate ::BarI = ::FooI::Bar(storage::bb)
//     var ::x;
//     var ::addr: b256;
//     var ::y;
//     var ::b: bool;
//     var ::u: ::G;
//     var __::BarI_pathway: int;
//     constraint (::x == storage::map[3].2);
//     constraint (storage::a[::addr][storage::t.0] == 0);
//     constraint (::y == storage::t);
//     if ::b {
//         constraint (storage::t.0 == 0)
//         constraint (storage::t.1 == 0)
//     } else {
//         constraint (storage::t.0 == 1)
//         constraint (storage::t.1 == 2)
//     }
//     match ::u {
//         ::G::A(a) => {
//             constraint (storage::t.0 == ::a)
//         }
//         ::G::B(b) => {
//         }
//     }
// }
// >>>

// typecheck_failure <<<
// invalid position for accessing storage
// @530..542: storage cannot be accessed in this position
// storage can only be accessed in the initializer of `state` declaration
// invalid position for accessing storage
// @838..849: storage cannot be accessed in this position
// storage can only be accessed in the initializer of `state` declaration
// invalid position for accessing storage
// @755..767: storage cannot be accessed in this position
// storage can only be accessed in the initializer of `state` declaration
// invalid position for accessing storage
// @250..262: storage cannot be accessed in this position
// storage can only be accessed in the initializer of `state` declaration
// invalid position for accessing storage
// @619..631: storage cannot be accessed in this position
// storage can only be accessed in the initializer of `state` declaration
// invalid position for accessing storage
// @364..381: storage cannot be accessed in this position
// storage can only be accessed in the initializer of `state` declaration
// invalid position for accessing storage
// @293..305: storage cannot be accessed in this position
// storage can only be accessed in the initializer of `state` declaration
// invalid position for accessing storage
// @568..580: storage cannot be accessed in this position
// storage can only be accessed in the initializer of `state` declaration
// invalid position for accessing storage
// @469..479: storage cannot be accessed in this position
// storage can only be accessed in the initializer of `state` declaration
// invalid position for accessing storage
// @419..449: storage cannot be accessed in this position
// storage can only be accessed in the initializer of `state` declaration
// invalid position for accessing storage
// @883..894: storage cannot be accessed in this position
// storage can only be accessed in the initializer of `state` declaration
// invalid position for accessing storage
// @320..332: storage cannot be accessed in this position
// storage can only be accessed in the initializer of `state` declaration
// invalid position for accessing storage
// @657..669: storage cannot be accessed in this position
// storage can only be accessed in the initializer of `state` declaration
// invalid position for accessing storage
// @177..189: storage cannot be accessed in this position
// storage can only be accessed in the initializer of `state` declaration
// invalid position for accessing storage
// @95..107: storage cannot be accessed in this position
// storage can only be accessed in the initializer of `state` declaration
// compiler internal error: unexpected expression during compile-time evaluation
// >>>
