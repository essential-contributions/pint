use lib::ERC20_2;
use ::lib::ERC20_1;

storage {
    x: int,
    y: bool,
    map: (int => (int => b256)),
}

interface ERC20_0 {
    storage {
        x: int,
        y: bool,
        map: (int => (int => b256)),
    }
}

predicate Foo {
    interface ERC20_0_instance =
        ERC20_0(0x0000000000000000000000000000000000000000000000000000000000000000);
    interface ERC20_1_instance =
        ERC20_1(0x1111111111111111111111111111111111111111111111111111111111111111);
    interface ERC20_2_instance =
        lib::ERC20_2(0x2222222222222222222222222222222222222222222222222222222222222222);

    state internal_x = storage::x;
    state internal_y = storage::y;
    state internal_map = storage::map[3][4];

    state external_x_0 = ::ERC20_0_instance::storage::x;
    state external_y_0 = ERC20_0_instance::storage::y;
    state external_map_0 = ERC20_0_instance::storage::map[3][4];

    state external_x_1 = ERC20_1_instance::storage::x;
    state external_y_1 = ERC20_1_instance::storage::y;
    state external_map_1 = ERC20_1_instance::storage::map[3][4];

    state external_x_2 = ERC20_2_instance::storage::x;
    state external_y_2 = ERC20_2_instance::storage::y;
    state external_map_2 = ERC20_2_instance::storage::map[3][4];

    constraint internal_x == internal_x;
    constraint internal_y == internal_y;
    constraint internal_map == internal_map;
    constraint external_x_0 == external_x_0;
    constraint external_y_0 == external_y_0;
    constraint external_map_0 == external_map_0;
    constraint external_x_1 == external_x_1;
    constraint external_y_1 == external_y_1;
    constraint external_map_1 == external_map_1;
    constraint external_x_2 == external_x_2;
    constraint external_y_2 == external_y_2;
    constraint external_map_2 == external_map_2;
}

predicate Bar {
    interface ERC20_0_instance =
        ERC20_0(0x0000000000000000000000000000000000000000000000000000000000000000);
    interface ERC20_1_instance =
        ::lib::ERC20_1(0x1111111111111111111111111111111111111111111111111111111111111111);
    interface ERC20_2_instance =
        ERC20_0(0x2222222222222222222222222222222222222222222222222222222222222222);

    state internal_x = storage::x;
    state internal_y = storage::y;
    state internal_map = storage::map[3][4];

    state external_x_0 = ::ERC20_0_instance::storage::x;
    state external_y_0 = ERC20_0_instance::storage::y;
    state external_map_0 = ERC20_0_instance::storage::map[3][4];

    state external_x_1 = ERC20_1_instance::storage::x;
    state external_y_1 = ERC20_1_instance::storage::y;
    state external_map_1 = ERC20_1_instance::storage::map[3][4];

    state external_x_2 = ERC20_2_instance::storage::x;
    state external_y_2 = ERC20_2_instance::storage::y;
    state external_map_2 = ERC20_2_instance::storage::map[3][4];

    constraint internal_x == internal_x;
    constraint internal_y == internal_y;
    constraint internal_map == internal_map;
    constraint external_x_0 == external_x_0;
    constraint external_y_0 == external_y_0;
    constraint external_map_0 == external_map_0;
    constraint external_x_1 == external_x_1;
    constraint external_y_1 == external_y_1;
    constraint external_map_1 == external_map_1;
    constraint external_x_2 == external_x_2;
    constraint external_y_2 == external_y_2;
    constraint external_map_2 == external_map_2;
}

// parsed <<<
// storage {
//     x: int,
//     y: bool,
//     map: ( int => ( int => b256 ) ),
// }
// interface ::ERC20_0 {
//     storage {
//         x: int,
//         y: bool,
//         map: ( int => ( int => b256 ) ),
//     }
// }
// interface ::lib::ERC20_1 {
//     storage {
//         x: int,
//         y: bool,
//         map: ( int => ( int => b256 ) ),
//     }
// }
// interface ::lib::ERC20_2 {
//     storage {
//         x: int,
//         y: bool,
//         map: ( int => ( int => b256 ) ),
//     }
// }
//
// predicate ::Foo {
//     interface ::ERC20_0_instance = ::ERC20_0(0x0000000000000000000000000000000000000000000000000000000000000000)
//     interface ::ERC20_1_instance = ::lib::ERC20_1(0x1111111111111111111111111111111111111111111111111111111111111111)
//     interface ::ERC20_2_instance = ::lib::ERC20_2(0x2222222222222222222222222222222222222222222222222222222222222222)
//     state ::internal_x = storage::x;
//     state ::internal_y = storage::y;
//     state ::internal_map = storage::map[3][4];
//     state ::external_x_0 = ::ERC20_0_instance::storage::x;
//     state ::external_y_0 = ::ERC20_0_instance::storage::y;
//     state ::external_map_0 = ::ERC20_0_instance::storage::map[3][4];
//     state ::external_x_1 = ::ERC20_1_instance::storage::x;
//     state ::external_y_1 = ::ERC20_1_instance::storage::y;
//     state ::external_map_1 = ::ERC20_1_instance::storage::map[3][4];
//     state ::external_x_2 = ::ERC20_2_instance::storage::x;
//     state ::external_y_2 = ::ERC20_2_instance::storage::y;
//     state ::external_map_2 = ::ERC20_2_instance::storage::map[3][4];
//     constraint (::internal_x == ::internal_x);
//     constraint (::internal_y == ::internal_y);
//     constraint (::internal_map == ::internal_map);
//     constraint (::external_x_0 == ::external_x_0);
//     constraint (::external_y_0 == ::external_y_0);
//     constraint (::external_map_0 == ::external_map_0);
//     constraint (::external_x_1 == ::external_x_1);
//     constraint (::external_y_1 == ::external_y_1);
//     constraint (::external_map_1 == ::external_map_1);
//     constraint (::external_x_2 == ::external_x_2);
//     constraint (::external_y_2 == ::external_y_2);
//     constraint (::external_map_2 == ::external_map_2);
// }
//
// predicate ::Bar {
//     interface ::ERC20_0_instance = ::ERC20_0(0x0000000000000000000000000000000000000000000000000000000000000000)
//     interface ::ERC20_1_instance = ::lib::ERC20_1(0x1111111111111111111111111111111111111111111111111111111111111111)
//     interface ::ERC20_2_instance = ::ERC20_0(0x2222222222222222222222222222222222222222222222222222222222222222)
//     state ::internal_x = storage::x;
//     state ::internal_y = storage::y;
//     state ::internal_map = storage::map[3][4];
//     state ::external_x_0 = ::ERC20_0_instance::storage::x;
//     state ::external_y_0 = ::ERC20_0_instance::storage::y;
//     state ::external_map_0 = ::ERC20_0_instance::storage::map[3][4];
//     state ::external_x_1 = ::ERC20_1_instance::storage::x;
//     state ::external_y_1 = ::ERC20_1_instance::storage::y;
//     state ::external_map_1 = ::ERC20_1_instance::storage::map[3][4];
//     state ::external_x_2 = ::ERC20_2_instance::storage::x;
//     state ::external_y_2 = ::ERC20_2_instance::storage::y;
//     state ::external_map_2 = ::ERC20_2_instance::storage::map[3][4];
//     constraint (::internal_x == ::internal_x);
//     constraint (::internal_y == ::internal_y);
//     constraint (::internal_map == ::internal_map);
//     constraint (::external_x_0 == ::external_x_0);
//     constraint (::external_y_0 == ::external_y_0);
//     constraint (::external_map_0 == ::external_map_0);
//     constraint (::external_x_1 == ::external_x_1);
//     constraint (::external_y_1 == ::external_y_1);
//     constraint (::external_map_1 == ::external_map_1);
//     constraint (::external_x_2 == ::external_x_2);
//     constraint (::external_y_2 == ::external_y_2);
//     constraint (::external_map_2 == ::external_map_2);
// }
// >>>

// flattened <<<
// storage {
//     x: int,
//     y: bool,
//     map: ( int => ( int => b256 ) ),
// }
// interface ::ERC20_0 {
//     storage {
//         x: int,
//         y: bool,
//         map: ( int => ( int => b256 ) ),
//     }
// }
// interface ::lib::ERC20_1 {
//     storage {
//         x: int,
//         y: bool,
//         map: ( int => ( int => b256 ) ),
//     }
// }
// interface ::lib::ERC20_2 {
//     storage {
//         x: int,
//         y: bool,
//         map: ( int => ( int => b256 ) ),
//     }
// }
//
// predicate ::Foo {
//     interface ::ERC20_0_instance = ::ERC20_0(0x0000000000000000000000000000000000000000000000000000000000000000)
//     interface ::ERC20_1_instance = ::lib::ERC20_1(0x1111111111111111111111111111111111111111111111111111111111111111)
//     interface ::ERC20_2_instance = ::lib::ERC20_2(0x2222222222222222222222222222222222222222222222222222222222222222)
//     state ::internal_x: int = __storage_get({0});
//     state ::internal_y: bool = __storage_get({1});
//     state ::internal_map: b256 = __storage_get({2, 3, 4});
//     state ::external_x_0: int = __storage_get_extern(0x0000000000000000000000000000000000000000000000000000000000000000, {0});
//     state ::external_y_0: bool = __storage_get_extern(0x0000000000000000000000000000000000000000000000000000000000000000, {1});
//     state ::external_map_0: b256 = __storage_get_extern(0x0000000000000000000000000000000000000000000000000000000000000000, {2, 3, 4});
//     state ::external_x_1: int = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {0});
//     state ::external_y_1: bool = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {1});
//     state ::external_map_1: b256 = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {2, 3, 4});
//     state ::external_x_2: int = __storage_get_extern(0x2222222222222222222222222222222222222222222222222222222222222222, {0});
//     state ::external_y_2: bool = __storage_get_extern(0x2222222222222222222222222222222222222222222222222222222222222222, {1});
//     state ::external_map_2: b256 = __storage_get_extern(0x2222222222222222222222222222222222222222222222222222222222222222, {2, 3, 4});
//     constraint (::internal_x == ::internal_x);
//     constraint (::internal_y == ::internal_y);
//     constraint (::internal_map == ::internal_map);
//     constraint (::external_x_0 == ::external_x_0);
//     constraint (::external_y_0 == ::external_y_0);
//     constraint (::external_map_0 == ::external_map_0);
//     constraint (::external_x_1 == ::external_x_1);
//     constraint (::external_y_1 == ::external_y_1);
//     constraint (::external_map_1 == ::external_map_1);
//     constraint (::external_x_2 == ::external_x_2);
//     constraint (::external_y_2 == ::external_y_2);
//     constraint (::external_map_2 == ::external_map_2);
//     constraint __eq_set(__mut_keys(), {0});
// }
//
// predicate ::Bar {
//     interface ::ERC20_0_instance = ::ERC20_0(0x0000000000000000000000000000000000000000000000000000000000000000)
//     interface ::ERC20_1_instance = ::lib::ERC20_1(0x1111111111111111111111111111111111111111111111111111111111111111)
//     interface ::ERC20_2_instance = ::ERC20_0(0x2222222222222222222222222222222222222222222222222222222222222222)
//     state ::internal_x: int = __storage_get({0});
//     state ::internal_y: bool = __storage_get({1});
//     state ::internal_map: b256 = __storage_get({2, 3, 4});
//     state ::external_x_0: int = __storage_get_extern(0x0000000000000000000000000000000000000000000000000000000000000000, {0});
//     state ::external_y_0: bool = __storage_get_extern(0x0000000000000000000000000000000000000000000000000000000000000000, {1});
//     state ::external_map_0: b256 = __storage_get_extern(0x0000000000000000000000000000000000000000000000000000000000000000, {2, 3, 4});
//     state ::external_x_1: int = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {0});
//     state ::external_y_1: bool = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {1});
//     state ::external_map_1: b256 = __storage_get_extern(0x1111111111111111111111111111111111111111111111111111111111111111, {2, 3, 4});
//     state ::external_x_2: int = __storage_get_extern(0x2222222222222222222222222222222222222222222222222222222222222222, {0});
//     state ::external_y_2: bool = __storage_get_extern(0x2222222222222222222222222222222222222222222222222222222222222222, {1});
//     state ::external_map_2: b256 = __storage_get_extern(0x2222222222222222222222222222222222222222222222222222222222222222, {2, 3, 4});
//     constraint (::internal_x == ::internal_x);
//     constraint (::internal_y == ::internal_y);
//     constraint (::internal_map == ::internal_map);
//     constraint (::external_x_0 == ::external_x_0);
//     constraint (::external_y_0 == ::external_y_0);
//     constraint (::external_map_0 == ::external_map_0);
//     constraint (::external_x_1 == ::external_x_1);
//     constraint (::external_y_1 == ::external_y_1);
//     constraint (::external_map_1 == ::external_map_1);
//     constraint (::external_x_2 == ::external_x_2);
//     constraint (::external_y_2 == ::external_y_2);
//     constraint (::external_map_2 == ::external_map_2);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
