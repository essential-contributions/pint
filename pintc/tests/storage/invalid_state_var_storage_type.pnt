type a = { ( bool => bool ), int };

storage {
    b: { ( int => int ), int },
    c: { a, int },
}

predicate test {
    state d = storage::b;
    state e = storage::c;
}

// parsed <<<
// type ::a = {( bool => bool ), int};
// storage {
//     b: {( int => int ), int},
//     c: {::a, int},
// }
//
// predicate ::test {
//     state ::d = storage::b;
//     state ::e = storage::c;
// }
// >>>

// typecheck_failure <<<
// state variables cannot have storage types
// @122..142: found state variable of storage type {( int => int ), int} here
// type of state variable depends on the storage type `( int => int )`
// state variables cannot have storage types
// @148..168: found state variable of storage type {::a ({( bool => bool ), int}), int} here
// type of state variable depends on the storage type `( bool => bool )`
// >>>
