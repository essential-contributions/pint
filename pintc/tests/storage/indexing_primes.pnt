storage {
    v: int,
    w: int[2],
    x: { int, int },
    y: { int[2], int[2] },
    z: { int, int }[2],
}

predicate test() {
    let a = storage::v!;
    constraint storage::v'! > a;
    constraint storage::v''! > a;
    constraint (storage::v'')'''! > a;

    let b = storage::w!;
    constraint storage::w[0]'! > a;
    constraint storage::w'[0]! > a;
    constraint storage::w'[0]'! > a;

    let c = storage::x!;
    constraint storage::x'.0! > a;
    constraint storage::x.0'! > a;
    constraint storage::x'.0'! > a;

    let d = storage::y!;
    constraint storage::y'.0[0]! > a;
    constraint storage::y.0'[0]! > a;
    constraint storage::y.0[0]'! > a;
    constraint storage::y'.0'[0]! > a;
    constraint storage::y.0'[0]'! > a;
    constraint storage::y'.0'[0]'! > a;

    let e = storage::z!;
    constraint storage::z'[0].0! > a;
    constraint storage::z[0]'.0! > a;
    constraint storage::z[0].0'! > a;
    constraint storage::z'[0]'.0! > a;
    constraint storage::z'[0].0'! > a;
    constraint storage::z[0]'.0'! > a;
    constraint storage::z'[0]'.0'! > a;
}

// parsed <<<
// storage {
//     v: int,
//     w: int[2],
//     x: {int, int},
//     y: {int[2], int[2]},
//     z: {int, int}[2],
// }
//
// predicate ::test(
// ) {
//     let ::a = storage::v!;
//     let ::b = storage::w!;
//     let ::c = storage::x!;
//     let ::d = storage::y!;
//     let ::e = storage::z!;
//     constraint (storage::v'! > ::a);
//     constraint (storage::v''! > ::a);
//     constraint (storage::v'''''! > ::a);
//     constraint (storage::w[0]'! > ::a);
//     constraint (storage::w'[0]! > ::a);
//     constraint (storage::w'[0]'! > ::a);
//     constraint (storage::x'.0! > ::a);
//     constraint (storage::x.0'! > ::a);
//     constraint (storage::x'.0'! > ::a);
//     constraint (storage::y'.0[0]! > ::a);
//     constraint (storage::y.0'[0]! > ::a);
//     constraint (storage::y.0[0]'! > ::a);
//     constraint (storage::y'.0'[0]! > ::a);
//     constraint (storage::y.0'[0]'! > ::a);
//     constraint (storage::y'.0'[0]'! > ::a);
//     constraint (storage::z'[0].0! > ::a);
//     constraint (storage::z[0]'.0! > ::a);
//     constraint (storage::z[0].0'! > ::a);
//     constraint (storage::z'[0]'.0! > ::a);
//     constraint (storage::z'[0].0'! > ::a);
//     constraint (storage::z[0]'.0'! > ::a);
//     constraint (storage::z'[0]'.0'! > ::a);
// }
// >>>

// flattened <<<
// storage {
//     v: int,
//     w: int[2],
//     x: {int, int},
//     y: {int[2], int[2]},
//     z: {int, int}[2],
// }
//
// predicate ::test(
// ) {
//     let ::a: int = __pre_state({0})!;
//     let ::b: int[2] = __pre_state({1, 0})!;
//     let ::c: {int, int} = __pre_state({2, 0})!;
//     let ::d: {int[2], int[2]} = __pre_state({3, 0})!;
//     let ::e: {int, int}[2] = __pre_state({4, 0})!;
//     constraint (__post_state({0})! > ::a);
//     constraint (__post_state({0})! > ::a);
//     constraint (__post_state({0})! > ::a);
//     constraint (__post_state({1, (0 + (0 * 1))})! > ::a);
//     constraint (__post_state({1, (0 + (0 * 1))})! > ::a);
//     constraint (__post_state({1, (0 + (0 * 1))})! > ::a);
//     constraint (__post_state({2, (0 + 0)})! > ::a);
//     constraint (__post_state({2, (0 + 0)})! > ::a);
//     constraint (__post_state({2, (0 + 0)})! > ::a);
//     constraint (__post_state({3, ((0 + 0) + (0 * 1))})! > ::a);
//     constraint (__post_state({3, ((0 + 0) + (0 * 1))})! > ::a);
//     constraint (__post_state({3, ((0 + 0) + (0 * 1))})! > ::a);
//     constraint (__post_state({3, ((0 + 0) + (0 * 1))})! > ::a);
//     constraint (__post_state({3, ((0 + 0) + (0 * 1))})! > ::a);
//     constraint (__post_state({3, ((0 + 0) + (0 * 1))})! > ::a);
//     constraint (__post_state({4, ((0 + (0 * 2)) + 0)})! > ::a);
//     constraint (__post_state({4, ((0 + (0 * 2)) + 0)})! > ::a);
//     constraint (__post_state({4, ((0 + (0 * 2)) + 0)})! > ::a);
//     constraint (__post_state({4, ((0 + (0 * 2)) + 0)})! > ::a);
//     constraint (__post_state({4, ((0 + (0 * 2)) + 0)})! > ::a);
//     constraint (__post_state({4, ((0 + (0 * 2)) + 0)})! > ::a);
//     constraint (__post_state({4, ((0 + (0 * 2)) + 0)})! > ::a);
// }
// >>>
