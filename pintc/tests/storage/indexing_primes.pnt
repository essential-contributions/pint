storage {
    v: int,
    w: int[2],
    x: { int, int },
    y: { int[2], int[2] },
    z: { int, int }[2],
}

predicate test() {
    let a = storage::v;
    constraint a' > a;
    constraint a'' > a;
    constraint (a'')''' > a;

    let b = storage::w;
    constraint b[0]' > a;
    constraint b'[0] > a;
    constraint b'[0]' > a;

    let c = storage::x;
    constraint c'.0 > a;
    constraint c.0' > a;
    constraint c'.0' > a;

    let d = storage::y;
    constraint d'.0[0] > a;
    constraint d.0'[0] > a;
    constraint d.0[0]' > a;
    constraint d'.0'[0] > a;
    constraint d.0'[0]' > a;
    constraint d'.0'[0]' > a;

    let e = storage::z;
    constraint e'[0].0 > a;
    constraint e[0]'.0 > a;
    constraint e[0].0' > a;
    constraint e'[0]'.0 > a;
    constraint e'[0].0' > a;
    constraint e[0]'.0' > a;
    constraint e'[0]'.0' > a;
}

// parsed <<<
// storage {
//     v: int,
//     w: int[2],
//     x: {int, int},
//     y: {int[2], int[2]},
//     z: {int, int}[2],
// }
// 
// predicate ::test(
// ) {
//     let ::a = storage::v;
//     let ::b = storage::w;
//     let ::c = storage::x;
//     let ::d = storage::y;
//     let ::e = storage::z;
//     constraint (::a' > ::a);
//     constraint (::a'' > ::a);
//     constraint (::a''''' > ::a);
//     constraint (::b[0]' > ::a);
//     constraint (::b'[0] > ::a);
//     constraint (::b'[0]' > ::a);
//     constraint (::c'.0 > ::a);
//     constraint (::c.0' > ::a);
//     constraint (::c'.0' > ::a);
//     constraint (::d'.0[0] > ::a);
//     constraint (::d.0'[0] > ::a);
//     constraint (::d.0[0]' > ::a);
//     constraint (::d'.0'[0] > ::a);
//     constraint (::d.0'[0]' > ::a);
//     constraint (::d'.0'[0]' > ::a);
//     constraint (::e'[0].0 > ::a);
//     constraint (::e[0]'.0 > ::a);
//     constraint (::e[0].0' > ::a);
//     constraint (::e'[0]'.0 > ::a);
//     constraint (::e'[0].0' > ::a);
//     constraint (::e[0]'.0' > ::a);
//     constraint (::e'[0]'.0' > ::a);
// }
// >>>

// flattened <<<
// storage {
//     v: int,
//     w: int[2],
//     x: {int, int},
//     y: {int[2], int[2]},
//     z: {int, int}[2],
// }
// 
// predicate ::test(
// ) {
//     let ::a: int = __storage_get({0});
//     let ::b: int[2] = __storage_get({1, 0});
//     let ::c: {int, int} = __storage_get({2, 0});
//     let ::d: {int[2], int[2]} = __storage_get({3, 0});
//     let ::e: {int, int}[2] = __storage_get({4, 0});
//     constraint (::a' > ::a);
//     constraint (::a' > ::a);
//     constraint (::a' > ::a);
//     constraint (::b'[0] > ::a);
//     constraint (::b'[0] > ::a);
//     constraint (::b'[0] > ::a);
//     constraint (::c'.0 > ::a);
//     constraint (::c'.0 > ::a);
//     constraint (::c'.0 > ::a);
//     constraint (::d'.0[0] > ::a);
//     constraint (::d'.0[0] > ::a);
//     constraint (::d'.0[0] > ::a);
//     constraint (::d'.0[0] > ::a);
//     constraint (::d'.0[0] > ::a);
//     constraint (::d'.0[0] > ::a);
//     constraint (::e'[0].0 > ::a);
//     constraint (::e'[0].0 > ::a);
//     constraint (::e'[0].0 > ::a);
//     constraint (::e'[0].0 > ::a);
//     constraint (::e'[0].0 > ::a);
//     constraint (::e'[0].0 > ::a);
//     constraint (::e'[0].0 > ::a);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
