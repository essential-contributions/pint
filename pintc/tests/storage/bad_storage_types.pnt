union MyUnion = A | B;
union MyBadMapKeyUnion = a({(int => bool), int[]}) | b(int[]);
type MyAlias = MyUnion;
type MyMapAlias = (int => bool);
type MyVecAlias = int[];

storage {
    a: {int, int}[],
    b: (int => int)[],
    c: (int[]  => int),
    d: ({ int[], b256 } => int),
    e: ({ (bool => b256), int } => bool),
    f: ((int => int) => int),
    g: (MyMapAlias => int),
    h: (MyVecAlias => int),
    i: (MyBadMapKeyUnion => int),
    j: MyAlias,
    k: MyUnion,
}

// parsed <<<
// union ::MyUnion = A | B;
// union ::MyBadMapKeyUnion = a({( int => bool ), int[_]}) | b(int[_]);
// type ::MyAlias = ::MyUnion;
// type ::MyMapAlias = ( int => bool );
// type ::MyVecAlias = int[_];
// storage {
//     a: {int, int}[_],
//     b: ( int => int )[_],
//     c: ( int[_] => int ),
//     d: ( {int[_], b256} => int ),
//     e: ( {( bool => b256 ), int} => bool ),
//     f: ( ( int => int ) => int ),
//     g: ( ::MyMapAlias => int ),
//     h: ( ::MyVecAlias => int ),
//     i: ( ::MyBadMapKeyUnion => int ),
//     j: ::MyAlias,
//     k: ::MyUnion,
// }
// >>>

// flattened <<<
// union ::MyUnion = A | B;
// union ::MyBadMapKeyUnion = a({( int => bool ), int[_]}) | b(int[_]);
// type ::MyAlias = ::MyUnion;
// type ::MyMapAlias = ( int => bool );
// type ::MyVecAlias = int[_];
// storage {
//     a: {int, int}[_],
//     b: ( int => int )[_],
//     c: ( int[_] => int ),
//     d: ( {int[_], b256} => int ),
//     e: ( {( bool => b256 ), int} => bool ),
//     f: ( ( int => int ) => int ),
//     g: ( ( int => bool ) => int ),
//     h: ( int[_] => int ),
//     i: ( ::MyBadMapKeyUnion => int ),
//     j: ::MyUnion,
//     k: ::MyUnion,
// }
// >>>
