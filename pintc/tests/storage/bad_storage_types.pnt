union MyUnion = A | B;
type MyAlias = MyUnion;

storage {
    a: {int, int}[],
    b: (int => int)[],
    c: MyAlias,
    d: MyUnion,
}

// parsed <<<
// union ::MyUnion = A | B;
// type ::MyAlias = ::MyUnion;
// storage {
//     a: {int, int}[],
//     b: ( int => int )[],
//     c: ::MyAlias,
//     d: ::MyUnion,
// }
// >>>

// typecheck_failure <<<
// type not allowed in storage
// @65..77: found type {int, int}[] in storage
// type not allowed in storage
// @86..100: found type ( int => int )[] in storage
// >>>
