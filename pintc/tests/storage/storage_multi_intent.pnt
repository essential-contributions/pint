storage {
    i: int,
    b: bool,
    map1: (int => int),
    map2: (b256 => bool),
    map3: (int => (int => b256)),
}

predicate Foo {
    var x = 5;
    var address = 0x2222222222222222222222222222222222222222222222222222222222222222;

    state i0 = storage::i;
    state i1: int = storage::i;

    state b0 = storage::b;
    state b1: bool = storage::b;

    state map_1_access_1 = storage::map1[7];
    state map_1_access_2: int = storage::map1[x];

    state map_2_access_1 = storage::map2[0x1111111111111111111111111111111111111111111111111111111111111111];
    state map_2_access_2: bool = storage::map2[address];

    state map_3_access_1 = storage::map3[42][69];
    state map_3_access_2: b256 = storage::map3[42][69];

    var and = b1 && map_2_access_1 && map_2_access_2;
    var sum = x + i0 + map_1_access_1 + map_1_access_2;
}

predicate Bar {
    var x = 5;
    var address = 0x2222222222222222222222222222222222222222222222222222222222222222;

    state i0 = storage::i;
    state i1: int = storage::i;

    state b0 = storage::b;
    state b1: bool = storage::b;

    state map_1_access_1 = storage::map1[7];
    state map_1_access_2: int = storage::map1[x];

    state map_2_access_1 = storage::map2[0x1111111111111111111111111111111111111111111111111111111111111111];
    state map_2_access_2: bool = storage::map2[address];

    state map_3_access_1 = storage::map3[42][69];
    state map_3_access_2: b256 = storage::map3[42][69];

    var and = b1 && map_2_access_1 && map_2_access_2;
    var sum = x + i0 + map_1_access_1 + map_1_access_2;
}

// parsed <<<
// storage {
//     i: int,
//     b: bool,
//     map1: ( int => int ),
//     map2: ( b256 => bool ),
//     map3: ( int => ( int => b256 ) ),
// }
//
// predicate ::Bar {
//     storage {
//         i: int,
//         b: bool,
//         map1: ( int => int ),
//         map2: ( b256 => bool ),
//         map3: ( int => ( int => b256 ) ),
//     }
//     var ::x;
//     var ::address;
//     var ::and;
//     var ::sum;
//     state ::i0 = storage::i;
//     state ::i1: int = storage::i;
//     state ::b0 = storage::b;
//     state ::b1: bool = storage::b;
//     state ::map_1_access_1 = storage::map1[7];
//     state ::map_1_access_2: int = storage::map1[::x];
//     state ::map_2_access_1 = storage::map2[0x1111111111111111111111111111111111111111111111111111111111111111];
//     state ::map_2_access_2: bool = storage::map2[::address];
//     state ::map_3_access_1 = storage::map3[42][69];
//     state ::map_3_access_2: b256 = storage::map3[42][69];
//     constraint (::x == 5);
//     constraint (::address == 0x2222222222222222222222222222222222222222222222222222222222222222);
//     constraint (::and == ((::b1 && ::map_2_access_1) && ::map_2_access_2));
//     constraint (::sum == (((::x + ::i0) + ::map_1_access_1) + ::map_1_access_2));
// }
//
// predicate ::Foo {
//     storage {
//         i: int,
//         b: bool,
//         map1: ( int => int ),
//         map2: ( b256 => bool ),
//         map3: ( int => ( int => b256 ) ),
//     }
//     var ::x;
//     var ::address;
//     var ::and;
//     var ::sum;
//     state ::i0 = storage::i;
//     state ::i1: int = storage::i;
//     state ::b0 = storage::b;
//     state ::b1: bool = storage::b;
//     state ::map_1_access_1 = storage::map1[7];
//     state ::map_1_access_2: int = storage::map1[::x];
//     state ::map_2_access_1 = storage::map2[0x1111111111111111111111111111111111111111111111111111111111111111];
//     state ::map_2_access_2: bool = storage::map2[::address];
//     state ::map_3_access_1 = storage::map3[42][69];
//     state ::map_3_access_2: b256 = storage::map3[42][69];
//     constraint (::x == 5);
//     constraint (::address == 0x2222222222222222222222222222222222222222222222222222222222222222);
//     constraint (::and == ((::b1 && ::map_2_access_1) && ::map_2_access_2));
//     constraint (::sum == (((::x + ::i0) + ::map_1_access_1) + ::map_1_access_2));
// }
// >>>

// flattened <<<
// storage {
//     i: int,
//     b: bool,
//     map1: ( int => int ),
//     map2: ( b256 => bool ),
//     map3: ( int => ( int => b256 ) ),
// }
//
// predicate ::Bar {
//     storage {
//         i: int,
//         b: bool,
//         map1: ( int => int ),
//         map2: ( b256 => bool ),
//         map3: ( int => ( int => b256 ) ),
//     }
//     var ::x: int;
//     var ::address: b256;
//     var ::and: bool;
//     var ::sum: int;
//     state ::i0: int = storage::i;
//     state ::i1: int = storage::i;
//     state ::b0: bool = storage::b;
//     state ::b1: bool = storage::b;
//     state ::map_1_access_1: int = storage::map1[7];
//     state ::map_1_access_2: int = storage::map1[::x];
//     state ::map_2_access_1: bool = storage::map2[0x1111111111111111111111111111111111111111111111111111111111111111];
//     state ::map_2_access_2: bool = storage::map2[::address];
//     state ::map_3_access_1: b256 = storage::map3[42][69];
//     state ::map_3_access_2: b256 = storage::map3[42][69];
//     constraint (::x == 5);
//     constraint (::address == 0x2222222222222222222222222222222222222222222222222222222222222222);
//     constraint (::and == ((::b1 && ::map_2_access_1) && ::map_2_access_2));
//     constraint (::sum == (((::x + ::i0) + ::map_1_access_1) + ::map_1_access_2));
// }
//
// predicate ::Foo {
//     storage {
//         i: int,
//         b: bool,
//         map1: ( int => int ),
//         map2: ( b256 => bool ),
//         map3: ( int => ( int => b256 ) ),
//     }
//     var ::x: int;
//     var ::address: b256;
//     var ::and: bool;
//     var ::sum: int;
//     state ::i0: int = storage::i;
//     state ::i1: int = storage::i;
//     state ::b0: bool = storage::b;
//     state ::b1: bool = storage::b;
//     state ::map_1_access_1: int = storage::map1[7];
//     state ::map_1_access_2: int = storage::map1[::x];
//     state ::map_2_access_1: bool = storage::map2[0x1111111111111111111111111111111111111111111111111111111111111111];
//     state ::map_2_access_2: bool = storage::map2[::address];
//     state ::map_3_access_1: b256 = storage::map3[42][69];
//     state ::map_3_access_2: b256 = storage::map3[42][69];
//     constraint (::x == 5);
//     constraint (::address == 0x2222222222222222222222222222222222222222222222222222222222222222);
//     constraint (::and == ((::b1 && ::map_2_access_1) && ::map_2_access_2));
//     constraint (::sum == (((::x + ::i0) + ::map_1_access_1) + ::map_1_access_2));
// }
// >>>
