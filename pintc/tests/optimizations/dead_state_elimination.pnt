storage {
    x: int,
    arr: int[2],
    tup: { int, int },
    bmap: ( int => bool ),
}

predicate Test(f: int, g: int, h: bool) {
    // live states that should remain when optimized
    let a = storage::x;
    constraint a' >= a + 42;

    let b: int = storage::x;
    constraint (b == nil && b' == 1) || b' == b + 1;

    let c: int[2] = mut storage::arr;
    constraint c'[0] == 42;

    let d = storage::tup;
    let d_0 = storage::tup.0;

    let e_0 = storage::bmap[0];
    let e_1 = storage::bmap[1];

    constraint f == b + c[0];
    constraint g == d.1 + d_0;
    constraint h == (e_1 == e_0);

    // dead let that should be eliminated
    let x1 = storage::x;
    let x2 = storage::arr;
    let x3 = storage::tup;
    let x4 = storage::tup.0;
    let x5 = storage::bmap[0];
    let x6 = storage::bmap[1];

    // mutable key remains, let is eliminated
    let z = mut storage::x;
}

// parsed <<<
// storage {
//     x: int,
//     arr: int[2],
//     tup: {int, int},
//     bmap: ( int => bool ),
// }
//
// predicate ::Test(
//     ::f: int,
//     ::g: int,
//     ::h: bool,
// ) {
//     let ::a = storage::x;
//     let ::b: int = storage::x;
//     let ::c: int[2] = mut storage::arr;
//     let ::d = storage::tup;
//     let ::d_0 = storage::tup.0;
//     let ::e_0 = storage::bmap[0];
//     let ::e_1 = storage::bmap[1];
//     let ::x1 = storage::x;
//     let ::x2 = storage::arr;
//     let ::x3 = storage::tup;
//     let ::x4 = storage::tup.0;
//     let ::x5 = storage::bmap[0];
//     let ::x6 = storage::bmap[1];
//     let ::z = mut storage::x;
//     constraint (::a' >= (::a + 42));
//     constraint (((::b == nil) && (::b' == 1)) || (::b' == (::b + 1)));
//     constraint (::c'[0] == 42);
//     constraint (::f == (::b + ::c[0]));
//     constraint (::g == (::d.1 + ::d_0));
//     constraint (::h == (::e_1 == ::e_0));
// }
// >>>

// flattened <<<
// storage {
//     x: int,
//     arr: int[2],
//     tup: {int, int},
//     bmap: ( int => bool ),
// }
//
// predicate ::Test(
//     ::f: int,
//     ::g: int,
//     ::h: bool,
// ) {
//     let ::a: int = __storage_get({0});
//     let ::b: int = __storage_get({0});
//     let ::c: int[2] = __storage_get({1, 0});
//     let ::d: {int, int} = __storage_get({2, 0});
//     let ::d_0: int = __storage_get({2, (0 + 0)});
//     let ::e_0: bool = __storage_get({3, 0});
//     let ::e_1: bool = __storage_get({3, 1});
//     let ::x1: int = __storage_get({0});
//     let ::x2: int[2] = __storage_get({1, 0});
//     let ::x3: {int, int} = __storage_get({2, 0});
//     let ::x4: int = __storage_get({2, (0 + 0)});
//     let ::x5: bool = __storage_get({3, 0});
//     let ::x6: bool = __storage_get({3, 1});
//     let ::z: int = __storage_get({0});
//     constraint (::a' >= (::a + 42));
//     constraint (((__size_of(::b) == 0) && (::b' == 1)) || (::b' == (::b + 1)));
//     constraint (::c'[0] == 42);
//     constraint (::f == (::b + ::c[0]));
//     constraint (::g == (::d.1 + ::d_0));
//     constraint (::h == (::e_1 == ::e_0));
//     constraint __eq_set(__mut_keys(), {{1, 0}, 2, {1, (0 + 1)}, 2, {0}, 1, 8});
// }
// >>>

// optimized <<<
// storage {
//     x: int,
//     arr: int[2],
//     tup: {int, int},
//     bmap: ( int => bool ),
// }
//
// predicate ::Test(
//     ::f: int,
//     ::g: int,
//     ::h: bool,
// ) {
//     let ::a: int = __storage_get({0});
//     let ::c: int[2] = __storage_get({1, 0});
//     let ::d: {int, int} = __storage_get({2, 0});
//     let ::d_0: int = __storage_get({2, 0});
//     let ::e_0: bool = __storage_get({3, 0});
//     let ::e_1: bool = __storage_get({3, 1});
//     constraint (::a' >= (::a + 42));
//     constraint (((__size_of(::a) == 0) && (::a' == 1)) || (::a' == (::a + 1)));
//     constraint (::c'[0] == 42);
//     constraint (::f == (::a + ::c[0]));
//     constraint (::g == (::d.1 + ::d_0));
//     constraint (::h == (::e_1 == ::e_0));
//     constraint __eq_set(__mut_keys(), {{1, 0}, 2, {1, 1}, 2, {0}, 1, 8});
// }
// >>>

// warnings <<<
// >>>
