storage {
    x: int,
}

predicate Foo(x: int, y: bool) {
    let a = 1;
    let b: int = 20;
    let c: int[2] = [1, 2];
    let d: { bool, int } = { false, 5 };
    let e = false;
    let f = a + b - d.1;
    let g = f - c[1];
    
    let h = storage::x! + a;
    let i = storage::x! * b;
    let j = storage::x! / c[0];
    let k = storage::x! - c[1];
    let l = storage::x! + d.1;
    let m = storage::x! % f;

    constraint h > 10;
    constraint j == 5;
    constraint i == 1;
    constraint k == 15;
    constraint l == 30;
    constraint m == 10;

    constraint x == 1 - c[0];
    constraint x == -(b + 3);
    constraint x == (1 + a) - 3 + b - (2 - d.1);
    constraint x == f;
    constraint x == g - f;
    constraint y == !(d.1 > 2);
    constraint y == (e ? false : !(!true));
    constraint y == !d.0;
}

// parsed <<<
// storage {
//     x: int,
// }
//
// predicate ::Foo(
//     ::x: int,
//     ::y: bool,
// ) {
//     let ::a = 1;
//     let ::b: int = 20;
//     let ::c: int[2] = [1, 2];
//     let ::d: {bool, int} = {false, 5};
//     let ::e = false;
//     let ::f = ((::a + ::b) - ::d.1);
//     let ::g = (::f - ::c[1]);
//     let ::h = (storage::x! + ::a);
//     let ::i = (storage::x! * ::b);
//     let ::j = (storage::x! / ::c[0]);
//     let ::k = (storage::x! - ::c[1]);
//     let ::l = (storage::x! + ::d.1);
//     let ::m = (storage::x! % ::f);
//     constraint (::h > 10);
//     constraint (::j == 5);
//     constraint (::i == 1);
//     constraint (::k == 15);
//     constraint (::l == 30);
//     constraint (::m == 10);
//     constraint (::x == (1 - ::c[0]));
//     constraint (::x == -(::b + 3));
//     constraint (::x == ((((1 + ::a) - 3) + ::b) - (2 - ::d.1)));
//     constraint (::x == ::f);
//     constraint (::x == (::g - ::f));
//     constraint (::y == !(::d.1 > 2));
//     constraint (::y == (::e ? false : !!true));
//     constraint (::y == !::d.0);
// }
// >>>

// flattened <<<
// storage {
//     x: int,
// }
//
// predicate ::Foo(
//     ::x: int,
//     ::y: bool,
// ) {
//     let ::a: int = 1;
//     let ::b: int = 20;
//     let ::c: int[2] = [1, 2];
//     let ::d: {bool, int} = {false, 5};
//     let ::e: bool = false;
//     let ::f: int = ((::a + ::b) - ::d.1);
//     let ::g: int = (::f - ::c[1]);
//     let ::h: int = (__pre_state({0})! + ::a);
//     let ::i: int = (__pre_state({0})! * ::b);
//     let ::j: int = (__pre_state({0})! / ::c[0]);
//     let ::k: int = (__pre_state({0})! - ::c[1]);
//     let ::l: int = (__pre_state({0})! + ::d.1);
//     let ::m: int = (__pre_state({0})! % ::f);
//     constraint (::h > 10);
//     constraint (::j == 5);
//     constraint (::i == 1);
//     constraint (::k == 15);
//     constraint (::l == 30);
//     constraint (::m == 10);
//     constraint (::x == (1 - ::c[0]));
//     constraint (::x == -(::b + 3));
//     constraint (::x == ((((1 + ::a) - 3) + ::b) - (2 - ::d.1)));
//     constraint (::x == ::f);
//     constraint (::x == (::g - ::f));
//     constraint (::y == !(::d.1 > 2));
//     constraint (::y == (::e ? false : !!true));
//     constraint (::y == !::d.0);
// }
// >>>

// optimized <<<
// storage {
//     x: int,
// }
//
// predicate ::Foo(
//     ::x: int,
//     ::y: bool,
// ) {
//     let ::h: int = (__pre_state({0})! + 1);
//     let ::i: int = (__pre_state({0})! * 20);
//     let ::j: int = __pre_state({0})!;
//     let ::k: int = (__pre_state({0})! - 2);
//     let ::l: int = (__pre_state({0})! + 5);
//     let ::m: int = (__pre_state({0})! % 16);
//     constraint (::h > 10);
//     constraint (::j == 5);
//     constraint (::i == 1);
//     constraint (::k == 15);
//     constraint (::l == 30);
//     constraint (::m == 10);
//     constraint (::x == 0);
//     constraint (::x == -23);
//     constraint (::x == 22);
//     constraint (::x == 16);
//     constraint (::x == -2);
//     constraint (::y == false);
//     constraint (::y == true);
// }
// >>>

// warnings <<<
// >>>
