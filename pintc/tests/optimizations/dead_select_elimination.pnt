predicate test(
    a: int,
    b: int,
    c: int,
    d: int,
    e: int,
    f: bool,
    g: int,
    y: int,
    z: int,
){
    // select exprs that should be optimized out
    constraint a == (true ? 1 : 2);
    constraint b == (false ? 1 : 2);
    constraint c == ((1 + 2 == 3) ? 1 : 2);
    constraint d == ((1 < 2) ? 1 : 2);
    constraint e == (true ? (false ? 1 : 2) : 3);

    // should this be removed? The evaluator can't handle this right now
    constraint f == (2 < 1);
    constraint g == (f ? 1 : 2);

    // select exprs that should be kept in
    constraint z == (y > 0 ? 3 : 4);
}

// parsed <<<
// predicate ::test(
//     ::a: int,
//     ::b: int,
//     ::c: int,
//     ::d: int,
//     ::e: int,
//     ::f: bool,
//     ::g: int,
//     ::y: int,
//     ::z: int,
// ) {
//     constraint (::a == (true ? 1 : 2));
//     constraint (::b == (false ? 1 : 2));
//     constraint (::c == (((1 + 2) == 3) ? 1 : 2));
//     constraint (::d == ((1 < 2) ? 1 : 2));
//     constraint (::e == (true ? (false ? 1 : 2) : 3));
//     constraint (::f == (2 < 1));
//     constraint (::g == (::f ? 1 : 2));
//     constraint (::z == ((::y > 0) ? 3 : 4));
// }
// >>>

// flattened <<<
// predicate ::test(
//     ::a: int,
//     ::b: int,
//     ::c: int,
//     ::d: int,
//     ::e: int,
//     ::f: bool,
//     ::g: int,
//     ::y: int,
//     ::z: int,
// ) {
//     constraint (::a == (true ? 1 : 2));
//     constraint (::b == (false ? 1 : 2));
//     constraint (::c == (((1 + 2) == 3) ? 1 : 2));
//     constraint (::d == ((1 < 2) ? 1 : 2));
//     constraint (::e == (true ? (false ? 1 : 2) : 3));
//     constraint (::f == (2 < 1));
//     constraint (::g == (::f ? 1 : 2));
//     constraint (::z == ((::y > 0) ? 3 : 4));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>

// optimized <<<
// predicate ::test(
//     ::a: int,
//     ::b: int,
//     ::c: int,
//     ::d: int,
//     ::e: int,
//     ::f: bool,
//     ::g: int,
//     ::y: int,
//     ::z: int,
// ) {
//     constraint (::a == 1);
//     constraint (::b == 2);
//     constraint (::c == 1);
//     constraint (::d == 1);
//     constraint (::e == 2);
//     constraint (::f == false);
//     constraint (::g == (::f ? 1 : 2));
//     constraint (::z == ((::y > 0) ? 3 : 4));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>

// warnings <<<
// >>>
