union Coin = Penny | Dime | Quarter;
union Fruit = Apples(int) | Oranges(int);

storage {
    x1: int,
    x2: int[2],
    x4: int,
    x_map: ( { int, int } => { int, int } ),
}

interface Foo {
    storage {
        x4: int,
        x5: int,
    }

    predicate FooTest(foo_x: int, foo_y: bool);
}

predicate LocalTest(local_x: int, local_y: bool) {}

predicate LocalTest2(local_x: int, local_y: int) {
    constraint local_x == local_y;
}

predicate Test(w: int, x: int, y: bool, z: bool, w2: Coin, x2: Coin, y2: {int, int}, z2: b256, w3: Fruit) {
    let addr0 = 0x0000000000000000000000000000000000000000000000000000000000000000;

    // binary ops
    constraint w == x + 1;
    constraint w == 1 + x;

    constraint w == 1 * x;
    constraint w == x * 1;

    constraint 1 == x;
    constraint x == 1;

    constraint x != 1;
    constraint 1 != x;

    constraint y && z;
    constraint z && y;

    constraint y || z;
    constraint z || y;

    constraint w == 1 - x;
    constraint w == 1 - x;
    constraint w == x - 1; // should not be removed

    constraint w == 1 / x;
    constraint w == 1 / x;
    constraint w == x / 1; // should not be removed

    constraint w == 2 % x;
    constraint w == 2 % x;
    constraint w == x % 2; // should not be removed

    constraint 1 <= x;
    constraint 1 <= x;
    constraint x <= 1; // should not be removed

    constraint 1 < x;
    constraint 1 < x;
    constraint x < 1; // should not be removed

    constraint 1 >= x;
    constraint 1 >= x;
    constraint x >= 1; // should not be removed

    constraint 1 > x;
    constraint 1 > x;
    constraint x > 1; // should not be removed

    // arrays
    let a = storage::x2;
    constraint a == [1, x];
    constraint a == [1, x];
    constraint a == [x, 1]; // should not be removed

    // tuples
    constraint y2 == { 1 , x };
    constraint y2 == { 1 , x };
    constraint y2 == { x , 1 }; // should not be removed

    // unary ops
    constraint w == -x;
    constraint w == -x;
    constraint w == -w; // should not be removed

    constraint z == !y;
    constraint z == !y;
    constraint z == !z; // should not be removed

    let b = storage::x1;
    let c = storage::x4;
    constraint w == b';
    constraint w == b';
    constraint w == c'; // should not be removed

    // tuple field accesses
    constraint w == y2.0;
    constraint w == y2.0;
    constraint w == y2.1; // should not be removed

    // casts
    constraint 1 == y as int;
    constraint 1 == y as int;
    constraint 1 == z as int; // should not be removed

    // intrinsic calls
    constraint z2 == __this_address();
    constraint z2 == __this_address();
    constraint z2 == __this_contract_address(); // should not be removed

    constraint z2 == __address_of("::LocalTest");
    constraint z2 == __address_of("::LocalTest");
    constraint z2 == __address_of("::LocalTest2"); // should not be removed
    
    // union variants
    constraint w2 == w2;
    constraint w2 == w2;
    constraint w2 == x2; // should not be removed

    // maps
    let d = storage::x_map[{42, 69}].1;
    let e = storage::x_map[{69, 42}].0;
    constraint 0 == d;
    constraint 0 == d;
    constraint 0 == e; // should not be removed

    // external storage access
    let f = Foo@[addr0]::storage::x4;
    let g = Foo@[addr0]::storage::x5;
    constraint 0 == f;
    constraint 0 == f;
    constraint 0 == g; // should not be removed

    // external predicate calls
    let h = Foo@[addr0]::FooTest@[addr0](x, y);
    let i = Foo@[addr0]::FooTest@[addr0](x, z);
    constraint LocalTest@[](x, y) == h;
    constraint LocalTest@[](x, y) == h;
    constraint LocalTest@[](x, y) == h; // should not be removed

    // local predicate calls
    let j = LocalTest@[](x, y);
    let k = LocalTest@[](x, z); // should not be removed
    constraint LocalTest2@[](x, w) == j;
    constraint LocalTest2@[](x, w) == j;
    constraint LocalTest2@[](x, w) == k; // should not be removed

    // matches and union tags
    constraint x == match w2 {
        Coin::Penny => 1,
        Coin::Dime => 10,
        Coin::Quarter => 25,
    };
    constraint x == match w2 {
        Coin::Penny => 1,
        Coin::Dime => 10,
        Coin::Quarter => 25,
    };
    constraint x == match x2 {
        Coin::Penny => 22,
        Coin::Dime => 23,
        Coin::Quarter => 24,
    }; // should not be removed

    // indexes
    let l = storage::x2[1];
    let m = storage::x2[0];
    constraint 0 == l;
    constraint 0 == l;
    constraint 0 == m; // should not be removed

    // ins
    constraint w in [1, 2];
    constraint w in [1, 2];
    constraint x in [1, 2]; // should not be removed

    // ranges
    constraint w in 1..2;
    constraint w in 1..2;
    constraint w in 2..3; // should not be removed

    // union values
    constraint w3 == Fruit::Apples(w);
    constraint w3 == Fruit::Apples(w);
    constraint w3 == Fruit::Apples(x); // should not be removed

    // more than 2 duplicates
    constraint w == (1 + x) - (w + 1);
    constraint w == (x + 1) - (w + 1);
    constraint w == (1 + x) - (1 + w);
    constraint w == (x + 1) - (1 + w);
}

// parsed <<<
// union ::Coin = Penny | Dime | Quarter;
// union ::Fruit = Apples(int) | Oranges(int);
// storage {
//     x1: int,
//     x2: int[2],
//     x4: int,
//     x_map: ( {int, int} => {int, int} ),
// }
// interface ::Foo {
//     storage {
//         x4: int,
//         x5: int,
//     }
//     predicate FooTest (
//         foo_x: int,
//         foo_y: bool,
//     );
// }
//
// predicate ::LocalTest(
//     ::local_x: int,
//     ::local_y: bool,
// ) {
// }
//
// predicate ::LocalTest2(
//     ::local_x: int,
//     ::local_y: int,
// ) {
//     constraint (::local_x == ::local_y);
// }
//
// predicate ::Test(
//     ::w: int,
//     ::x: int,
//     ::y: bool,
//     ::z: bool,
//     ::w2: ::Coin,
//     ::x2: ::Coin,
//     ::y2: {int, int},
//     ::z2: b256,
//     ::w3: ::Fruit,
// ) {
//     let ::addr0 = 0x0000000000000000000000000000000000000000000000000000000000000000;
//     let ::a = storage::x2;
//     let ::b = storage::x1;
//     let ::c = storage::x4;
//     let ::d = storage::x_map[{42, 69}].1;
//     let ::e = storage::x_map[{69, 42}].0;
//     let ::f = ::Foo@[::addr0]::storage::x4;
//     let ::g = ::Foo@[::addr0]::storage::x5;
//     let ::h = ::Foo@[::addr0]::FooTest@[::addr0](::x, ::y);
//     let ::i = ::Foo@[::addr0]::FooTest@[::addr0](::x, ::z);
//     let ::j = ::LocalTest@[](::x, ::y);
//     let ::k = ::LocalTest@[](::x, ::z);
//     let ::l = storage::x2[1];
//     let ::m = storage::x2[0];
//     constraint (::w == (::x + 1));
//     constraint (::w == (1 + ::x));
//     constraint (::w == (1 * ::x));
//     constraint (::w == (::x * 1));
//     constraint (1 == ::x);
//     constraint (::x == 1);
//     constraint (::x != 1);
//     constraint (1 != ::x);
//     constraint (::y && ::z);
//     constraint (::z && ::y);
//     constraint (::y || ::z);
//     constraint (::z || ::y);
//     constraint (::w == (1 - ::x));
//     constraint (::w == (1 - ::x));
//     constraint (::w == (::x - 1));
//     constraint (::w == (1 / ::x));
//     constraint (::w == (1 / ::x));
//     constraint (::w == (::x / 1));
//     constraint (::w == (2 % ::x));
//     constraint (::w == (2 % ::x));
//     constraint (::w == (::x % 2));
//     constraint (1 <= ::x);
//     constraint (1 <= ::x);
//     constraint (::x <= 1);
//     constraint (1 < ::x);
//     constraint (1 < ::x);
//     constraint (::x < 1);
//     constraint (1 >= ::x);
//     constraint (1 >= ::x);
//     constraint (::x >= 1);
//     constraint (1 > ::x);
//     constraint (1 > ::x);
//     constraint (::x > 1);
//     constraint (::a == [1, ::x]);
//     constraint (::a == [1, ::x]);
//     constraint (::a == [::x, 1]);
//     constraint (::y2 == {1, ::x});
//     constraint (::y2 == {1, ::x});
//     constraint (::y2 == {::x, 1});
//     constraint (::w == -::x);
//     constraint (::w == -::x);
//     constraint (::w == -::w);
//     constraint (::z == !::y);
//     constraint (::z == !::y);
//     constraint (::z == !::z);
//     constraint (::w == ::b');
//     constraint (::w == ::b');
//     constraint (::w == ::c');
//     constraint (::w == ::y2.0);
//     constraint (::w == ::y2.0);
//     constraint (::w == ::y2.1);
//     constraint (1 == ::y as int);
//     constraint (1 == ::y as int);
//     constraint (1 == ::z as int);
//     constraint (::z2 == __this_address());
//     constraint (::z2 == __this_address());
//     constraint (::z2 == __this_contract_address());
//     constraint (::z2 == __address_of("::LocalTest"));
//     constraint (::z2 == __address_of("::LocalTest"));
//     constraint (::z2 == __address_of("::LocalTest2"));
//     constraint (::w2 == ::w2);
//     constraint (::w2 == ::w2);
//     constraint (::w2 == ::x2);
//     constraint (0 == ::d);
//     constraint (0 == ::d);
//     constraint (0 == ::e);
//     constraint (0 == ::f);
//     constraint (0 == ::f);
//     constraint (0 == ::g);
//     constraint (::LocalTest@[](::x, ::y) == ::h);
//     constraint (::LocalTest@[](::x, ::y) == ::h);
//     constraint (::LocalTest@[](::x, ::y) == ::h);
//     constraint (::LocalTest2@[](::x, ::w) == ::j);
//     constraint (::LocalTest2@[](::x, ::w) == ::j);
//     constraint (::LocalTest2@[](::x, ::w) == ::k);
//     constraint (::x == match ::w2 { ::Coin::Penny => 1, ::Coin::Dime => 10, ::Coin::Quarter => 25 });
//     constraint (::x == match ::w2 { ::Coin::Penny => 1, ::Coin::Dime => 10, ::Coin::Quarter => 25 });
//     constraint (::x == match ::x2 { ::Coin::Penny => 22, ::Coin::Dime => 23, ::Coin::Quarter => 24 });
//     constraint (0 == ::l);
//     constraint (0 == ::l);
//     constraint (0 == ::m);
//     constraint ::w in [1, 2];
//     constraint ::w in [1, 2];
//     constraint ::x in [1, 2];
//     constraint ::w in 1..2;
//     constraint ::w in 1..2;
//     constraint ::w in 2..3;
//     constraint (::w3 == ::Fruit::Apples(::w));
//     constraint (::w3 == ::Fruit::Apples(::w));
//     constraint (::w3 == ::Fruit::Apples(::x));
//     constraint (::w == ((1 + ::x) - (::w + 1)));
//     constraint (::w == ((::x + 1) - (::w + 1)));
//     constraint (::w == ((1 + ::x) - (1 + ::w)));
//     constraint (::w == ((::x + 1) - (1 + ::w)));
// }
// >>>

// flattened <<<
// union ::Coin = Penny | Dime | Quarter;
// union ::Fruit = Apples(int) | Oranges(int);
// storage {
//     x1: int,
//     x2: int[2],
//     x4: int,
//     x_map: ( {int, int} => {int, int} ),
// }
// interface ::Foo {
//     storage {
//         x4: int,
//         x5: int,
//     }
//     predicate FooTest (
//         foo_x: int,
//         foo_y: bool,
//     );
// }
//
// predicate ::LocalTest(
//     ::local_x: int,
//     ::local_y: bool,
// ) {
//     constraint __eq_set(__mut_keys(), {0});
// }
//
// predicate ::LocalTest2(
//     ::local_x: int,
//     ::local_y: int,
// ) {
//     constraint (::local_x == ::local_y);
//     constraint __eq_set(__mut_keys(), {0});
// }
//
// predicate ::Test(
//     ::w: int,
//     ::x: int,
//     ::y: bool,
//     ::z: bool,
//     ::w2: ::Coin,
//     ::x2: ::Coin,
//     ::y2: {int, int},
//     ::z2: b256,
//     ::w3: ::Fruit,
// ) {
//     let ::addr0: b256 = 0x0000000000000000000000000000000000000000000000000000000000000000;
//     let ::a: int[2] = __pre_state({1, 0});
//     let ::b: int = __pre_state({0});
//     let ::c: int = __pre_state({2});
//     let ::d: int = __pre_state({3, {42, 69}, (0 + 1)});
//     let ::e: int = __pre_state({3, {69, 42}, (0 + 0)});
//     let ::f: int = __pre_state_extern(::addr0, {0});
//     let ::g: int = __pre_state_extern(::addr0, {1});
//     let ::h: bool = ::Foo@[::addr0]::FooTest@[::addr0](::x, ::y);
//     let ::i: bool = ::Foo@[::addr0]::FooTest@[::addr0](::x, ::z);
//     let ::j: bool = ::LocalTest@[](::x, ::y);
//     let ::k: bool = ::LocalTest@[](::x, ::z);
//     let ::l: int = __pre_state({1, (0 + (1 * 1))});
//     let ::m: int = __pre_state({1, (0 + (0 * 1))});
//     constraint (::w == (::x + 1));
//     constraint (::w == (1 + ::x));
//     constraint (::w == (1 * ::x));
//     constraint (::w == (::x * 1));
//     constraint (1 == ::x);
//     constraint (::x == 1);
//     constraint (::x != 1);
//     constraint (1 != ::x);
//     constraint (::y && ::z);
//     constraint (::z && ::y);
//     constraint (::y || ::z);
//     constraint (::z || ::y);
//     constraint (::w == (1 - ::x));
//     constraint (::w == (1 - ::x));
//     constraint (::w == (::x - 1));
//     constraint (::w == (1 / ::x));
//     constraint (::w == (1 / ::x));
//     constraint (::w == (::x / 1));
//     constraint (::w == (2 % ::x));
//     constraint (::w == (2 % ::x));
//     constraint (::w == (::x % 2));
//     constraint (1 <= ::x);
//     constraint (1 <= ::x);
//     constraint (::x <= 1);
//     constraint (1 < ::x);
//     constraint (1 < ::x);
//     constraint (::x < 1);
//     constraint (1 >= ::x);
//     constraint (1 >= ::x);
//     constraint (::x >= 1);
//     constraint (1 > ::x);
//     constraint (1 > ::x);
//     constraint (::x > 1);
//     constraint (::a == [1, ::x]);
//     constraint (::a == [1, ::x]);
//     constraint (::a == [::x, 1]);
//     constraint (::y2 == {1, ::x});
//     constraint (::y2 == {1, ::x});
//     constraint (::y2 == {::x, 1});
//     constraint (::w == -::x);
//     constraint (::w == -::x);
//     constraint (::w == -::w);
//     constraint (::z == !::y);
//     constraint (::z == !::y);
//     constraint (::z == !::z);
//     constraint (::w == ::b');
//     constraint (::w == ::b');
//     constraint (::w == ::c');
//     constraint (::w == ::y2.0);
//     constraint (::w == ::y2.0);
//     constraint (::w == ::y2.1);
//     constraint (1 == ::y);
//     constraint (1 == ::y);
//     constraint (1 == ::z);
//     constraint (::z2 == __this_address());
//     constraint (::z2 == __this_address());
//     constraint (::z2 == __this_contract_address());
//     constraint (::z2 == __address_of("::LocalTest"));
//     constraint (::z2 == __address_of("::LocalTest"));
//     constraint (::z2 == __address_of("::LocalTest2"));
//     constraint (::w2 == ::w2);
//     constraint (::w2 == ::w2);
//     constraint (::w2 == ::x2);
//     constraint (0 == ::d);
//     constraint (0 == ::d);
//     constraint (0 == ::e);
//     constraint (0 == ::f);
//     constraint (0 == ::f);
//     constraint (0 == ::g);
//     constraint (::LocalTest@[](::x, ::y) == ::h);
//     constraint (::LocalTest@[](::x, ::y) == ::h);
//     constraint (::LocalTest@[](::x, ::y) == ::h);
//     constraint (::LocalTest2@[](::x, ::w) == ::j);
//     constraint (::LocalTest2@[](::x, ::w) == ::j);
//     constraint (::LocalTest2@[](::x, ::w) == ::k);
//     constraint (::x == ((UnTag(::w2) == 0) ? 1 : ((UnTag(::w2) == 1) ? 10 : 25)));
//     constraint (::x == ((UnTag(::w2) == 0) ? 1 : ((UnTag(::w2) == 1) ? 10 : 25)));
//     constraint (::x == ((UnTag(::x2) == 0) ? 22 : ((UnTag(::x2) == 1) ? 23 : 24)));
//     constraint (0 == ::l);
//     constraint (0 == ::l);
//     constraint (0 == ::m);
//     constraint ((::w == 1) || (::w == 2));
//     constraint ((::w == 1) || (::w == 2));
//     constraint ((::x == 1) || (::x == 2));
//     constraint ((::w >= 1) && (::w <= 2));
//     constraint ((::w >= 1) && (::w <= 2));
//     constraint ((::w >= 2) && (::w <= 3));
//     constraint (::w3 == ::Fruit::Apples(::w));
//     constraint (::w3 == ::Fruit::Apples(::w));
//     constraint (::w3 == ::Fruit::Apples(::x));
//     constraint (::w == ((1 + ::x) - (::w + 1)));
//     constraint (::w == ((::x + 1) - (::w + 1)));
//     constraint (::w == ((1 + ::x) - (1 + ::w)));
//     constraint (::w == ((::x + 1) - (1 + ::w)));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>

// optimized <<<
// union ::Coin = Penny | Dime | Quarter;
// union ::Fruit = Apples(int) | Oranges(int);
// storage {
//     x1: int,
//     x2: int[2],
//     x4: int,
//     x_map: ( {int, int} => {int, int} ),
// }
// interface ::Foo {
//     storage {
//         x4: int,
//         x5: int,
//     }
//     predicate FooTest (
//         foo_x: int,
//         foo_y: bool,
//     );
// }
//
// predicate ::LocalTest(
//     ::local_x: int,
//     ::local_y: bool,
// ) {
//     constraint __eq_set(__mut_keys(), {0});
// }
//
// predicate ::LocalTest2(
//     ::local_x: int,
//     ::local_y: int,
// ) {
//     constraint (::local_x == ::local_y);
//     constraint __eq_set(__mut_keys(), {0});
// }
//
// predicate ::Test(
//     ::w: int,
//     ::x: int,
//     ::y: bool,
//     ::z: bool,
//     ::w2: ::Coin,
//     ::x2: ::Coin,
//     ::y2: {int, int},
//     ::z2: b256,
//     ::w3: ::Fruit,
// ) {
//     let ::a: int[2] = __pre_state({1, 0});
//     let ::b: int = __pre_state({0});
//     let ::c: int = __pre_state({2});
//     let ::d: int = __pre_state({3, {42, 69}, 1});
//     let ::e: int = __pre_state({3, {69, 42}, 0});
//     let ::f: int = __pre_state_extern(0x0000000000000000000000000000000000000000000000000000000000000000, {0});
//     let ::g: int = __pre_state_extern(0x0000000000000000000000000000000000000000000000000000000000000000, {1});
//     let ::h: bool = ::Foo@[0x0000000000000000000000000000000000000000000000000000000000000000]::FooTest@[0x0000000000000000000000000000000000000000000000000000000000000000](::x, ::y);
//     let ::j: bool = ::LocalTest@[](::x, ::y);
//     let ::k: bool = ::LocalTest@[](::x, ::z);
//     let ::l: int = __pre_state({1, 1});
//     let ::m: int = __pre_state({1, 0});
//     constraint (::w == (::x + 1));
//     constraint (::w == (1 * ::x));
//     constraint (1 == ::x);
//     constraint (::x != 1);
//     constraint (::y && ::z);
//     constraint (::z && ::y);
//     constraint (::y || ::z);
//     constraint (::z || ::y);
//     constraint (::w == (1 - ::x));
//     constraint (::w == (::x - 1));
//     constraint (::w == (1 / ::x));
//     constraint (::w == ::x);
//     constraint (::w == (2 % ::x));
//     constraint (::w == (::x % 2));
//     constraint (1 <= ::x);
//     constraint (::x <= 1);
//     constraint (1 < ::x);
//     constraint (::x < 1);
//     constraint (1 >= ::x);
//     constraint (::x >= 1);
//     constraint (1 > ::x);
//     constraint (::x > 1);
//     constraint (::a == [1, ::x]);
//     constraint (::a == [::x, 1]);
//     constraint (::y2 == {1, ::x});
//     constraint (::y2 == {::x, 1});
//     constraint (::w == -::x);
//     constraint (::w == -::w);
//     constraint (::z == !::y);
//     constraint (::z == !::z);
//     constraint (::w == ::b');
//     constraint (::w == ::c');
//     constraint (::w == ::y2.0);
//     constraint (::w == ::y2.1);
//     constraint (1 == ::y);
//     constraint (1 == ::z);
//     constraint (::z2 == __this_address());
//     constraint (::z2 == __this_contract_address());
//     constraint (::z2 == __address_of("::LocalTest"));
//     constraint (::z2 == __address_of("::LocalTest2"));
//     constraint (::w2 == ::w2);
//     constraint (::w2 == ::x2);
//     constraint (0 == ::d);
//     constraint (0 == ::e);
//     constraint (0 == ::f);
//     constraint (0 == ::g);
//     constraint (::LocalTest@[](::x, ::y) == ::h);
//     constraint (::LocalTest2@[](::x, ::w) == ::j);
//     constraint (::LocalTest2@[](::x, ::w) == ::k);
//     constraint (::x == ((UnTag(::w2) == 0) ? 1 : ((UnTag(::w2) == 1) ? 10 : 25)));
//     constraint (::x == ((UnTag(::x2) == 0) ? 22 : ((UnTag(::x2) == 1) ? 23 : 24)));
//     constraint (0 == ::l);
//     constraint (0 == ::m);
//     constraint ((::w == 1) || (::w == 2));
//     constraint ((::x == 1) || (::x == 2));
//     constraint ((::w >= 1) && (::w <= 2));
//     constraint ((::w >= 2) && (::w <= 3));
//     constraint (::w3 == ::Fruit::Apples(::w));
//     constraint (::w3 == ::Fruit::Apples(::x));
//     constraint (::w == ((1 + ::x) - (::w + 1)));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
