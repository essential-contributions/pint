predicate Test {
    var a = 1 + 2;
    var b = 1 - 2;
    var c = (1 + 2) - 3 + 4 - (2 - 5);
}

// parsed <<<
// predicate ::Test {
//     var ::a;
//     var ::b;
//     var ::c;
//     constraint (::a == (1 + 2));
//     constraint (::b == (1 - 2));
//     constraint (::c == ((((1 + 2) - 3) + 4) - (2 - 5)));
// }
// >>>

// flattened <<<
// predicate ::Test {
//     var ::a: int;
//     var ::b: int;
//     var ::c: int;
//     constraint (::a == (1 + 2));
//     constraint (::b == (1 - 2));
//     constraint (::c == ((((1 + 2) - 3) + 4) - (2 - 5)));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>

// optimized <<<
// predicate ::Test {
//     var ::a: int;
//     var ::b: int;
//     var ::c: int;
//     constraint (::a == 3);
//     constraint (::b == -1);
//     constraint (::c == 7);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>

// warnings >>>
// <<<