union Coin = Penny | Dime | Quarter;
union Fruit = Apples(int) | Oranges(int);

storage {
    x1: int,
    x2: int[],
    x3: int[],
    x_map: ( { int, int } => { int, int } ),
}

interface Foo {
    storage {
        x2: int[],
        x3: int[],
        x4: int,
        x5: int,
    }

    predicate FooTest(foo_x: int, foo_y: bool);
}

predicate LocalTest(local_x: int, local_y: bool) {}

predicate Test(w: int, x: int, y: bool, z: bool, w2: Coin, x2: Coin) {
    let addr0 = 0x0000000000000000000000000000000000000000000000000000000000000000;

    // binary ops
    let a = x + 1;
    let b = 1 + x;

    let c = 1 * x;
    let d = x * 1;

    let f = 1 == x;
    let g = x == 1;

    let h = x != 1;
    let i = 1 != x;

    let j = y && z;
    let k = z && y;

    let l = y || z;
    let m = z || y;

    let n = 1 - x;
    let o = 1 - x;
    let p = x - 1; // should not be removed

    let q = 1 / x;
    let r = 1 / x;
    let s = x / 1; // should not be removed

    let t = 2 % x;
    let u = 2 % x;
    let v = x % 2; // should not be removed

    let a1 = 1 <= x;
    let b1 = 1 <= x;
    let c1 = x <= 1; // should not be removed

    let d1 = 1 < x;
    let e1 = 1 < x;
    let f1 = x < 1; // should not be removed

    let g1 = 1 >= x;
    let h1 = 1 >= x;
    let i1 = x >= 1; // should not be removed

    let j1 = 1 > x;
    let k1 = 1 > x;
    let l1 = x > 1; // should not be removed

    // arrays
    let m1 = [1, x];
    let n1 = [1, x];
    let o1 = [x, 1]; // should not be removed

    // tuples
    let p1 = { 1 , x };
    let q1 = { 1 , x };
    let r1 = { x , 1 }; // should not be removed

    // local storage access
    let s1 = storage::x1;
    let t1 = storage::x1;
    let u1 = storage::x1 + 1; // should not be removed

    // unary ops
    let v1 = -x;
    let a2 = -x;
    let b2 = -w; // should not be removed

    let c2 = !y;
    let d2 = !y;
    let e2 = !z; // should not be removed

    let f2 = s1';
    let g2 = s1';
    let h2 = u1'; // should not be removed

    // tuple field accesses
    let i2 = p1.0;
    let j2 = p1.0;
    let k2 = r1.0; // should not be removed

    // casts
    let l2 = y as int;
    let m2 = y as int;
    let n2 = z as int; // should not be removed

    // intrinsic calls
    let o2 = __vec_len(storage::x2);
    let p2 = __vec_len(storage::x2);
    let q2 = __vec_len(storage::x3); // should not be removed

    let r2 = __vec_len(Foo@[addr0]::storage::x2);
    let s2 = __vec_len(Foo@[addr0]::storage::x2);
    let t2 = __vec_len(Foo@[addr0]::storage::x3); // should not be removed
    
    // union variants
    let u2 = w2;
    let v2 = w2;
    let a3 = x2; // should not be removed

    // maps
    let b3 = storage::x_map[{42, 69}].1;
    let c3 = storage::x_map[{42, 69}].1;
    let d3 = storage::x_map[{69, 42}].0; // should not be removed

    // external storage access
    let e3 = Foo@[addr0]::storage::x4;
    let f3 = Foo@[addr0]::storage::x4;
    let g3 = Foo@[addr0]::storage::x5; // should not be removed

    // external predicate calls
    let h3 = Foo@[addr0]::FooTest@[addr0](x, y);
    let i3 = Foo@[addr0]::FooTest@[addr0](x, y);
    let j3 = Foo@[addr0]::FooTest@[addr0](x, z); // should not be removed

    // local predicate calls
    let k3 = LocalTest@[](x, y);
    let l3 = LocalTest@[](x, y);
    let m3 = LocalTest@[](x, z); // should not be removed

    // matches and union tags
    let n3 = match w2 {
        Coin::Penny => 1,
        Coin::Dime => 10,
        Coin::Quarter => 25,
    };
    let o3 = match w2 {
        Coin::Penny => 1,
        Coin::Dime => 10,
        Coin::Quarter => 25,
    };
    let p3 = match x2 {
        Coin::Penny => 22,
        Coin::Dime => 23,
        Coin::Quarter => 24,
    }; // should not be removed

    // indexes
    let q3 = storage::x2[w];
    let r3 = storage::x2[w];
    let s3 = storage::x2[x]; // should not be removed

    // ins
    let t3 = w in [1, 2];
    let u3 = w in [1, 2];
    let v3 = x in [1, 2]; // should not be removed

    // ranges
    let a4 = w in 1..2;
    let b4 = w in 1..2;
    let c4 = w in 2..3; // should not be removed

    // union values
    let d4 = Fruit::Apples(w);
    let e4 = Fruit::Apples(w);
    let f4 = Fruit::Apples(x); // should not be removed

    constraint a == 0;
    constraint b == 1;
    constraint c == 2;
    constraint d == 3;
    constraint f == (1 > x);
    constraint g == (2 > x);
    constraint h == (3 > x);
    constraint i == (4 > x);
    constraint j == (5 > x);
    constraint k == (6 > x);
    constraint l == (7 > x);
    constraint m == (8 > x);
    constraint n == 4;
    constraint o == 5;
    constraint p == 6;
    constraint q == 7;
    constraint r == 8;
    constraint s == 9;
    constraint t == 10;
    constraint u == 11;
    constraint v == 12;
    constraint a1 == (9 > x);
    constraint b1 == (10 > x);
    constraint c1 == (11 > x);
    constraint d1 == (12 > x);
    constraint e1 == (13 > x);
    constraint f1 == (14 > x);
    constraint g1 == (15 > x);
    constraint h1 == (16 > x);
    constraint i1 == (17 > x);
    constraint j1 == (18 > x);
    constraint k1 == (19 > x);
    constraint l1 == (20 > x);
    constraint m1 == [1, 1];
    constraint n1 == [1, 2];
    constraint o1 == [1, 3];
    constraint p1 == { 1, 1 };
    constraint q1 == { 1, 2 };
    constraint r1 == { 1, 3 };
    constraint s1 == 13;
    constraint t1 == 14;
    constraint u1 == 15;
    constraint v1 == -1;
    constraint a2 == -2;
    constraint b2 == -3;
    constraint c2 == (21 > x);
    constraint d2 == (22 > x);
    constraint e2 == (23 > x);
    constraint f2 == 16;
    constraint g2 == 17;
    constraint h2 == 18;
    constraint i2 == 19;
    constraint j2 == 20;
    constraint k2 == 21;
    constraint l2 == 22;
    constraint m2 == 23;
    constraint n2 == 24;
    constraint o2 == 25;
    constraint p2 == 26;
    constraint q2 == 27;
    constraint r2 == 28;
    constraint s2 == 29;
    constraint t2 == 30;
    constraint u2 == Coin::Penny;
    constraint v2 == Coin::Dime;
    constraint a3 == Coin::Quarter;
    constraint b3' == 31;
    constraint c3' == 32;
    constraint d3' == 33;
    constraint e3 == 34;
    constraint f3 == 35;
    constraint g3 == 36;
    constraint h3 == Foo@[addr0]::FooTest@[addr0](0, false);
    constraint i3 == Foo@[addr0]::FooTest@[addr0](1, false);
    constraint j3 == Foo@[addr0]::FooTest@[addr0](2, false);
    constraint k3 == LocalTest@[](3, false);
    constraint l3 == LocalTest@[](4, false);
    constraint m3 == LocalTest@[](5, false);
    constraint n3 == 37;
    constraint o3 == 38;
    constraint p3 == 39;
    constraint q3 == 40;
    constraint r3 == 41;
    constraint s3 == 42;
    constraint t3 == y;
    constraint u3 == z;
    constraint v3 == y;
    constraint a4 == z;
    constraint b4 == y;
    constraint c4 == z;
    constraint d4 == Fruit::Apples(0);
    constraint e4 == Fruit::Apples(1);
    constraint f4 == Fruit::Apples(2);
}

// parsed <<<
// union ::Coin = Penny | Dime | Quarter;
// union ::Fruit = Apples(int) | Oranges(int);
// storage {
//     x1: int,
//     x2: int[],
//     x3: int[],
//     x_map: ( {int, int} => {int, int} ),
// }
// interface ::Foo {
//     storage {
//         x2: int[],
//         x3: int[],
//         x4: int,
//         x5: int,
//     }
//     predicate FooTest (
//         foo_x: int,
//         foo_y: bool,
//     );
// }
//
// predicate ::LocalTest(
//     ::local_x: int,
//     ::local_y: bool,
// ) {
// }
//
// predicate ::Test(
//     ::w: int,
//     ::x: int,
//     ::y: bool,
//     ::z: bool,
//     ::w2: ::Coin,
//     ::x2: ::Coin,
// ) {
//     let ::addr0 = 0x0000000000000000000000000000000000000000000000000000000000000000;
//     let ::a = (::x + 1);
//     let ::b = (1 + ::x);
//     let ::c = (1 * ::x);
//     let ::d = (::x * 1);
//     let ::f = (1 == ::x);
//     let ::g = (::x == 1);
//     let ::h = (::x != 1);
//     let ::i = (1 != ::x);
//     let ::j = (::y && ::z);
//     let ::k = (::z && ::y);
//     let ::l = (::y || ::z);
//     let ::m = (::z || ::y);
//     let ::n = (1 - ::x);
//     let ::o = (1 - ::x);
//     let ::p = (::x - 1);
//     let ::q = (1 / ::x);
//     let ::r = (1 / ::x);
//     let ::s = (::x / 1);
//     let ::t = (2 % ::x);
//     let ::u = (2 % ::x);
//     let ::v = (::x % 2);
//     let ::a1 = (1 <= ::x);
//     let ::b1 = (1 <= ::x);
//     let ::c1 = (::x <= 1);
//     let ::d1 = (1 < ::x);
//     let ::e1 = (1 < ::x);
//     let ::f1 = (::x < 1);
//     let ::g1 = (1 >= ::x);
//     let ::h1 = (1 >= ::x);
//     let ::i1 = (::x >= 1);
//     let ::j1 = (1 > ::x);
//     let ::k1 = (1 > ::x);
//     let ::l1 = (::x > 1);
//     let ::m1 = [1, ::x];
//     let ::n1 = [1, ::x];
//     let ::o1 = [::x, 1];
//     let ::p1 = {1, ::x};
//     let ::q1 = {1, ::x};
//     let ::r1 = {::x, 1};
//     let ::s1 = storage::x1;
//     let ::t1 = storage::x1;
//     let ::u1 = (storage::x1 + 1);
//     let ::v1 = -::x;
//     let ::a2 = -::x;
//     let ::b2 = -::w;
//     let ::c2 = !::y;
//     let ::d2 = !::y;
//     let ::e2 = !::z;
//     let ::f2 = ::s1';
//     let ::g2 = ::s1';
//     let ::h2 = ::u1';
//     let ::i2 = ::p1.0;
//     let ::j2 = ::p1.0;
//     let ::k2 = ::r1.0;
//     let ::l2 = ::y as int;
//     let ::m2 = ::y as int;
//     let ::n2 = ::z as int;
//     let ::o2 = __vec_len(storage::x2);
//     let ::p2 = __vec_len(storage::x2);
//     let ::q2 = __vec_len(storage::x3);
//     let ::r2 = __vec_len(::Foo@[::addr0]::storage::x2);
//     let ::s2 = __vec_len(::Foo@[::addr0]::storage::x2);
//     let ::t2 = __vec_len(::Foo@[::addr0]::storage::x3);
//     let ::u2 = ::w2;
//     let ::v2 = ::w2;
//     let ::a3 = ::x2;
//     let ::b3 = storage::x_map[{42, 69}].1;
//     let ::c3 = storage::x_map[{42, 69}].1;
//     let ::d3 = storage::x_map[{69, 42}].0;
//     let ::e3 = ::Foo@[::addr0]::storage::x4;
//     let ::f3 = ::Foo@[::addr0]::storage::x4;
//     let ::g3 = ::Foo@[::addr0]::storage::x5;
//     let ::h3 = ::Foo@[::addr0]::FooTest@[::addr0](::x, ::y);
//     let ::i3 = ::Foo@[::addr0]::FooTest@[::addr0](::x, ::y);
//     let ::j3 = ::Foo@[::addr0]::FooTest@[::addr0](::x, ::z);
//     let ::k3 = ::LocalTest@[](::x, ::y);
//     let ::l3 = ::LocalTest@[](::x, ::y);
//     let ::m3 = ::LocalTest@[](::x, ::z);
//     let ::n3 = match ::w2 { ::Coin::Penny => 1, ::Coin::Dime => 10, ::Coin::Quarter => 25 };
//     let ::o3 = match ::w2 { ::Coin::Penny => 1, ::Coin::Dime => 10, ::Coin::Quarter => 25 };
//     let ::p3 = match ::x2 { ::Coin::Penny => 22, ::Coin::Dime => 23, ::Coin::Quarter => 24 };
//     let ::q3 = storage::x2[::w];
//     let ::r3 = storage::x2[::w];
//     let ::s3 = storage::x2[::x];
//     let ::t3 = ::w in [1, 2];
//     let ::u3 = ::w in [1, 2];
//     let ::v3 = ::x in [1, 2];
//     let ::a4 = ::w in 1..2;
//     let ::b4 = ::w in 1..2;
//     let ::c4 = ::w in 2..3;
//     let ::d4 = ::Fruit::Apples(::w);
//     let ::e4 = ::Fruit::Apples(::w);
//     let ::f4 = ::Fruit::Apples(::x);
//     constraint (::a == 0);
//     constraint (::b == 1);
//     constraint (::c == 2);
//     constraint (::d == 3);
//     constraint (::f == (1 > ::x));
//     constraint (::g == (2 > ::x));
//     constraint (::h == (3 > ::x));
//     constraint (::i == (4 > ::x));
//     constraint (::j == (5 > ::x));
//     constraint (::k == (6 > ::x));
//     constraint (::l == (7 > ::x));
//     constraint (::m == (8 > ::x));
//     constraint (::n == 4);
//     constraint (::o == 5);
//     constraint (::p == 6);
//     constraint (::q == 7);
//     constraint (::r == 8);
//     constraint (::s == 9);
//     constraint (::t == 10);
//     constraint (::u == 11);
//     constraint (::v == 12);
//     constraint (::a1 == (9 > ::x));
//     constraint (::b1 == (10 > ::x));
//     constraint (::c1 == (11 > ::x));
//     constraint (::d1 == (12 > ::x));
//     constraint (::e1 == (13 > ::x));
//     constraint (::f1 == (14 > ::x));
//     constraint (::g1 == (15 > ::x));
//     constraint (::h1 == (16 > ::x));
//     constraint (::i1 == (17 > ::x));
//     constraint (::j1 == (18 > ::x));
//     constraint (::k1 == (19 > ::x));
//     constraint (::l1 == (20 > ::x));
//     constraint (::m1 == [1, 1]);
//     constraint (::n1 == [1, 2]);
//     constraint (::o1 == [1, 3]);
//     constraint (::p1 == {1, 1});
//     constraint (::q1 == {1, 2});
//     constraint (::r1 == {1, 3});
//     constraint (::s1 == 13);
//     constraint (::t1 == 14);
//     constraint (::u1 == 15);
//     constraint (::v1 == -1);
//     constraint (::a2 == -2);
//     constraint (::b2 == -3);
//     constraint (::c2 == (21 > ::x));
//     constraint (::d2 == (22 > ::x));
//     constraint (::e2 == (23 > ::x));
//     constraint (::f2 == 16);
//     constraint (::g2 == 17);
//     constraint (::h2 == 18);
//     constraint (::i2 == 19);
//     constraint (::j2 == 20);
//     constraint (::k2 == 21);
//     constraint (::l2 == 22);
//     constraint (::m2 == 23);
//     constraint (::n2 == 24);
//     constraint (::o2 == 25);
//     constraint (::p2 == 26);
//     constraint (::q2 == 27);
//     constraint (::r2 == 28);
//     constraint (::s2 == 29);
//     constraint (::t2 == 30);
//     constraint (::u2 == ::Coin::Penny);
//     constraint (::v2 == ::Coin::Dime);
//     constraint (::a3 == ::Coin::Quarter);
//     constraint (::b3' == 31);
//     constraint (::c3' == 32);
//     constraint (::d3' == 33);
//     constraint (::e3 == 34);
//     constraint (::f3 == 35);
//     constraint (::g3 == 36);
//     constraint (::h3 == ::Foo@[::addr0]::FooTest@[::addr0](0, false));
//     constraint (::i3 == ::Foo@[::addr0]::FooTest@[::addr0](1, false));
//     constraint (::j3 == ::Foo@[::addr0]::FooTest@[::addr0](2, false));
//     constraint (::k3 == ::LocalTest@[](3, false));
//     constraint (::l3 == ::LocalTest@[](4, false));
//     constraint (::m3 == ::LocalTest@[](5, false));
//     constraint (::n3 == 37);
//     constraint (::o3 == 38);
//     constraint (::p3 == 39);
//     constraint (::q3 == 40);
//     constraint (::r3 == 41);
//     constraint (::s3 == 42);
//     constraint (::t3 == ::y);
//     constraint (::u3 == ::z);
//     constraint (::v3 == ::y);
//     constraint (::a4 == ::z);
//     constraint (::b4 == ::y);
//     constraint (::c4 == ::z);
//     constraint (::d4 == ::Fruit::Apples(0));
//     constraint (::e4 == ::Fruit::Apples(1));
//     constraint (::f4 == ::Fruit::Apples(2));
// }
// >>>

// flattened <<<
// union ::Coin = Penny | Dime | Quarter;
// union ::Fruit = Apples(int) | Oranges(int);
// storage {
//     x1: int,
//     x2: int[],
//     x3: int[],
//     x_map: ( {int, int} => {int, int} ),
// }
// interface ::Foo {
//     storage {
//         x2: int[],
//         x3: int[],
//         x4: int,
//         x5: int,
//     }
//     predicate FooTest (
//         foo_x: int,
//         foo_y: bool,
//     );
// }
//
// predicate ::LocalTest(
//     ::local_x: int,
//     ::local_y: bool,
// ) {
//     constraint __eq_set(__mut_keys(), {0});
// }
//
// predicate ::Test(
//     ::w: int,
//     ::x: int,
//     ::y: bool,
//     ::z: bool,
//     ::w2: ::Coin,
//     ::x2: ::Coin,
// ) {
//     let ::addr0: b256 = 0x0000000000000000000000000000000000000000000000000000000000000000;
//     let ::a: int = (::x + 1);
//     let ::b: int = (1 + ::x);
//     let ::c: int = (1 * ::x);
//     let ::d: int = (::x * 1);
//     let ::f: bool = (1 == ::x);
//     let ::g: bool = (::x == 1);
//     let ::h: bool = (::x != 1);
//     let ::i: bool = (1 != ::x);
//     let ::j: bool = (::y && ::z);
//     let ::k: bool = (::z && ::y);
//     let ::l: bool = (::y || ::z);
//     let ::m: bool = (::z || ::y);
//     let ::n: int = (1 - ::x);
//     let ::o: int = (1 - ::x);
//     let ::p: int = (::x - 1);
//     let ::q: int = (1 / ::x);
//     let ::r: int = (1 / ::x);
//     let ::s: int = (::x / 1);
//     let ::t: int = (2 % ::x);
//     let ::u: int = (2 % ::x);
//     let ::v: int = (::x % 2);
//     let ::a1: bool = (1 <= ::x);
//     let ::b1: bool = (1 <= ::x);
//     let ::c1: bool = (::x <= 1);
//     let ::d1: bool = (1 < ::x);
//     let ::e1: bool = (1 < ::x);
//     let ::f1: bool = (::x < 1);
//     let ::g1: bool = (1 >= ::x);
//     let ::h1: bool = (1 >= ::x);
//     let ::i1: bool = (::x >= 1);
//     let ::j1: bool = (1 > ::x);
//     let ::k1: bool = (1 > ::x);
//     let ::l1: bool = (::x > 1);
//     let ::m1: int[2] = [1, ::x];
//     let ::n1: int[2] = [1, ::x];
//     let ::o1: int[2] = [::x, 1];
//     let ::p1: {int, int} = {1, ::x};
//     let ::q1: {int, int} = {1, ::x};
//     let ::r1: {int, int} = {::x, 1};
//     let ::s1: int = __storage_get({0});
//     let ::t1: int = __storage_get({0});
//     let ::u1: int = (__storage_get({0}) + 1);
//     let ::v1: int = -::x;
//     let ::a2: int = -::x;
//     let ::b2: int = -::w;
//     let ::c2: bool = !::y;
//     let ::d2: bool = !::y;
//     let ::e2: bool = !::z;
//     let ::f2: int = ::s1';
//     let ::g2: int = ::s1';
//     let ::h2: int = ::u1';
//     let ::i2: int = ::p1.0;
//     let ::j2: int = ::p1.0;
//     let ::k2: int = ::r1.0;
//     let ::l2: int = ::y;
//     let ::m2: int = ::y;
//     let ::n2: int = ::z;
//     let ::o2: int = __storage_get({1});
//     let ::p2: int = __storage_get({1});
//     let ::q2: int = __storage_get({2});
//     let ::r2: int = __storage_get_extern(::addr0, {0});
//     let ::s2: int = __storage_get_extern(::addr0, {0});
//     let ::t2: int = __storage_get_extern(::addr0, {1});
//     let ::u2: ::Coin = ::w2;
//     let ::v2: ::Coin = ::w2;
//     let ::a3: ::Coin = ::x2;
//     let ::b3: int = __storage_get({3, {42, 69}, (0 + 1)});
//     let ::c3: int = __storage_get({3, {42, 69}, (0 + 1)});
//     let ::d3: int = __storage_get({3, {69, 42}, (0 + 0)});
//     let ::e3: int = __storage_get_extern(::addr0, {2});
//     let ::f3: int = __storage_get_extern(::addr0, {2});
//     let ::g3: int = __storage_get_extern(::addr0, {3});
//     let ::h3: bool = ::Foo@[::addr0]::FooTest@[::addr0](::x, ::y);
//     let ::i3: bool = ::Foo@[::addr0]::FooTest@[::addr0](::x, ::y);
//     let ::j3: bool = ::Foo@[::addr0]::FooTest@[::addr0](::x, ::z);
//     let ::k3: bool = ::LocalTest@[](::x, ::y);
//     let ::l3: bool = ::LocalTest@[](::x, ::y);
//     let ::m3: bool = ::LocalTest@[](::x, ::z);
//     let ::n3: int = ((UnTag(::w2) == 0) ? 1 : ((UnTag(::w2) == 1) ? 10 : 25));
//     let ::o3: int = ((UnTag(::w2) == 0) ? 1 : ((UnTag(::w2) == 1) ? 10 : 25));
//     let ::p3: int = ((UnTag(::x2) == 0) ? 22 : ((UnTag(::x2) == 1) ? 23 : 24));
//     let ::q3: int = __storage_get({1, ::w});
//     let ::r3: int = __storage_get({1, ::w});
//     let ::s3: int = __storage_get({1, ::x});
//     let ::t3: bool = ((::w == 1) || (::w == 2));
//     let ::u3: bool = ((::w == 1) || (::w == 2));
//     let ::v3: bool = ((::x == 1) || (::x == 2));
//     let ::a4: bool = ((::w >= 1) && (::w <= 2));
//     let ::b4: bool = ((::w >= 1) && (::w <= 2));
//     let ::c4: bool = ((::w >= 2) && (::w <= 3));
//     let ::d4: ::Fruit = ::Fruit::Apples(::w);
//     let ::e4: ::Fruit = ::Fruit::Apples(::w);
//     let ::f4: ::Fruit = ::Fruit::Apples(::x);
//     let __x2_len: int = __storage_get({1});
//     constraint (::a == 0);
//     constraint (::b == 1);
//     constraint (::c == 2);
//     constraint (::d == 3);
//     constraint (::f == (1 > ::x));
//     constraint (::g == (2 > ::x));
//     constraint (::h == (3 > ::x));
//     constraint (::i == (4 > ::x));
//     constraint (::j == (5 > ::x));
//     constraint (::k == (6 > ::x));
//     constraint (::l == (7 > ::x));
//     constraint (::m == (8 > ::x));
//     constraint (::n == 4);
//     constraint (::o == 5);
//     constraint (::p == 6);
//     constraint (::q == 7);
//     constraint (::r == 8);
//     constraint (::s == 9);
//     constraint (::t == 10);
//     constraint (::u == 11);
//     constraint (::v == 12);
//     constraint (::a1 == (9 > ::x));
//     constraint (::b1 == (10 > ::x));
//     constraint (::c1 == (11 > ::x));
//     constraint (::d1 == (12 > ::x));
//     constraint (::e1 == (13 > ::x));
//     constraint (::f1 == (14 > ::x));
//     constraint (::g1 == (15 > ::x));
//     constraint (::h1 == (16 > ::x));
//     constraint (::i1 == (17 > ::x));
//     constraint (::j1 == (18 > ::x));
//     constraint (::k1 == (19 > ::x));
//     constraint (::l1 == (20 > ::x));
//     constraint (::m1 == [1, 1]);
//     constraint (::n1 == [1, 2]);
//     constraint (::o1 == [1, 3]);
//     constraint (::p1 == {1, 1});
//     constraint (::q1 == {1, 2});
//     constraint (::r1 == {1, 3});
//     constraint (::s1 == 13);
//     constraint (::t1 == 14);
//     constraint (::u1 == 15);
//     constraint (::v1 == -1);
//     constraint (::a2 == -2);
//     constraint (::b2 == -3);
//     constraint (::c2 == (21 > ::x));
//     constraint (::d2 == (22 > ::x));
//     constraint (::e2 == (23 > ::x));
//     constraint (::f2 == 16);
//     constraint (::g2 == 17);
//     constraint (::h2 == 18);
//     constraint (::i2 == 19);
//     constraint (::j2 == 20);
//     constraint (::k2 == 21);
//     constraint (::l2 == 22);
//     constraint (::m2 == 23);
//     constraint (::n2 == 24);
//     constraint (::o2 == 25);
//     constraint (::p2 == 26);
//     constraint (::q2 == 27);
//     constraint (::r2 == 28);
//     constraint (::s2 == 29);
//     constraint (::t2 == 30);
//     constraint (::u2 == ::Coin::Penny);
//     constraint (::v2 == ::Coin::Dime);
//     constraint (::a3 == ::Coin::Quarter);
//     constraint (::b3' == 31);
//     constraint (::c3' == 32);
//     constraint (::d3' == 33);
//     constraint (::e3 == 34);
//     constraint (::f3 == 35);
//     constraint (::g3 == 36);
//     constraint (::h3 == ::Foo@[::addr0]::FooTest@[::addr0](0, false));
//     constraint (::i3 == ::Foo@[::addr0]::FooTest@[::addr0](1, false));
//     constraint (::j3 == ::Foo@[::addr0]::FooTest@[::addr0](2, false));
//     constraint (::k3 == ::LocalTest@[](3, false));
//     constraint (::l3 == ::LocalTest@[](4, false));
//     constraint (::m3 == ::LocalTest@[](5, false));
//     constraint (::n3 == 37);
//     constraint (::o3 == 38);
//     constraint (::p3 == 39);
//     constraint (::q3 == 40);
//     constraint (::r3 == 41);
//     constraint (::s3 == 42);
//     constraint (::t3 == ::y);
//     constraint (::u3 == ::z);
//     constraint (::v3 == ::y);
//     constraint (::a4 == ::z);
//     constraint (::b4 == ::y);
//     constraint (::c4 == ::z);
//     constraint (::d4 == ::Fruit::Apples(0));
//     constraint (::e4 == ::Fruit::Apples(1));
//     constraint (::f4 == ::Fruit::Apples(2));
//     constraint (::x < __x2_len);
//     constraint (::w < __x2_len);
//     constraint (::w < __x2_len);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>

// optimized <<<
// union ::Coin = Penny | Dime | Quarter;
// union ::Fruit = Apples(int) | Oranges(int);
// storage {
//     x1: int,
//     x2: int[],
//     x3: int[],
//     x_map: ( {int, int} => {int, int} ),
// }
// interface ::Foo {
//     storage {
//         x2: int[],
//         x3: int[],
//         x4: int,
//         x5: int,
//     }
//     predicate FooTest (
//         foo_x: int,
//         foo_y: bool,
//     );
// }
//
// predicate ::LocalTest(
//     ::local_x: int,
//     ::local_y: bool,
// ) {
//     constraint __eq_set(__mut_keys(), {0});
// }
//
// predicate ::Test(
//     ::w: int,
//     ::x: int,
//     ::y: bool,
//     ::z: bool,
//     ::w2: ::Coin,
//     ::x2: ::Coin,
// ) {
//     let ::a: int = (::x + 1);
//     let ::c: int = (1 * ::x);
//     let ::f: bool = (1 == ::x);
//     let ::h: bool = (::x != 1);
//     let ::j: bool = (::y && ::z);
//     let ::l: bool = (::y || ::z);
//     let ::n: int = (1 - ::x);
//     let ::p: int = (::x - 1);
//     let ::q: int = (1 / ::x);
//     let ::s: int = ::x;
//     let ::t: int = (2 % ::x);
//     let ::v: int = (::x % 2);
//     let ::a1: bool = (1 <= ::x);
//     let ::c1: bool = (::x <= 1);
//     let ::d1: bool = (1 < ::x);
//     let ::f1: bool = (::x < 1);
//     let ::g1: bool = (1 >= ::x);
//     let ::i1: bool = (::x >= 1);
//     let ::j1: bool = (1 > ::x);
//     let ::l1: bool = (::x > 1);
//     let ::m1: int[2] = [1, ::x];
//     let ::o1: int[2] = [::x, 1];
//     let ::p1: {int, int} = {1, ::x};
//     let ::r1: {int, int} = {::x, 1};
//     let ::s1: int = __storage_get({0});
//     let ::u1: int = (__storage_get({0}) + 1);
//     let ::v1: int = -::x;
//     let ::b2: int = -::w;
//     let ::c2: bool = !::y;
//     let ::e2: bool = !::z;
//     let ::f2: int = ::s1';
//     let ::h2: int = ::u1';
//     let ::i2: int = ::p1.0;
//     let ::k2: int = ::r1.0;
//     let ::l2: int = ::y;
//     let ::n2: int = ::z;
//     let ::o2: int = __storage_get({1});
//     let ::q2: int = __storage_get({2});
//     let ::r2: int = __storage_get_extern(0x0000000000000000000000000000000000000000000000000000000000000000, {0});
//     let ::t2: int = __storage_get_extern(0x0000000000000000000000000000000000000000000000000000000000000000, {1});
//     let ::u2: ::Coin = ::w2;
//     let ::a3: ::Coin = ::x2;
//     let ::b3: int = __storage_get({3, {42, 69}, 1});
//     let ::d3: int = __storage_get({3, {69, 42}, 0});
//     let ::e3: int = __storage_get_extern(0x0000000000000000000000000000000000000000000000000000000000000000, {2});
//     let ::g3: int = __storage_get_extern(0x0000000000000000000000000000000000000000000000000000000000000000, {3});
//     let ::h3: bool = ::Foo@[0x0000000000000000000000000000000000000000000000000000000000000000]::FooTest@[0x0000000000000000000000000000000000000000000000000000000000000000](::x, ::y);
//     let ::j3: bool = ::Foo@[0x0000000000000000000000000000000000000000000000000000000000000000]::FooTest@[0x0000000000000000000000000000000000000000000000000000000000000000](::x, ::z);
//     let ::k3: bool = ::LocalTest@[](::x, ::y);
//     let ::m3: bool = ::LocalTest@[](::x, ::z);
//     let ::n3: int = ((UnTag(::w2) == 0) ? 1 : ((UnTag(::w2) == 1) ? 10 : 25));
//     let ::p3: int = ((UnTag(::x2) == 0) ? 22 : ((UnTag(::x2) == 1) ? 23 : 24));
//     let ::q3: int = __storage_get({1, ::w});
//     let ::s3: int = __storage_get({1, ::x});
//     let ::t3: bool = ((::w == 1) || (::w == 2));
//     let ::v3: bool = ((::x == 1) || (::x == 2));
//     let ::a4: bool = ((::w >= 1) && (::w <= 2));
//     let ::c4: bool = ((::w >= 2) && (::w <= 3));
//     let ::d4: ::Fruit = ::Fruit::Apples(::w);
//     let ::f4: ::Fruit = ::Fruit::Apples(::x);
//     constraint (::a == 0);
//     constraint (::a == 1);
//     constraint (::c == 2);
//     constraint (::c == 3);
//     constraint (::f == (1 > ::x));
//     constraint (::f == (2 > ::x));
//     constraint (::h == (3 > ::x));
//     constraint (::h == (4 > ::x));
//     constraint (::j == (5 > ::x));
//     constraint (::j == (6 > ::x));
//     constraint (::l == (7 > ::x));
//     constraint (::l == (8 > ::x));
//     constraint (::n == 4);
//     constraint (::n == 5);
//     constraint (::p == 6);
//     constraint (::q == 7);
//     constraint (::q == 8);
//     constraint (::s == 9);
//     constraint (::t == 10);
//     constraint (::t == 11);
//     constraint (::v == 12);
//     constraint (::a1 == (9 > ::x));
//     constraint (::a1 == (10 > ::x));
//     constraint (::c1 == (11 > ::x));
//     constraint (::d1 == (12 > ::x));
//     constraint (::d1 == (13 > ::x));
//     constraint (::f1 == (14 > ::x));
//     constraint (::g1 == (15 > ::x));
//     constraint (::g1 == (16 > ::x));
//     constraint (::i1 == (17 > ::x));
//     constraint (::j1 == (18 > ::x));
//     constraint (::j1 == (19 > ::x));
//     constraint (::l1 == (20 > ::x));
//     constraint (::m1 == [1, 1]);
//     constraint (::m1 == [1, 2]);
//     constraint (::o1 == [1, 3]);
//     constraint (::p1 == {1, 1});
//     constraint (::p1 == {1, 2});
//     constraint (::r1 == {1, 3});
//     constraint (::s1 == 13);
//     constraint (::s1 == 14);
//     constraint (::u1 == 15);
//     constraint (::v1 == -1);
//     constraint (::v1 == -2);
//     constraint (::b2 == -3);
//     constraint (::c2 == (21 > ::x));
//     constraint (::c2 == (22 > ::x));
//     constraint (::e2 == (23 > ::x));
//     constraint (::f2 == 16);
//     constraint (::f2 == 17);
//     constraint (::h2 == 18);
//     constraint (::i2 == 19);
//     constraint (::i2 == 20);
//     constraint (::k2 == 21);
//     constraint (::l2 == 22);
//     constraint (::l2 == 23);
//     constraint (::n2 == 24);
//     constraint (::o2 == 25);
//     constraint (::o2 == 26);
//     constraint (::q2 == 27);
//     constraint (::r2 == 28);
//     constraint (::r2 == 29);
//     constraint (::t2 == 30);
//     constraint (::u2 == ::Coin::Penny);
//     constraint (::u2 == ::Coin::Dime);
//     constraint (::a3 == ::Coin::Quarter);
//     constraint (::b3' == 31);
//     constraint (::b3' == 32);
//     constraint (::d3' == 33);
//     constraint (::e3 == 34);
//     constraint (::e3 == 35);
//     constraint (::g3 == 36);
//     constraint (::h3 == ::Foo@[0x0000000000000000000000000000000000000000000000000000000000000000]::FooTest@[0x0000000000000000000000000000000000000000000000000000000000000000](0, false));
//     constraint (::h3 == ::Foo@[0x0000000000000000000000000000000000000000000000000000000000000000]::FooTest@[0x0000000000000000000000000000000000000000000000000000000000000000](1, false));
//     constraint (::j3 == ::Foo@[0x0000000000000000000000000000000000000000000000000000000000000000]::FooTest@[0x0000000000000000000000000000000000000000000000000000000000000000](2, false));
//     constraint (::k3 == ::LocalTest@[](3, false));
//     constraint (::k3 == ::LocalTest@[](4, false));
//     constraint (::m3 == ::LocalTest@[](5, false));
//     constraint (::n3 == 37);
//     constraint (::n3 == 38);
//     constraint (::p3 == 39);
//     constraint (::q3 == 40);
//     constraint (::q3 == 41);
//     constraint (::s3 == 42);
//     constraint (::t3 == ::y);
//     constraint (::t3 == ::z);
//     constraint (::v3 == ::y);
//     constraint (::a4 == ::z);
//     constraint (::a4 == ::y);
//     constraint (::c4 == ::z);
//     constraint (::d4 == ::Fruit::Apples(0));
//     constraint (::d4 == ::Fruit::Apples(1));
//     constraint (::f4 == ::Fruit::Apples(2));
//     constraint (::x < ::o2);
//     constraint (::w < ::o2);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
