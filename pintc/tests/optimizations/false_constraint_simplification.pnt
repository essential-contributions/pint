predicate Test(x: int, y: int) {
    constraint x == 1;

    // non-trivial that should be simplified when a constraint resolves to false
    constraint x < y;
    constraint x == x;

    // resolves to false
    constraint 1 + 2 < 3;
    constraint (false && (::x == ::y));
    constraint ((::x == ::y) && false);

    if true {
        // non-trivial
        constraint y == 3;

        // resolves to false
        constraint 3 < 2;
    }
}

// parsed <<<
// predicate ::Test(
//     ::x: int,
//     ::y: int,
// ) {
//     constraint (::x == 1);
//     constraint (::x < ::y);
//     constraint (::x == ::x);
//     constraint ((1 + 2) < 3);
//     constraint (false && (::x == ::y));
//     constraint ((::x == ::y) && false);
//     if true {
//         constraint (::y == 3)
//         constraint (3 < 2)
//     }
// }
// >>>

// flattened <<<
// predicate ::Test(
//     ::x: int,
//     ::y: int,
// ) {
//     constraint (::x == 1);
//     constraint (::x < ::y);
//     constraint (::x == ::x);
//     constraint ((1 + 2) < 3);
//     constraint (false && (::x == ::y));
//     constraint ((::x == ::y) && false);
//     constraint (!true || (::y == 3));
//     constraint (!true || (3 < 2));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>

// optimized <<<
// predicate ::Test(
//     ::x: int,
//     ::y: int,
// ) {
//     constraint false;
// }
// >>>

// warnings <<<
// constraint is always `false`
// @213..233: this constraint always evaluates to `false` and can never be satisfied
// if this is intentional, consider removing the containing predicate because its constraints can never be satisfied
// constraint is always `false`
// @239..273: this constraint always evaluates to `false` and can never be satisfied
// if this is intentional, consider removing the containing predicate because its constraints can never be satisfied
// constraint is always `false`
// @279..313: this constraint always evaluates to `false` and can never be satisfied
// if this is intentional, consider removing the containing predicate because its constraints can never be satisfied
// constraint is always `false`
// @418..434: this constraint always evaluates to `false` and can never be satisfied
// if this is intentional, consider removing the containing predicate because its constraints can never be satisfied
// >>>
