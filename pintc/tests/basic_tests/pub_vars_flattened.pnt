enum MyEnum = A | B;
type MyType = MyEnum;

predicate Foo {
    pub var x1: bool;
    pub var x2: int;
    pub var x3: b256;
    pub var x5: { bool, int };
    pub var x6: int[5];

    pub var y1: bool = true;
    pub var y2: int = 5;
    pub var y3: b256 = 0x0000111100001111000011110000111100001111000011110000111100001111;
    pub var y5: { bool, int } = { true, 2 };
    pub var y6: int[5] = [ 1, 2, 3, 4, 5];

    pub var z1 = true;
    pub var z2 = 5;
    pub var z3 = 0x0000111100001111000011110000111100001111000011110000111100001111;
    pub var z5 = { true, 2 };
    pub var z6 = [ 1, 2, 3, 4, 5];
}

// parsed <<<
// enum ::MyEnum = A | B;
// type ::MyType = ::MyEnum;
// 
// predicate ::Foo {
//     pub var ::x1: bool;
//     pub var ::x2: int;
//     pub var ::x3: b256;
//     pub var ::x5: {bool, int};
//     pub var ::x6: int[5];
//     pub var ::y1: bool;
//     pub var ::y2: int;
//     pub var ::y3: b256;
//     pub var ::y5: {bool, int};
//     pub var ::y6: int[5];
//     pub var ::z1;
//     pub var ::z2;
//     pub var ::z3;
//     pub var ::z5;
//     pub var ::z6;
//     constraint (::y1 == true);
//     constraint (::y2 == 5);
//     constraint (::y3 == 0x0000111100001111000011110000111100001111000011110000111100001111);
//     constraint (::y5 == {true, 2});
//     constraint (::y6 == [1, 2, 3, 4, 5]);
//     constraint (::z1 == true);
//     constraint (::z2 == 5);
//     constraint (::z3 == 0x0000111100001111000011110000111100001111000011110000111100001111);
//     constraint (::z5 == {true, 2});
//     constraint (::z6 == [1, 2, 3, 4, 5]);
// }
// >>>

// flattened <<<
// enum ::MyEnum = A | B;
// type ::MyType = ::MyEnum;
// 
// predicate ::Foo {
//     pub var ::x1: bool;
//     pub var ::x2: int;
//     pub var ::x3: b256;
//     pub var ::x5: {bool, int};
//     pub var ::x6: int[5];
//     pub var ::y1: bool;
//     pub var ::y2: int;
//     pub var ::y3: b256;
//     pub var ::y5: {bool, int};
//     pub var ::y6: int[5];
//     pub var ::z1: bool;
//     pub var ::z2: int;
//     pub var ::z3: b256;
//     pub var ::z5: {bool, int};
//     pub var ::z6: int[5];
//     constraint (__pub_var(__this_pathway(), {5}) == true);
//     constraint (__pub_var(__this_pathway(), {6}) == 5);
//     constraint (__pub_var(__this_pathway(), {7}) == 0x0000111100001111000011110000111100001111000011110000111100001111);
//     constraint (__pub_var(__this_pathway(), {8}) == {true, 2});
//     constraint (__pub_var(__this_pathway(), {9}) == [1, 2, 3, 4, 5]);
//     constraint (__pub_var(__this_pathway(), {10}) == true);
//     constraint (__pub_var(__this_pathway(), {11}) == 5);
//     constraint (__pub_var(__this_pathway(), {12}) == 0x0000111100001111000011110000111100001111000011110000111100001111);
//     constraint (__pub_var(__this_pathway(), {13}) == {true, 2});
//     constraint (__pub_var(__this_pathway(), {14}) == [1, 2, 3, 4, 5]);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
