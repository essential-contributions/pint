union MyUnion = A | B;
type MyType = MyUnion;

interface Contract {
    predicate Foo(
        x1: bool,
        x2: int,
        x3: b256,
        x5: { bool, int },
        x6: int[5],

        y1: bool,
        y2: int,
        y3: b256,
        y5: { bool, int },
        y6: int[5],
    );
}

predicate Foo(
    addr1: b256,
    addr2: b256,
    addr3: b256,
) {
    interface ContractI = Contract(addr1);

    predicate FooI = ContractI::Foo(addr2);
    constraint FooI::x1 == true;
    constraint FooI::x2 == 5;
    constraint FooI::x3 == 0x0000111100001111000011110000111100001111000011110000111100001111;
    constraint FooI::x5 == { true, 2 };
    constraint FooI::x6 == [ 1, 2, 3, 4, 5];

    predicate FooI2 = ContractI::Foo(addr3);
    constraint FooI2::y1 == true;
    constraint FooI2::y2 == 5;
    constraint FooI2::y3 == 0x0000111100001111000011110000111100001111000011110000111100001111;
    constraint FooI2::y5 == { true, 2 };
    constraint FooI2::y6 == [ 1, 2, 3, 4, 5];
}

// parsed <<<
// union ::MyUnion = A | B;
// type ::MyType = ::MyUnion;
// interface ::Contract {
//     predicate Foo (
//         x1: bool,
//         x2: int,
//         x3: b256,
//         x5: {bool, int},
//         x6: int[5],
//         y1: bool,
//         y2: int,
//         y3: b256,
//         y5: {bool, int},
//         y6: int[5],
//     );
// }
// 
// predicate ::Foo(
//     ::addr1: b256,
//     ::addr2: b256,
//     ::addr3: b256,
//     __::FooI_pathway: int,
//     __::FooI2_pathway: int,
// ) {
//     interface ::ContractI = ::Contract(::addr1)
//     predicate ::FooI = ::ContractI::Foo(::addr2)
//     predicate ::FooI2 = ::ContractI::Foo(::addr3)
//     constraint (::FooI::x1 == true);
//     constraint (::FooI::x2 == 5);
//     constraint (::FooI::x3 == 0x0000111100001111000011110000111100001111000011110000111100001111);
//     constraint (::FooI::x5 == {true, 2});
//     constraint (::FooI::x6 == [1, 2, 3, 4, 5]);
//     constraint (::FooI2::y1 == true);
//     constraint (::FooI2::y2 == 5);
//     constraint (::FooI2::y3 == 0x0000111100001111000011110000111100001111000011110000111100001111);
//     constraint (::FooI2::y5 == {true, 2});
//     constraint (::FooI2::y6 == [1, 2, 3, 4, 5]);
// }
// >>>

// flattened <<<
// union ::MyUnion = A | B;
// type ::MyType = ::MyUnion;
// interface ::Contract {
//     predicate Foo (
//         x1: bool,
//         x2: int,
//         x3: b256,
//         x5: {bool, int},
//         x6: int[5],
//         y1: bool,
//         y2: int,
//         y3: b256,
//         y5: {bool, int},
//         y6: int[5],
//     );
// }
// 
// predicate ::Foo(
//     ::addr1: b256,
//     ::addr2: b256,
//     ::addr3: b256,
//     __::FooI_pathway: int,
//     __::FooI2_pathway: int,
// ) {
//     interface ::ContractI = ::Contract(::addr1)
//     predicate ::FooI = ::ContractI::Foo(::addr2)
//     predicate ::FooI2 = ::ContractI::Foo(::addr3)
//     constraint (__pub_var(__::FooI_pathway, {0}) == true);
//     constraint (__pub_var(__::FooI_pathway, {1}) == 5);
//     constraint (__pub_var(__::FooI_pathway, {2}) == 0x0000111100001111000011110000111100001111000011110000111100001111);
//     constraint (__pub_var(__::FooI_pathway, {3}) == {true, 2});
//     constraint (__pub_var(__::FooI_pathway, {4}) == [1, 2, 3, 4, 5]);
//     constraint (__pub_var(__::FooI2_pathway, {5}) == true);
//     constraint (__pub_var(__::FooI2_pathway, {6}) == 5);
//     constraint (__pub_var(__::FooI2_pathway, {7}) == 0x0000111100001111000011110000111100001111000011110000111100001111);
//     constraint (__pub_var(__::FooI2_pathway, {8}) == {true, 2});
//     constraint (__pub_var(__::FooI2_pathway, {9}) == [1, 2, 3, 4, 5]);
//     constraint __eq_set(__mut_keys(), {0});
//     constraint (__predicate_at(__::FooI_pathway) == {::addr1, ::addr2});
//     constraint (__predicate_at(__::FooI2_pathway) == {::addr1, ::addr3});
// }
// >>>
