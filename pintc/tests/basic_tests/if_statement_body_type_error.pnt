predicate test(
    z: bool,
    x: int,
    y: int,
    xx: int,
    yy: int,
) {

    if true {
        if false {
        } else {
            constraint z && !z && 1;
        }

        constraint yy != xx;

        if z {
            constraint x + true;
        } else {
            constraint z;
        }
    } else {
        if z {
            constraint yy + xx == yy * xx;
            constraint z;
        } else {
            if z {
                constraint z && true;
                constraint yy + { 1, true };
            }
        }
    }
}

// parsed <<<
// predicate ::test(
//     ::z: bool,
//     ::x: int,
//     ::y: int,
//     ::xx: int,
//     ::yy: int,
// ) {
//     if true {
//         if false {
//         } else {
//             constraint ((::z && !::z) && 1)
//         }
//         constraint (::yy != ::xx)
//         if ::z {
//             constraint (::x + true)
//         } else {
//             constraint ::z
//         }
//     } else {
//         if ::z {
//             constraint ((::yy + ::xx) == (::yy * ::xx))
//             constraint ::z
//         } else {
//             if ::z {
//                 constraint (::z && true)
//                 constraint (::yy + {1, true})
//             }
//         }
//     }
// }
// >>>

// typecheck_failure <<<
// binary operator type error
// @168..169: operator `&&` argument has unexpected type `int`
// @157..169: expecting type `bool`
// operator invalid type error
// @250..258: invalid non-numeric type `bool` for operator `+`
// operator invalid type error
// @511..527: invalid non-numeric type `{int, bool}` for operator `+`
// >>>
