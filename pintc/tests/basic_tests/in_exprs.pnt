union Cake = Crab | Mud | Uranium | Urinal;

predicate test(
    a: int,
    c: bool,
    d: b256,
    e: Cake,
    f: {bool, int},
    g: int[2],
) {

    constraint a in 11..22;
    constraint a in [11, 13, 17, 19];


    constraint c in [true, true];
    constraint d in [0x0000000000000000000000000000000000000000000000000000000000000000, 
    0x1111111111111111111111111111111111111111111111111111111111111111];
    constraint e in [Cake::Mud, Cake::Crab];
    constraint f in [{false, 66}, {true, 77}, {true, 88}];
    constraint g in [[-99, -99]];
}

// parsed <<<
// union ::Cake = Crab | Mud | Uranium | Urinal;
//
// predicate ::test(
//     ::a: int,
//     ::c: bool,
//     ::d: b256,
//     ::e: ::Cake,
//     ::f: {bool, int},
//     ::g: int[2],
// ) {
//     constraint ::a in 11..22;
//     constraint ::a in [11, 13, 17, 19];
//     constraint ::c in [true, true];
//     constraint ::d in [0x0000000000000000000000000000000000000000000000000000000000000000, 0x1111111111111111111111111111111111111111111111111111111111111111];
//     constraint ::e in [::Cake::Mud, ::Cake::Crab];
//     constraint ::f in [{false, 66}, {true, 77}, {true, 88}];
//     constraint ::g in [[-99, -99]];
// }
// >>>

// flattened <<<
// union ::Cake = Crab | Mud | Uranium | Urinal;
//
// predicate ::test(
//     ::a: int,
//     ::c: bool,
//     ::d: b256,
//     ::e: ::Cake,
//     ::f: {bool, int},
//     ::g: int[2],
// ) {
//     constraint ((::a >= 11) && (::a <= 22));
//     constraint ((((::a == 11) || (::a == 13)) || (::a == 17)) || (::a == 19));
//     constraint ((::c == true) || (::c == true));
//     constraint ((::d == 0x0000000000000000000000000000000000000000000000000000000000000000) || (::d == 0x1111111111111111111111111111111111111111111111111111111111111111));
//     constraint ((::e == ::Cake::Mud) || (::e == ::Cake::Crab));
//     constraint (((::f == {false, 66}) || (::f == {true, 77})) || (::f == {true, 88}));
//     constraint (::g == [-99, -99]);
// }
// >>>
