enum Cake = Crab | Mud | Uranium | Urinal;

predicate test {
    var a: int;
    var b: real;
    var c: bool;
    var d: string;
    var e: Cake;
    var f: {bool, int};
    var g: int[2];

    constraint a in 11..22;
    constraint a in [11, 13, 17, 19];

    constraint b in 12.3..67.8;
    constraint b in [25.0, 29.97, 59.94];

    constraint c in [true, true];
    constraint d in ["foo", "bar"];
    constraint e in [Cake::Mud, Cake::Crab];
    constraint f in [{false, 66}, {true, 77}, {true, 88}];
    constraint g in [[-99, -99]];
}

// parsed <<<
// enum ::Cake = Crab | Mud | Uranium | Urinal;
//
// predicate ::test {
//     var ::a: int;
//     var ::b: real;
//     var ::c: bool;
//     var ::d: string;
//     var ::e: ::Cake;
//     var ::f: {bool, int};
//     var ::g: int[2];
//     constraint ::a in 11..22;
//     constraint ::a in [11, 13, 17, 19];
//     constraint ::b in 1.23e1..6.78e1;
//     constraint ::b in [2.5e1, 2.997e1, 5.994e1];
//     constraint ::c in [true, true];
//     constraint ::d in ["foo", "bar"];
//     constraint ::e in [::Cake::Mud, ::Cake::Crab];
//     constraint ::f in [{false, 66}, {true, 77}, {true, 88}];
//     constraint ::g in [[-99, -99]];
// }
// >>>

// flattened <<<
// enum ::Cake = Crab | Mud | Uranium | Urinal;
//
// predicate ::test {
//     var ::a: int;
//     var ::b: real;
//     var ::c: bool;
//     var ::d: string;
//     var ::e: int;
//     var ::f: {bool, int};
//     var ::g: int[2];
//     constraint ((::a >= 11) && (::a <= 22));
//     constraint ((((::a == 11) || (::a == 13)) || (::a == 17)) || (::a == 19));
//     constraint ((::b >= 1.23e1) && (::b <= 6.78e1));
//     constraint (((::b == 2.5e1) || (::b == 2.997e1)) || (::b == 5.994e1));
//     constraint ((::c == true) || (::c == true));
//     constraint ((::d == "foo") || (::d == "bar"));
//     constraint ((::e == 1) || (::e == 0));
//     constraint (((::f == {false, 66}) || (::f == {true, 77})) || (::f == {true, 88}));
//     constraint (::g == [-99, -99]);
//     constraint (::e >= 0);
//     constraint (::e <= 3);
// }
// >>>
