predicate test(
    a: {int, bool},
    b: bool[3][5],
    c: {int, bool}[5],
) {
    constraint !a.1;

    constraint !!b[0][1];

    constraint !!c[0].1;
}

// parsed <<<
// predicate ::test(
//     ::a: {int, bool},
//     ::b: bool[5][3],
//     ::c: {int, bool}[5],
// ) {
//     constraint !::a.1;
//     constraint !!::b[0][1];
//     constraint !!::c[0].1;
// }
// >>>

// flattened <<<
// predicate ::test(
//     ::a: {int, bool},
//     ::b: bool[5][3],
//     ::c: {int, bool}[5],
// ) {
//     constraint !::a.1;
//     constraint !!::b[0][1];
//     constraint !!::c[0].1;
// }
// >>>
