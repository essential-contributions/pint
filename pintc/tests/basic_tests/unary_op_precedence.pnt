var a: {int, bool};
constraint !a.1;

var b: bool[5][3];
constraint !!b[0][1];

var c: {int, bool}[5];
constraint !!c[0].1;

solve satisfy;

// parsed <<<
// var ::a: {int, bool};
// var ::b: bool[3][5];
// var ::c: {int, bool}[5];
// constraint !::a.1;
// constraint !!::b[0][1];
// constraint !!::c[0].1;
// solve satisfy;
// >>>

// flattened <<<
// var ::a.0: int;
// var ::a.1: int;
// var ::b[0][0]: int;
// var ::b[0][1]: int;
// var ::b[0][2]: int;
// var ::b[1][0]: int;
// var ::b[1][1]: int;
// var ::b[1][2]: int;
// var ::b[2][0]: int;
// var ::b[2][1]: int;
// var ::b[2][2]: int;
// var ::b[3][0]: int;
// var ::b[3][1]: int;
// var ::b[3][2]: int;
// var ::b[4][0]: int;
// var ::b[4][1]: int;
// var ::b[4][2]: int;
// var ::c[0].0: int;
// var ::c[0].1: int;
// var ::c[1].0: int;
// var ::c[1].1: int;
// var ::c[2].0: int;
// var ::c[2].1: int;
// var ::c[3].0: int;
// var ::c[3].1: int;
// var ::c[4].0: int;
// var ::c[4].1: int;
// constraint !::a.1;
// constraint !!::b[0][1];
// constraint !!::c[0].1;
// solve satisfy;
// >>>
