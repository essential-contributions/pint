enum MyEnum = A | B;
var y: bool;
var t: { int, bool, { b256, { int, bool } }, b256 };
var a: int[4][2];
var u: { int, bool };
var b: int[2][2][2];
var x: int;
var z: string;
var e: { MyEnum, bool };

solve satisfy;

// intermediate <<<
// var ::y: bool;
// var ::t: {int, bool, {b256, {int, bool}}, b256};
// var ::a: int[2][4];
// var ::u: {int, bool};
// var ::b: int[2][2][2];
// var ::x: int;
// var ::z: string;
// var ::e: {::MyEnum, bool};
// enum ::MyEnum = A | B;
// solve satisfy;
// >>>

// flattened <<<
// var ::y: int;
// var ::t.0: int;
// var ::t.1: int;
// var ::t.2.0: b256;
// var ::t.2.1.0: int;
// var ::t.2.1.1: int;
// var ::t.3: b256;
// var ::a[0][0]: int;
// var ::a[0][1]: int;
// var ::a[1][0]: int;
// var ::a[1][1]: int;
// var ::a[2][0]: int;
// var ::a[2][1]: int;
// var ::a[3][0]: int;
// var ::a[3][1]: int;
// var ::u.0: int;
// var ::u.1: int;
// var ::b[0][0][0]: int;
// var ::b[0][0][1]: int;
// var ::b[0][1][0]: int;
// var ::b[0][1][1]: int;
// var ::b[1][0][0]: int;
// var ::b[1][0][1]: int;
// var ::b[1][1][0]: int;
// var ::b[1][1][1]: int;
// var ::x: int;
// var ::z: string;
// var ::e.0: int;
// var ::e.1: int;
// enum ::MyEnum = A | B;
// constraint (::e.0 >= 0);
// constraint (::e.0 <= 1);
// solve satisfy;
// >>>
