union MyUnion = A | B;

predicate test(
    y: bool,
    t: { int, bool, { b256, { int, bool } }, b256 },
    a: int[4][2],
    u: { int, bool },
    b: int[2][2][2],
    x: int,
    z: b256,
    e: { MyUnion, bool },
) { }

// parsed <<<
// union ::MyUnion = A | B;
//
// predicate ::test(
//     ::y: bool,
//     ::t: {int, bool, {b256, {int, bool}}, b256},
//     ::a: int[2][4],
//     ::u: {int, bool},
//     ::b: int[2][2][2],
//     ::x: int,
//     ::z: b256,
//     ::e: {::MyUnion, bool},
// ) {
// }
// >>>

// flattened <<<
// union ::MyUnion = A | B;
//
// predicate ::test(
//     ::y: bool,
//     ::t: {int, bool, {b256, {int, bool}}, b256},
//     ::a: int[2][4],
//     ::u: {int, bool},
//     ::b: int[2][2][2],
//     ::x: int,
//     ::z: b256,
//     ::e: {::MyUnion, bool},
// ) {
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
