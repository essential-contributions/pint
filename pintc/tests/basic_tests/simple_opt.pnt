predicate test(x: int, obj: int) {
    constraint x >= -10;
    constraint obj == x*x + 2*x - 8;
}

// parsed <<<
// predicate ::test(
//     ::x: int,
//     ::obj: int,
// ) {
//     constraint (::x >= -10);
//     constraint (::obj == (((::x * ::x) + (2 * ::x)) - 8));
// }
// >>>

// flattened <<<
// predicate ::test(
//     ::x: int,
//     ::obj: int,
// ) {
//     constraint (::x >= -10);
//     constraint (::obj == (((::x * ::x) + (2 * ::x)) - 8));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
