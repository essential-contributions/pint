predicate test(a: int, b: int, c: int) {
    constraint a == 1_100_000;
    constraint b == 1000;
    constraint c == 1_2_3_4_5;

    constraint a / b > c;
}

// parsed <<<
// predicate ::test(
//     ::a: int,
//     ::b: int,
//     ::c: int,
// ) {
//     constraint (::a == 1100000);
//     constraint (::b == 1000);
//     constraint (::c == 12345);
//     constraint ((::a / ::b) > ::c);
// }
// >>>

// flattened <<<
// predicate ::test(
//     ::a: int,
//     ::b: int,
//     ::c: int,
// ) {
//     constraint (::a == 1100000);
//     constraint (::b == 1000);
//     constraint (::c == 12345);
//     constraint ((::a / ::b) > ::c);
// }
// >>>
