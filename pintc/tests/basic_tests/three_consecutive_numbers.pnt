// Find three consecutive integers such that their product is equal to their sum.
predicate test(x0: int, x1: int, x2: int) {
    // Make sure the numbers are consecutive
    constraint x1 == x0 + 1 && x2 == x1 + 1;

    // Make sure their sum is equal to their product
    constraint x0 + x1 + x2 == x0 * x1 * x2;
}

// parsed <<<
// predicate ::test(
//     ::x0: int,
//     ::x1: int,
//     ::x2: int,
// ) {
//     constraint ((::x1 == (::x0 + 1)) && (::x2 == (::x1 + 1)));
//     constraint (((::x0 + ::x1) + ::x2) == ((::x0 * ::x1) * ::x2));
// }
// >>>

// flattened <<<
// predicate ::test(
//     ::x0: int,
//     ::x1: int,
//     ::x2: int,
// ) {
//     constraint ((::x1 == (::x0 + 1)) && (::x2 == (::x1 + 1)));
//     constraint (((::x0 + ::x1) + ::x2) == ((::x0 * ::x1) * ::x2));
// }
// >>>
