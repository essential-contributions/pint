predicate Foo {
    enum MyEnum = A | B;
    type MyType = MyEnum;

    pub var x1: bool;
    pub var x2: int;
    pub var x3: b256;
    pub var x4: string;
    pub var x5: { bool, int };
    pub var x6: int[5];
    pub var x7: MyEnum;
    pub var x8: MyType;

    pub var y1: bool = true;
    pub var y2: int = 5;
    pub var y3: b256 = 0x0000111100001111000011110000111100001111000011110000111100001111;
    pub var y4: string = "foo";
    pub var y5: { bool, int } = { true, 2 };
    pub var y6: int[5] = [ 1, 2, 3, 4, 5];
    pub var y7: MyEnum = MyEnum::A;
    pub var y8: MyType = MyEnum::B;

    pub var z1 = true;
    pub var z2 = 5;
    pub var z3 = 0x0000111100001111000011110000111100001111000011110000111100001111;
    pub var z4 = "foo";
    pub var z5 = { true, 2 };
    pub var z6 = [ 1, 2, 3, 4, 5];
    pub var z7 = MyEnum::A;
    pub var z8 = MyEnum::B;
}

// parsed <<<
// predicate ::Foo {
//     pub var ::x1: bool;
//     pub var ::x2: int;
//     pub var ::x3: b256;
//     pub var ::x4: string;
//     pub var ::x5: {bool, int};
//     pub var ::x6: int[5];
//     pub var ::x7: ::MyEnum;
//     pub var ::x8: ::MyType;
//     pub var ::y1: bool;
//     pub var ::y2: int;
//     pub var ::y3: b256;
//     pub var ::y4: string;
//     pub var ::y5: {bool, int};
//     pub var ::y6: int[5];
//     pub var ::y7: ::MyEnum;
//     pub var ::y8: ::MyType;
//     pub var ::z1;
//     pub var ::z2;
//     pub var ::z3;
//     pub var ::z4;
//     pub var ::z5;
//     pub var ::z6;
//     pub var ::z7;
//     pub var ::z8;
//     enum ::MyEnum = A | B;
//     type ::MyType = ::MyEnum;
//     constraint (::y1 == true);
//     constraint (::y2 == 5);
//     constraint (::y3 == 0x0000111100001111000011110000111100001111000011110000111100001111);
//     constraint (::y4 == "foo");
//     constraint (::y5 == {true, 2});
//     constraint (::y6 == [1, 2, 3, 4, 5]);
//     constraint (::y7 == ::MyEnum::A);
//     constraint (::y8 == ::MyEnum::B);
//     constraint (::z1 == true);
//     constraint (::z2 == 5);
//     constraint (::z3 == 0x0000111100001111000011110000111100001111000011110000111100001111);
//     constraint (::z4 == "foo");
//     constraint (::z5 == {true, 2});
//     constraint (::z6 == [1, 2, 3, 4, 5]);
//     constraint (::z7 == ::MyEnum::A);
//     constraint (::z8 == ::MyEnum::B);
// }
// >>>

// These type check failures are temporary until we support other types for `pub var`
//
// typecheck_failure <<<
// compiler internal error: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// @145..147: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// compiler internal error: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// @224..226: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// compiler internal error: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// @248..250: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// compiler internal error: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// @418..420: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// compiler internal error: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// @538..540: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// compiler internal error: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// @574..576: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// compiler internal error: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// @739..741: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// compiler internal error: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// @828..830: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// compiler internal error: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// @856..858: only `bool`, b256`, `int`, tuple, and array pub vars are currently supported
// >>>
