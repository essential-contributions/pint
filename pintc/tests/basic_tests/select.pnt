predicate test(
    condition: bool,
    condition1: bool,
    condition2: bool,
    x: int,
    y: int,
    z: b256,
) {
    let a = condition ? condition1 ? 1 : 2 : condition2 ? 3 : 4;
    let b = condition ? condition1 ? x : y : condition2 ? x + 1 : x * y;
    let c = !condition ? { 1, 2, 3 } : { 3, 2, 1 };
    let d = !condition ? [ 1, 2, 3 ] : [ 3, 2, 1 ];
}

// parsed <<<
// predicate ::test(
//     ::condition: bool,
//     ::condition1: bool,
//     ::condition2: bool,
//     ::x: int,
//     ::y: int,
//     ::z: b256,
// ) {
//     let ::a = (::condition ? (::condition1 ? 1 : 2) : (::condition2 ? 3 : 4));
//     let ::b = (::condition ? (::condition1 ? ::x : ::y) : (::condition2 ? (::x + 1) : (::x * ::y)));
//     let ::c = (!::condition ? {1, 2, 3} : {3, 2, 1});
//     let ::d = (!::condition ? [1, 2, 3] : [3, 2, 1]);
// }
// >>>

// flattened <<<
// predicate ::test(
//     ::condition: bool,
//     ::condition1: bool,
//     ::condition2: bool,
//     ::x: int,
//     ::y: int,
//     ::z: b256,
// ) {
//     let ::a: int = (::condition ? (::condition1 ? 1 : 2) : (::condition2 ? 3 : 4));
//     let ::b: int = (::condition ? (::condition1 ? ::x : ::y) : (::condition2 ? (::x + 1) : (::x * ::y)));
//     let ::c: {int, int, int} = (!::condition ? {1, 2, 3} : {3, 2, 1});
//     let ::d: int[3] = (!::condition ? [1, 2, 3] : [3, 2, 1]);
// }
// >>>
