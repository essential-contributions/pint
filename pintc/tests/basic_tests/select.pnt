var condition: bool;
var condition1: bool;
var condition2: bool;
var x: int;
var y: int;
var z: b256;
var a = condition ? condition1 ? 1 : 2 : condition2 ? 3 : 4;
var b = condition ? condition1 ? x : y : condition2 ? x + 1 : x * y;
var c = !condition ? { 1, 2, 3 } : { 3, 2, 1 };
var d = !condition ? [ 1, 2, 3 ] : [ 3, 2, 1 ];

solve satisfy;

// intermediate <<<
// var ::condition: bool;
// var ::condition1: bool;
// var ::condition2: bool;
// var ::x: int;
// var ::y: int;
// var ::z: b256;
// var ::a;
// var ::b;
// var ::c;
// var ::d;
// constraint (::a == (::condition ? (::condition1 ? 1 : 2) : (::condition2 ? 3 : 4)));
// constraint (::b == (::condition ? (::condition1 ? ::x : ::y) : (::condition2 ? (::x + 1) : (::x * ::y))));
// constraint (::c == (!::condition ? {1, 2, 3} : {3, 2, 1}));
// constraint (::d == (!::condition ? [1, 2, 3] : [3, 2, 1]));
// solve satisfy;
// >>>

// flattened <<<
// var ::condition: int;
// var ::condition1: int;
// var ::condition2: int;
// var ::x: int;
// var ::y: int;
// var ::z: b256;
// var ::a: int;
// var ::b: int;
// var ::c.0: int;
// var ::d[0]: int;
// var ::d[1]: int;
// var ::d[2]: int;
// var ::c.1: int;
// var ::c.2: int;
// constraint (::a == (::condition ? (::condition1 ? 1 : 2) : (::condition2 ? 3 : 4)));
// constraint (::b == (::condition ? (::condition1 ? ::x : ::y) : (::condition2 ? (::x + 1) : (::x * ::y))));
// constraint ({::c.0, ::c.1, ::c.2} == (!::condition ? {1, 2, 3} : {3, 2, 1}));
// constraint ([::d[0], ::d[1], ::d[2]] == (!::condition ? [1, 2, 3] : [3, 2, 1]));
// solve satisfy;
// >>>
