predicate test() {
    let t0 = { 0, }; let t0_0 = t0.0;
    let t1 = { x: 0 }; let t1_0 = t1.0; let t1_x = t1.x;
    let t2 = { x: 0, }; let t2_0 = t2.0; let t2_x = t2.x;
    let t3: { x: int } = { 0, }; let t3_0 = t3.0; let t3_x = t3.x;
    let t4: { x: int } = { x: 0, }; let t4_0 = t4.0; let t4_x = t4.x;
    let t5: { x: int, } = { x: 0 }; let t5_0 = t5.0; let t5_x = t5.x;

    let t5a = { 0, true }; let t5a_0 = t5.0; let t5a_1 = t5a.1;
    let t6 = { x: 0, true }; let t6_0 = t6.0; let t6_x = t6.x; let t6_1 = t6.1;
    let t7: { x: int, bool } = { 0, true }; let t7_0 = t7.0; let t7_x = t7.x; let t7_1 = t7.1;
    let t8: { x: int, bool } = { x: 0, true }; let t8_0 = t8.0; let t8_x = t8.x; let t8_1 = t8.1;
    let t9 = { x: 0, y: true }; let t9_0 = t9.0; let t9_x = t9.x; let t9_1 = t9.1; let t9_y = t9.y;
    let t10: { x: int, y: bool } = { 0, true }; let t10_0 = t10.0; let t10_x = t10.x; let t10_1 = t10.1; let t10_y = t10.y;
    let t11: { x: int, y: bool } = { x: 0, true }; let t11_0 = t11.0; let t11_x = t11.x; let t11_1 = t11.1; let t11_y = t11.y;
    let t12: { x: int, y: bool } = { x: 0, y: true }; let t12_0 = t12.0; let t12_x = t12.x; let t12_1 = t12.1; let t12_y = t12.y;
    let t13: { x: int, y: bool } = { y: true, x: 0 }; let t13_0 = t13.0; let t13_x = t13.x; let t13_1 = t13.1; let t13_y = t13.y;

    let t14: { x: int, y: bool, z: { int, bool, w: b256 } } = { z: { 0, true,
    0x0000111100001111000011110000111100001111000011110000111100001111 }, y: true, x: 0, };
    let t14_2_0 = t14.2.0;
    let t14_2_1 = t14.2.1;
    let t14_2_2 = t14.2.2;
    let t14_z_0 = t14.z.0;
    let t14_z_1 = t14.z.1;
    let t14_z_2 = t14.z.2;
    let t14_z_w = t14.z.w;
}

// parsed <<<
// predicate ::test(
// ) {
//     let ::t0 = {0};
//     let ::t0_0 = ::t0.0;
//     let ::t1 = {x: 0};
//     let ::t1_0 = ::t1.0;
//     let ::t1_x = ::t1.x;
//     let ::t2 = {x: 0};
//     let ::t2_0 = ::t2.0;
//     let ::t2_x = ::t2.x;
//     let ::t3: {x: int} = {0};
//     let ::t3_0 = ::t3.0;
//     let ::t3_x = ::t3.x;
//     let ::t4: {x: int} = {x: 0};
//     let ::t4_0 = ::t4.0;
//     let ::t4_x = ::t4.x;
//     let ::t5: {x: int} = {x: 0};
//     let ::t5_0 = ::t5.0;
//     let ::t5_x = ::t5.x;
//     let ::t5a = {0, true};
//     let ::t5a_0 = ::t5.0;
//     let ::t5a_1 = ::t5a.1;
//     let ::t6 = {x: 0, true};
//     let ::t6_0 = ::t6.0;
//     let ::t6_x = ::t6.x;
//     let ::t6_1 = ::t6.1;
//     let ::t7: {x: int, bool} = {0, true};
//     let ::t7_0 = ::t7.0;
//     let ::t7_x = ::t7.x;
//     let ::t7_1 = ::t7.1;
//     let ::t8: {x: int, bool} = {x: 0, true};
//     let ::t8_0 = ::t8.0;
//     let ::t8_x = ::t8.x;
//     let ::t8_1 = ::t8.1;
//     let ::t9 = {x: 0, y: true};
//     let ::t9_0 = ::t9.0;
//     let ::t9_x = ::t9.x;
//     let ::t9_1 = ::t9.1;
//     let ::t9_y = ::t9.y;
//     let ::t10: {x: int, y: bool} = {0, true};
//     let ::t10_0 = ::t10.0;
//     let ::t10_x = ::t10.x;
//     let ::t10_1 = ::t10.1;
//     let ::t10_y = ::t10.y;
//     let ::t11: {x: int, y: bool} = {x: 0, true};
//     let ::t11_0 = ::t11.0;
//     let ::t11_x = ::t11.x;
//     let ::t11_1 = ::t11.1;
//     let ::t11_y = ::t11.y;
//     let ::t12: {x: int, y: bool} = {x: 0, y: true};
//     let ::t12_0 = ::t12.0;
//     let ::t12_x = ::t12.x;
//     let ::t12_1 = ::t12.1;
//     let ::t12_y = ::t12.y;
//     let ::t13: {x: int, y: bool} = {y: true, x: 0};
//     let ::t13_0 = ::t13.0;
//     let ::t13_x = ::t13.x;
//     let ::t13_1 = ::t13.1;
//     let ::t13_y = ::t13.y;
//     let ::t14: {x: int, y: bool, z: {int, bool, w: b256}} = {z: {0, true, 0x0000111100001111000011110000111100001111000011110000111100001111}, y: true, x: 0};
//     let ::t14_2_0 = ::t14.2.0;
//     let ::t14_2_1 = ::t14.2.1;
//     let ::t14_2_2 = ::t14.2.2;
//     let ::t14_z_0 = ::t14.z.0;
//     let ::t14_z_1 = ::t14.z.1;
//     let ::t14_z_2 = ::t14.z.2;
//     let ::t14_z_w = ::t14.z.w;
// }
// >>>

// flattened <<<
// predicate ::test(
// ) {
//     let ::t0: {int} = {0};
//     let ::t0_0: int = ::t0.0;
//     let ::t1: {x: int} = {x: 0};
//     let ::t1_0: int = ::t1.0;
//     let ::t1_x: int = ::t1.x;
//     let ::t2: {x: int} = {x: 0};
//     let ::t2_0: int = ::t2.0;
//     let ::t2_x: int = ::t2.x;
//     let ::t3: {x: int} = {0};
//     let ::t3_0: int = ::t3.0;
//     let ::t3_x: int = ::t3.x;
//     let ::t4: {x: int} = {x: 0};
//     let ::t4_0: int = ::t4.0;
//     let ::t4_x: int = ::t4.x;
//     let ::t5: {x: int} = {x: 0};
//     let ::t5_0: int = ::t5.0;
//     let ::t5_x: int = ::t5.x;
//     let ::t5a: {int, bool} = {0, true};
//     let ::t5a_0: int = ::t5.0;
//     let ::t5a_1: bool = ::t5a.1;
//     let ::t6: {x: int, bool} = {x: 0, true};
//     let ::t6_0: int = ::t6.0;
//     let ::t6_x: int = ::t6.x;
//     let ::t6_1: bool = ::t6.1;
//     let ::t7: {x: int, bool} = {0, true};
//     let ::t7_0: int = ::t7.0;
//     let ::t7_x: int = ::t7.x;
//     let ::t7_1: bool = ::t7.1;
//     let ::t8: {x: int, bool} = {x: 0, true};
//     let ::t8_0: int = ::t8.0;
//     let ::t8_x: int = ::t8.x;
//     let ::t8_1: bool = ::t8.1;
//     let ::t9: {x: int, y: bool} = {x: 0, y: true};
//     let ::t9_0: int = ::t9.0;
//     let ::t9_x: int = ::t9.x;
//     let ::t9_1: bool = ::t9.1;
//     let ::t9_y: bool = ::t9.y;
//     let ::t10: {x: int, y: bool} = {0, true};
//     let ::t10_0: int = ::t10.0;
//     let ::t10_x: int = ::t10.x;
//     let ::t10_1: bool = ::t10.1;
//     let ::t10_y: bool = ::t10.y;
//     let ::t11: {x: int, y: bool} = {x: 0, true};
//     let ::t11_0: int = ::t11.0;
//     let ::t11_x: int = ::t11.x;
//     let ::t11_1: bool = ::t11.1;
//     let ::t11_y: bool = ::t11.y;
//     let ::t12: {x: int, y: bool} = {x: 0, y: true};
//     let ::t12_0: int = ::t12.0;
//     let ::t12_x: int = ::t12.x;
//     let ::t12_1: bool = ::t12.1;
//     let ::t12_y: bool = ::t12.y;
//     let ::t13: {x: int, y: bool} = {y: true, x: 0};
//     let ::t13_0: int = ::t13.0;
//     let ::t13_x: int = ::t13.x;
//     let ::t13_1: bool = ::t13.1;
//     let ::t13_y: bool = ::t13.y;
//     let ::t14: {x: int, y: bool, z: {int, bool, w: b256}} = {z: {0, true, 0x0000111100001111000011110000111100001111000011110000111100001111}, y: true, x: 0};
//     let ::t14_2_0: int = ::t14.2.0;
//     let ::t14_2_1: bool = ::t14.2.1;
//     let ::t14_2_2: b256 = ::t14.2.2;
//     let ::t14_z_0: int = ::t14.z.0;
//     let ::t14_z_1: bool = ::t14.z.1;
//     let ::t14_z_2: b256 = ::t14.z.2;
//     let ::t14_z_w: b256 = ::t14.z.w;
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
