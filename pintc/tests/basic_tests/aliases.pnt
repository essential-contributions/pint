type MyInt = int;
type MyBool = bool;
type MyTuple = { int, int };
type MyArray = bool[5];
type MyMap = (b256 => int);
type MyB256 = b256;
type MyNestedAlias = MyInt;
type MyExtraNestedAlias = MyNestedAlias;
type MyIncredibleTuple = { MyExtraNestedAlias, MyNestedAlias };
type MyAliasedMap = (MyB256 => MyTuple);
type MyComplexMap = (MyBool => MyMap);

storage {
    x: MyMap,
    y: MyAliasedMap,
    z: MyComplexMap,
}

predicate test {
   var m: MyInt;
   var o: MyBool;
   var p: MyTuple;
   var q: MyArray;
   var r: MyB256;
   var s: MyNestedAlias;
   var t: MyExtraNestedAlias;
   var u: MyIncredibleTuple;
}

// parsed <<<
// type ::MyInt = int;
// type ::MyBool = bool;
// type ::MyTuple = {int, int};
// type ::MyArray = bool[5];
// type ::MyMap = ( b256 => int );
// type ::MyB256 = b256;
// type ::MyNestedAlias = ::MyInt;
// type ::MyExtraNestedAlias = ::MyNestedAlias;
// type ::MyIncredibleTuple = {::MyExtraNestedAlias, ::MyNestedAlias};
// type ::MyAliasedMap = ( ::MyB256 => ::MyTuple );
// type ::MyComplexMap = ( ::MyBool => ::MyMap );
// storage {
//     x: ::MyMap,
//     y: ::MyAliasedMap,
//     z: ::MyComplexMap,
// }
//
// predicate ::test {
//     var ::m: ::MyInt;
//     var ::o: ::MyBool;
//     var ::p: ::MyTuple;
//     var ::q: ::MyArray;
//     var ::r: ::MyB256;
//     var ::s: ::MyNestedAlias;
//     var ::t: ::MyExtraNestedAlias;
//     var ::u: ::MyIncredibleTuple;
// }
// >>>

// flattened <<<
// type ::MyInt = int;
// type ::MyBool = bool;
// type ::MyTuple = {int, int};
// type ::MyArray = bool[5];
// type ::MyMap = ( b256 => int );
// type ::MyB256 = b256;
// type ::MyNestedAlias = int;
// type ::MyExtraNestedAlias = int;
// type ::MyIncredibleTuple = {int, int};
// type ::MyAliasedMap = ( b256 => {int, int} );
// type ::MyComplexMap = ( bool => ( b256 => int ) );
// storage {
//     x: ( b256 => int ),
//     y: ( b256 => {int, int} ),
//     z: ( bool => ( b256 => int ) ),
// }
//
// predicate ::test {
//     var ::m: int;
//     var ::o: bool;
//     var ::p: {int, int};
//     var ::q: bool[5];
//     var ::r: b256;
//     var ::s: int;
//     var ::t: int;
//     var ::u: {int, int};
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
