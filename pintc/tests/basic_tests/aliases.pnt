type MyInt = int;
type MyBool = bool;
type MyTuple = { int, int };
type MyArray = bool[5];
type MyMap = (b256 => int);
type MyB256 = b256;
type MyNestedAlias = MyInt;
type MyExtraNestedAlias = MyNestedAlias;
type MyIncredibleTuple = { MyExtraNestedAlias, MyNestedAlias };
type MyAliasedMap = (MyB256 => MyTuple);
type MyComplexMap = (MyBool => MyMap);

storage {
    x: MyMap,
    y: MyAliasedMap,
    z: MyComplexMap,
}

predicate test(
    m: MyInt,
    o: MyBool,
    p: MyTuple,
    q: MyArray,
    r: MyB256,
    s: MyNestedAlias,
    t: MyExtraNestedAlias,
    u: MyIncredibleTuple,
) {}

// parsed <<<
// type ::MyInt = int;
// type ::MyBool = bool;
// type ::MyTuple = {int, int};
// type ::MyArray = bool[5];
// type ::MyMap = ( b256 => int );
// type ::MyB256 = b256;
// type ::MyNestedAlias = ::MyInt;
// type ::MyExtraNestedAlias = ::MyNestedAlias;
// type ::MyIncredibleTuple = {::MyExtraNestedAlias, ::MyNestedAlias};
// type ::MyAliasedMap = ( ::MyB256 => ::MyTuple );
// type ::MyComplexMap = ( ::MyBool => ::MyMap );
// storage {
//     x: ::MyMap,
//     y: ::MyAliasedMap,
//     z: ::MyComplexMap,
// }
//
// predicate ::test(
//     ::m: ::MyInt,
//     ::o: ::MyBool,
//     ::p: ::MyTuple,
//     ::q: ::MyArray,
//     ::r: ::MyB256,
//     ::s: ::MyNestedAlias,
//     ::t: ::MyExtraNestedAlias,
//     ::u: ::MyIncredibleTuple,
// ) {
// }
// >>>

// flattened <<<
// type ::MyInt = int;
// type ::MyBool = bool;
// type ::MyTuple = {int, int};
// type ::MyArray = bool[5];
// type ::MyMap = ( b256 => int );
// type ::MyB256 = b256;
// type ::MyNestedAlias = int;
// type ::MyExtraNestedAlias = int;
// type ::MyIncredibleTuple = {int, int};
// type ::MyAliasedMap = ( b256 => {int, int} );
// type ::MyComplexMap = ( bool => ( b256 => int ) );
// storage {
//     x: ( b256 => int ),
//     y: ( b256 => {int, int} ),
//     z: ( bool => ( b256 => int ) ),
// }
//
// predicate ::test(
//     ::m: int,
//     ::o: bool,
//     ::p: {int, int},
//     ::q: bool[5],
//     ::r: b256,
//     ::s: int,
//     ::t: int,
//     ::u: {int, int},
// ) {
// }
// >>>
