predicate test {
    var z: bool;
    var x: int;
    var y: int;
    var xx: int;
    var yy: int;

    if 0x0000000000000000000000000000000000000000000000000000000000000000 {
        if false {
        } else {
            constraint z && !z;
        }

        constraint yy != xx;

        if x + 1 {
            constraint x + 1;
        } else {
            constraint z;
        }
    } else {
        if { 1, 2 } {
            constraint yy + xx == yy * xx;
            constraint z;
        } else {
            if z {
                constraint z && true;
            }
        }
    }
}

// parsed <<<
// predicate ::test {
//     var ::z: bool;
//     var ::x: int;
//     var ::y: int;
//     var ::xx: int;
//     var ::yy: int;
//     if 0x0000000000000000000000000000000000000000000000000000000000000000 {
//         if false {
//         } else {
//             constraint (::z && !::z)
//         }
//         constraint (::yy != ::xx)
//         if (::x + 1) {
//             constraint (::x + 1)
//         } else {
//             constraint ::z
//         }
//     } else {
//         if {1, 2} {
//             constraint ((::yy + ::xx) == (::yy * ::xx))
//             constraint ::z
//         } else {
//             if ::z {
//                 constraint (::z && true)
//             }
//         }
//     }
// }
// >>>

// typecheck_failure <<<
// condition for `if` statement must be a `bool`
// @108..174: invalid type `b256`, expecting `bool`
// condition for `if` statement must be a `bool`
// @297..302: invalid type `int`, expecting `bool`
// condition for `if` statement must be a `bool`
// @412..420: invalid type `{int, int}`, expecting `bool`
// >>>
