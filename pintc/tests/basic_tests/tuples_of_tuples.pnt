let a: {int, {int, bool, {int, bool, real}, real}, bool, real} =
  {11, {22, false, {33, true, 44.4}, 55.5}, false, 66.6};

let b: real;

constraint b < a.1.2.2;

let c: {{width: int, height: int}, {x: int, y: int}};

constraint c.1.x < c.0.0 && c.1.y < c.0.height;

let d: {int, int} = {77, 88};

constraint c.0 == d;
constraint c.1 != d;

solve satisfy;

// intermediate <<<
// var ::a: {int, {int, bool, {int, bool, real}, real}, bool, real};
// var ::b: real;
// var ::c: {{width: int, height: int}, {x: int, y: int}};
// var ::d: {int, int};
// constraint (::a == {11, {22, false, {33, true, 4.44e1}, 5.55e1}, false, 6.66e1});
// constraint (::b < ::a.1.2.2);
// constraint ((::c.1.x < ::c.0.0) && (::c.1.y < ::c.0.height));
// constraint (::d == {77, 88});
// constraint (::c.0 == ::d);
// constraint (::c.1 != ::d);
// solve satisfy;
// >>>

// flattened <<<
// var ::b: real;
// var ::a.0: int;
// var ::a.2: int;
// var ::a.3: real;
// var ::d.0: int;
// var ::d.1: int;
// var ::a.1.0: int;
// var ::a.1.1: int;
// var ::a.1.3: real;
// var ::c.0.width: int;
// var ::c.0.height: int;
// var ::c.1.x: int;
// var ::c.1.y: int;
// var ::a.1.2.0: int;
// var ::a.1.2.1: int;
// var ::a.1.2.2: real;

// constraint ((((::a.0 == 11) && ((((::a.1.0 == 22) && (::a.1.1 == 0)) && (((::a.1.2.0 == 33) && (::a.1.2.1 == 1)) && (::a.1.2.2 == 4.44e1))) && (::a.1.3 == 5.55e1))) && (::a.2 == 0)) && (::a.3 == 6.66e1));
// constraint (::b < ::a.1.2.2);
// constraint ((::c.1.x < ::c.0.width) && (::c.1.y < ::c.0.height));
// constraint ((::d.0 == 77) && (::d.1 == 88));
// constraint ((::c.0.width == ::d.0) && (::c.0.height == ::d.1));
// constraint ((::c.1.x != ::d.0) && (::c.1.y != ::d.1));
// solve satisfy;
// >>>
