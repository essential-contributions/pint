predicate test(
    s: int,
    e: int,
    n: int,
    d: int,
    m: int,
    o: int,
    r: int,
    y: int,
) {
    // Temporarily disabling solving while the CI is solving some values to -0 instead of 0.
    //
    // Find distinct digits for the varters D, E, M, N, O, R, S, Y such that S and M are different from
    // zero (no leading zeros) and the equation
    //
    //    SEND
    //  + MORE
    //  ------
    //   MONEY
    //
    // is satisfied.
    //
    // The unique solution of the problem is 9567 + 1085 = 10652.
    //

    constraint s in 1..9;
    constraint e in 0..9;
    constraint n in 0..9;
    constraint d in 0..9;
    constraint m in 1..9;
    constraint o in 0..9;
    constraint r in 0..9;
    constraint y in 0..9;

    // All variables must be different. We will eventually have a `forall` directive that would allow
    // expressing the "all different" constraint more concisely.
    constraint    s != e
               && s != n
               && s != d
               && s != m
               && s != o
               && s != r
               && s != y

               && e != n
               && e != d
               && e != m
               && e != o
               && e != r
               && e != y

               && n != d
               && n != m
               && n != o
               && n != r
               && n != y

               && d != m
               && d != o
               && d != r
               && d != y

               && m != o
               && m != r
               && m != y

               && o != r
               && o != y

               && r != y;

    // SEND + MORE == MONEY
    constraint    1000*s + 100*e + 10*n + d
               +  1000*m + 100*o + 10*r + e
               == 10000*m + 1000*o + 100*n + 10*e + y;
}

// parsed <<<
// predicate ::test(
//     ::s: int,
//     ::e: int,
//     ::n: int,
//     ::d: int,
//     ::m: int,
//     ::o: int,
//     ::r: int,
//     ::y: int,
// ) {
//     constraint ::s in 1..9;
//     constraint ::e in 0..9;
//     constraint ::n in 0..9;
//     constraint ::d in 0..9;
//     constraint ::m in 1..9;
//     constraint ::o in 0..9;
//     constraint ::r in 0..9;
//     constraint ::y in 0..9;
//     constraint ((((((((((((((((((((((((((((::s != ::e) && (::s != ::n)) && (::s != ::d)) && (::s != ::m)) && (::s != ::o)) && (::s != ::r)) && (::s != ::y)) && (::e != ::n)) && (::e != ::d)) && (::e != ::m)) && (::e != ::o)) && (::e != ::r)) && (::e != ::y)) && (::n != ::d)) && (::n != ::m)) && (::n != ::o)) && (::n != ::r)) && (::n != ::y)) && (::d != ::m)) && (::d != ::o)) && (::d != ::r)) && (::d != ::y)) && (::m != ::o)) && (::m != ::r)) && (::m != ::y)) && (::o != ::r)) && (::o != ::y)) && (::r != ::y));
//     constraint (((((((((1000 * ::s) + (100 * ::e)) + (10 * ::n)) + ::d) + (1000 * ::m)) + (100 * ::o)) + (10 * ::r)) + ::e) == (((((10000 * ::m) + (1000 * ::o)) + (100 * ::n)) + (10 * ::e)) + ::y));
// }
// >>>

// flattened <<<
// predicate ::test(
//     ::s: int,
//     ::e: int,
//     ::n: int,
//     ::d: int,
//     ::m: int,
//     ::o: int,
//     ::r: int,
//     ::y: int,
// ) {
//     constraint ((::s >= 1) && (::s <= 9));
//     constraint ((::e >= 0) && (::e <= 9));
//     constraint ((::n >= 0) && (::n <= 9));
//     constraint ((::d >= 0) && (::d <= 9));
//     constraint ((::m >= 1) && (::m <= 9));
//     constraint ((::o >= 0) && (::o <= 9));
//     constraint ((::r >= 0) && (::r <= 9));
//     constraint ((::y >= 0) && (::y <= 9));
//     constraint ((((((((((((((((((((((((((((::s != ::e) && (::s != ::n)) && (::s != ::d)) && (::s != ::m)) && (::s != ::o)) && (::s != ::r)) && (::s != ::y)) && (::e != ::n)) && (::e != ::d)) && (::e != ::m)) && (::e != ::o)) && (::e != ::r)) && (::e != ::y)) && (::n != ::d)) && (::n != ::m)) && (::n != ::o)) && (::n != ::r)) && (::n != ::y)) && (::d != ::m)) && (::d != ::o)) && (::d != ::r)) && (::d != ::y)) && (::m != ::o)) && (::m != ::r)) && (::m != ::y)) && (::o != ::r)) && (::o != ::y)) && (::r != ::y));
//     constraint (((((((((1000 * ::s) + (100 * ::e)) + (10 * ::n)) + ::d) + (1000 * ::m)) + (100 * ::o)) + (10 * ::r)) + ::e) == (((((10000 * ::m) + (1000 * ::o)) + (100 * ::n)) + (10 * ::e)) + ::y));
// }
// >>>
