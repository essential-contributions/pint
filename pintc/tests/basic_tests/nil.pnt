storage {
    x: int,
    z: {int, int, int},
}

state x = storage::x;
state z = storage::z;

constraint nil == nil;
constraint nil != nil;

constraint x == nil;
constraint nil == x;

constraint z == nil;
constraint nil == z;

constraint x != nil;
constraint nil != x;

constraint z != nil;
constraint nil != z;

constraint (nil == z) && (nil != x);
constraint (nil != z) && (nil == x);

solve satisfy;

// intermediate <<<
// storage {
//     x: int,
//     z: {int, int, int},
// }
// state ::x = storage::x;
// state ::z = storage::z;
// constraint (nil == nil);
// constraint (nil != nil);
// constraint (::x == nil);
// constraint (nil == ::x);
// constraint (::z == nil);
// constraint (nil == ::z);
// constraint (::x != nil);
// constraint (nil != ::x);
// constraint (::z != nil);
// constraint (nil != ::z);
// constraint ((nil == ::z) && (nil != ::x));
// constraint ((nil != ::z) && (nil == ::x));
// solve satisfy;
// >>>

// flattened <<<

// storage {
//     x: int,
//     z: {int, int, int},
// }
// state ::x: int = storage::x;
// state ::z: {int, int, int} = storage::z;
// constraint 0;
// constraint 0;
// constraint (__state_len(::x) == 0);
// constraint (__state_len(::x) == 0);
// constraint (__state_len(::z) == 0);
// constraint (__state_len(::z) == 0);
// constraint (__state_len(::x) != 0);
// constraint (__state_len(::x) != 0);
// constraint (__state_len(::z) != 0);
// constraint (__state_len(::z) != 0);
// constraint ((__state_len(::z) == 0) && (__state_len(::x) != 0));
// constraint ((__state_len(::z) != 0) && (__state_len(::x) == 0));
// solve satisfy;
// >>>
