storage {
    x: int,
    z: {int, int, int},
}

predicate test() {
    let x = storage::x;
    let z = storage::z;

    constraint nil == nil;
    constraint nil != nil;

    constraint x == nil;
    constraint nil == x;

    constraint z == nil;
    constraint nil == z;

    constraint x != nil;
    constraint nil != x;

    constraint z != nil;
    constraint nil != z;

    constraint (nil == z) && (nil != x);
    constraint (nil != z) && (nil == x);
}

// parsed <<<
// storage {
//     x: int,
//     z: {int, int, int},
// }
//
// predicate ::test(
// ) {
//     let ::x = storage::x;
//     let ::z = storage::z;
//     constraint (nil == nil);
//     constraint (nil != nil);
//     constraint (::x == nil);
//     constraint (nil == ::x);
//     constraint (::z == nil);
//     constraint (nil == ::z);
//     constraint (::x != nil);
//     constraint (nil != ::x);
//     constraint (::z != nil);
//     constraint (nil != ::z);
//     constraint ((nil == ::z) && (nil != ::x));
//     constraint ((nil != ::z) && (nil == ::x));
// }
// >>>

// typecheck_failure <<<
// uninferrable type
// @166..169: type of this expression cannot be inferred
// uninferrable type
// @159..162: type of this expression cannot be inferred
// uninferrable type
// @139..142: type of this expression cannot be inferred
// uninferrable type
// @132..135: type of this expression cannot be inferred
// >>>
