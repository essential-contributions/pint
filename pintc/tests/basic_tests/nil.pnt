storage {
    x: int,
    z: {int, int, int},
}

predicate test {
    state x = storage::x;
    state z = storage::z;

    constraint nil == nil;
    constraint nil != nil;

    constraint x == nil;
    constraint nil == x;

    constraint z == nil;
    constraint nil == z;

    constraint x != nil;
    constraint nil != x;

    constraint z != nil;
    constraint nil != z;

    constraint (nil == z) && (nil != x);
    constraint (nil != z) && (nil == x);
}

// parsed <<<
// storage {
//     x: int,
//     z: {int, int, int},
// }
//
// predicate ::test {
//     state ::x = storage::x;
//     state ::z = storage::z;
//     constraint (nil == nil);
//     constraint (nil != nil);
//     constraint (::x == nil);
//     constraint (nil == ::x);
//     constraint (::z == nil);
//     constraint (nil == ::z);
//     constraint (::x != nil);
//     constraint (nil != ::x);
//     constraint (::z != nil);
//     constraint (nil != ::z);
//     constraint ((nil == ::z) && (nil != ::x));
//     constraint ((nil != ::z) && (nil == ::x));
// }
// >>>

// flattened <<<
// storage {
//     x: int,
//     z: {int, int, int},
// }
//
// predicate ::test {
//     state ::x: int = __storage_get({0});
//     state ::z: {int, int, int} = __storage_get({1, 0});
//     constraint false;
//     constraint false;
//     constraint (__state_len(::x) == 0);
//     constraint (__state_len(::x) == 0);
//     constraint (__state_len(::z) == 0);
//     constraint (__state_len(::z) == 0);
//     constraint (__state_len(::x) != 0);
//     constraint (__state_len(::x) != 0);
//     constraint (__state_len(::z) != 0);
//     constraint (__state_len(::z) != 0);
//     constraint ((__state_len(::z) == 0) && (__state_len(::x) != 0));
//     constraint ((__state_len(::z) != 0) && (__state_len(::x) == 0));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
