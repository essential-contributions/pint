predicate test {
    // All the decision variables in this test are known. The only purpose of this test make sure that
    // all the listed constraints are satisfied and not conflicting. This helps ensure correctness of
    // logical operators in various forms.

    var x: int = 10;
    var y: int = 20;
    var z: int = 30;

    var t: bool = true;
    var f: bool = false;

    constraint true;
    constraint !false;
    constraint true || false;
    constraint true && (true || false);
    constraint t;
    constraint !!t;
    constraint !f;
    constraint t || f;
    constraint (t && !!!f) || (t && f);

    constraint x == 10 && y != 21 && true && !false;
    constraint x != 11 && y == 20;
    constraint (x > 9 && x < 11 && z == 30) || y == 21;
    constraint (x >= 10 && x < 11 && !(z != 30) && true && !false) || y == 21;
    constraint !(x >= 10 && y == 21);
    constraint !(x == 11 || y == 21);
    constraint !!(x == 10);
    constraint !!!!(x == 10);
    constraint !(!(x != 11) || !(y != 21));
    constraint !(!(x != 10) && !(y != 21));
}

// parsed <<<
// predicate ::test {
//     var ::x: int;
//     var ::y: int;
//     var ::z: int;
//     var ::t: bool;
//     var ::f: bool;
//     constraint (::x == 10);
//     constraint (::y == 20);
//     constraint (::z == 30);
//     constraint (::t == true);
//     constraint (::f == false);
//     constraint true;
//     constraint !false;
//     constraint (true || false);
//     constraint (true && (true || false));
//     constraint ::t;
//     constraint !!::t;
//     constraint !::f;
//     constraint (::t || ::f);
//     constraint ((::t && !!!::f) || (::t && ::f));
//     constraint ((((::x == 10) && (::y != 21)) && true) && !false);
//     constraint ((::x != 11) && (::y == 20));
//     constraint ((((::x > 9) && (::x < 11)) && (::z == 30)) || (::y == 21));
//     constraint ((((((::x >= 10) && (::x < 11)) && !(::z != 30)) && true) && !false) || (::y == 21));
//     constraint !((::x >= 10) && (::y == 21));
//     constraint !((::x == 11) || (::y == 21));
//     constraint !!(::x == 10);
//     constraint !!!!(::x == 10);
//     constraint !(!(::x != 11) || !(::y != 21));
//     constraint !(!(::x != 10) && !(::y != 21));
// }
// >>>

// flattened <<<
// predicate ::test {
//     var ::x: int;
//     var ::y: int;
//     var ::z: int;
//     var ::t: bool;
//     var ::f: bool;
//     constraint (::x == 10);
//     constraint (::y == 20);
//     constraint (::z == 30);
//     constraint (::t == true);
//     constraint (::f == false);
//     constraint true;
//     constraint !false;
//     constraint (true || false);
//     constraint (true && (true || false));
//     constraint ::t;
//     constraint !!::t;
//     constraint !::f;
//     constraint (::t || ::f);
//     constraint ((::t && !!!::f) || (::t && ::f));
//     constraint ((((::x == 10) && (::y != 21)) && true) && !false);
//     constraint ((::x != 11) && (::y == 20));
//     constraint ((((::x > 9) && (::x < 11)) && (::z == 30)) || (::y == 21));
//     constraint ((((((::x >= 10) && (::x < 11)) && !(::z != 30)) && true) && !false) || (::y == 21));
//     constraint !((::x >= 10) && (::y == 21));
//     constraint !((::x == 11) || (::y == 21));
//     constraint !!(::x == 10);
//     constraint !!!!(::x == 10);
//     constraint !(!(::x != 11) || !(::y != 21));
//     constraint !(!(::x != 10) && !(::y != 21));
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
