union Colour = Red | Green | Blue;

// Colouring Australia using 3 colours
predicate test(
    wa: Colour,
    nt: Colour,
    sa: Colour,
    q: Colour,
    nsw: Colour,
    v: Colour,
    t: Colour,
) {
    // Make sure that no two neighboring states/territories share a colour
    constraint wa != nt;
    constraint wa != sa;
    constraint nt != sa;
    constraint nt != q;
    constraint sa != q;
    constraint sa != nsw;
    constraint sa != v;
    constraint q != nsw;
    constraint nsw != v;
}

// parsed <<<
// union ::Colour = Red | Green | Blue;
//
// predicate ::test(
//     ::wa: ::Colour,
//     ::nt: ::Colour,
//     ::sa: ::Colour,
//     ::q: ::Colour,
//     ::nsw: ::Colour,
//     ::v: ::Colour,
//     ::t: ::Colour,
// ) {
//     constraint (::wa != ::nt);
//     constraint (::wa != ::sa);
//     constraint (::nt != ::sa);
//     constraint (::nt != ::q);
//     constraint (::sa != ::q);
//     constraint (::sa != ::nsw);
//     constraint (::sa != ::v);
//     constraint (::q != ::nsw);
//     constraint (::nsw != ::v);
// }
// >>>

// flattened <<<
// union ::Colour = Red | Green | Blue;
//
// predicate ::test(
//     ::wa: ::Colour,
//     ::nt: ::Colour,
//     ::sa: ::Colour,
//     ::q: ::Colour,
//     ::nsw: ::Colour,
//     ::v: ::Colour,
//     ::t: ::Colour,
// ) {
//     constraint (::wa != ::nt);
//     constraint (::wa != ::sa);
//     constraint (::nt != ::sa);
//     constraint (::nt != ::q);
//     constraint (::sa != ::q);
//     constraint (::sa != ::nsw);
//     constraint (::sa != ::v);
//     constraint (::q != ::nsw);
//     constraint (::nsw != ::v);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
