storage {
    m: ( int => int )
}

predicate foo(w: int) {
    let y = 5;

    let x0: int = asm() { };

    let x1: int = asm() {
        0x05
        POP
        ADD
        ALOC
        BAND
    };

    let x2: int = asm(w, y, storage::m[5]) {
        0x05
        POP
        ADD
        ALOC
        BAND
    };

    let negatives: int = asm() {
        0x00 // store back result at this memory location

        -0x01
        -5
        ADD
        -0b111
        ADD

        0x01 
        ALOC  // allocate memory for the returned data
        POP
        STO
    };
    constraint negatives == -13;
}

// parsed <<<
// storage {
//     m: ( int => int ),
// }
//
// predicate ::foo(
//     ::w: int,
// ) {
//     let ::y = 5;
//     let ::x0: int = asm() {
//     };
//     let ::x1: int = asm() {
//         5
//         POP
//         ADD
//         ALOC
//         BAND
//     };
//     let ::x2: int = asm(::w, ::y, storage::m[5]) {
//         5
//         POP
//         ADD
//         ALOC
//         BAND
//     };
//     let ::negatives: int = asm() {
//         0
//         -1
//         -5
//         ADD
//         -7
//         ADD
//         1
//         ALOC
//         POP
//         STO
//     };
//     constraint (::negatives == -13);
// }
// >>>

// flattened <<<
// storage {
//     m: ( int => int ),
// }
//
// predicate ::foo(
//     ::w: int,
// ) {
//     let ::y: int = 5;
//     let ::x0: int = asm() {
//     };
//     let ::x1: int = asm() {
//         5
//         POP
//         ADD
//         ALOC
//         BAND
//     };
//     let ::x2: int = asm(::w, ::y, __pre_state({0, 5})) {
//         5
//         POP
//         ADD
//         ALOC
//         BAND
//     };
//     let ::negatives: int = asm() {
//         0
//         -1
//         -5
//         ADD
//         -7
//         ADD
//         1
//         ALOC
//         POP
//         STO
//     };
//     constraint (::negatives == -13);
//     constraint __eq_set(__mut_keys(), {0});
// }
// >>>
